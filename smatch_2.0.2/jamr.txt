# ::snt Then you will say to them , ' Yes , the stars always make me laugh ! ' And they will think you are crazy .
# ::tok Then you will say to them , ' Yes , the stars always make me laugh ! ' And they will think you are crazy .
# ::alignments 24-25|0.1.2 22-23|0.1.2.0 21-22|0.1 19-20|0.1.0 18-19|0.1.1.2 15-16|0.1.1 12-13|0.1.1.1 11-12|0.1.1.0 8-9|0.1.1.0.0 3-4|0 1-2|0.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:26.840
# ::node	0	say-01	3-4
# ::node	0.0	you	1-2
# ::node	0.1	think-01	21-22
# ::node	0.1.0	they	19-20
# ::node	0.1.1	laugh-01	15-16
# ::node	0.1.1.0	star	11-12
# ::node	0.1.1.0.0	yes	8-9
# ::node	0.1.1.1	always	12-13
# ::node	0.1.1.2	and	18-19
# ::node	0.1.2	crazy	24-25
# ::node	0.1.2.0	you	22-23
# ::node	0.2	then	0-1
# ::root	0	say-01
# ::edge	and	concession	laugh-01	0.1.1.2	0.1.1	
# ::edge	crazy	domain	you	0.1.2	0.1.2.0	
# ::edge	laugh-01	ARG0	star	0.1.1	0.1.1.0	
# ::edge	laugh-01	ARG1	always	0.1.1	0.1.1.1	
# ::edge	say-01	ARG0	you	0	0.0	
# ::edge	say-01	ARG1	think-01	0	0.1	
# ::edge	say-01	time	then	0	0.2	
# ::edge	star	mod	yes	0.1.1.0	0.1.1.0.0	
# ::edge	think-01	ARG0	they	0.1	0.1.0	
# ::edge	think-01	ARG1	laugh-01	0.1	0.1.1	
# ::edge	think-01	ARG2	crazy	0.1	0.1.2	
(s2 / say-01 
      :ARG0 (y3 / you) 
      :ARG1 (t / think-01 
            :ARG0 (t2 / they) 
            :ARG1 (l / laugh-01 
                  :ARG0 (s / star 
                        :mod (y2 / yes)) 
                  :ARG1 (a2 / always) 
                  :concession-of (a / and)) 
            :ARG2 (c / crazy 
                  :domain (y / you))) 
      :time (t3 / then))

# ::snt It will be a very shabby trick that I shall have played on you ... "
# ::tok It will be a very shabby trick that I shall have played on you ... "
# ::alignments 13-14|0.0.0 8-9|0.0 6-7|0 4-5|0.0.0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:27.687
# ::node	0	trick	6-7
# ::node	0.0	i	8-9
# ::node	0.0.0	you	13-14
# ::node	0.0.0.0	very	4-5
# ::node	0.1	it	0-1
# ::root	0	trick
# ::edge	i	accompanier	you	0.0	0.0.0	
# ::edge	trick	domain	i	0	0.0	
# ::edge	trick	domain	it	0	0.1	
# ::edge	you	poss	very	0.0.0	0.0.0.0	
(t / trick 
      :domain (i / i 
            :accompanier (y / you 
                  :poss (v / very))) 
      :domain (i2 / it))

# ::snt And he laughed again .
# ::tok And he laughed again .
# ::alignments 3-4|0.0.1 2-3|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:27.751
# ::node	0	and	0-1
# ::node	0.0	laugh-01	2-3
# ::node	0.0.0	he	1-2
# ::node	0.0.1	again	3-4
# ::root	0	and
# ::edge	and	op1	laugh-01	0	0.0	
# ::edge	laugh-01	ARG0	he	0.0	0.0.0	
# ::edge	laugh-01	mod	again	0.0	0.0.1	
(a2 / and 
      :op1 (l / laugh-01 
            :ARG0 (h / he) 
            :mod (a / again)))

# ::snt " It will be as if , in place of the stars , I had given you a great number of little bells that knew how to laugh ... "
# ::tok " It will be as if , in place of the stars , I had given you a great number of little bells that knew how to laugh ... "
# ::alignments 27-28|0 24-25|0.1 22-23|0.1.0.2 21-22|0.1.0.2.0 19-20|0.1.0 18-19|0.1.0.1 16-17|0.1.0.0.1 15-16|0.1.0.0 13-14|0.1.0.0.0 11-12|0.1.0.0.0.0.0 8-9|0.1.0.0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:29.345
# ::node	0	laugh-01	27-28
# ::node	0.0	it	1-2
# ::node	0.1	know-01	24-25
# ::node	0.1.0	number	19-20
# ::node	0.1.0.0	give-01	15-16
# ::node	0.1.0.0.0	i	13-14
# ::node	0.1.0.0.0.0	place	8-9
# ::node	0.1.0.0.0.0.0	star	11-12
# ::node	0.1.0.0.1	you	16-17
# ::node	0.1.0.1	great	18-19
# ::node	0.1.0.2	bell	22-23
# ::node	0.1.0.2.0	little	21-22
# ::root	0	laugh-01
# ::edge	bell	mod	little	0.1.0.2	0.1.0.2.0	
# ::edge	bell	quant	number	0.1.0.2	0.1.0	
# ::edge	give-01	ARG0	i	0.1.0.0	0.1.0.0.0	
# ::edge	give-01	ARG1	number	0.1.0.0	0.1.0	
# ::edge	give-01	ARG2	you	0.1.0.0	0.1.0.0.1	
# ::edge	know-01	ARG0	number	0.1	0.1.0	
# ::edge	know-01	ARG1	laugh-01	0.1	0	
# ::edge	laugh-01	ARG1	it	0	0.0	
# ::edge	number	mod	great	0.1.0	0.1.0.1	
# ::edge	place	location	star	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	place	poss	i	0.1.0.0.0.0	0.1.0.0.0	
(l / laugh-01 
      :ARG1 (i2 / it) 
      :ARG1-of (k / know-01 
            :ARG0 (n / number 
                  :ARG1-of (g2 / give-01 
                        :ARG0 (i / i 
                              :poss-of (p / place 
                                    :location (s / star))) 
                        :ARG2 (y / you)) 
                  :mod (g / great) 
                  :quant-of (b / bell 
                        :mod (l2 / little)))))

# ::snt And he laughed again .
# ::tok And he laughed again .
# ::alignments 3-4|0.0.1 2-3|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:29.382
# ::node	0	and	0-1
# ::node	0.0	laugh-01	2-3
# ::node	0.0.0	he	1-2
# ::node	0.0.1	again	3-4
# ::root	0	and
# ::edge	and	op1	laugh-01	0	0.0	
# ::edge	laugh-01	ARG0	he	0.0	0.0.0	
# ::edge	laugh-01	mod	again	0.0	0.0.1	
(a2 / and 
      :op1 (l / laugh-01 
            :ARG0 (h / he) 
            :mod (a / again)))

# ::snt Then he quickly became serious : " Tonight - - you know ... do not come , " said the little prince .
# ::tok Then he quickly became serious : " Tonight - - you know ... do not come , " said the little prince .
# ::alignments 21-22|0.0 20-21|0.0.1 18-19|0 11-12|0.0.0 10-11|0.0.0.0 4-5|0.1.1 3-4|0.1 2-3|0.1.2 1-2|0.1.0 0-1|0.1.3 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:29.764
# ::node	0	say-01	18-19
# ::node	0.0	prince	21-22
# ::node	0.0.0	know-01	11-12
# ::node	0.0.0.0	you	10-11
# ::node	0.0.1	little	20-21
# ::node	0.1	become-01	3-4
# ::node	0.1.0	he	1-2
# ::node	0.1.1	serious	4-5
# ::node	0.1.2	quick	2-3
# ::node	0.1.3	then	0-1
# ::root	0	say-01
# ::edge	become-01	ARG1	he	0.1	0.1.0	
# ::edge	become-01	ARG2	serious	0.1	0.1.1	
# ::edge	become-01	manner	quick	0.1	0.1.2	
# ::edge	know-01	ARG0	you	0.0.0	0.0.0.0	
# ::edge	know-01	ARG1	prince	0.0.0	0.0	
# ::edge	prince	mod	little	0.0	0.0.1	
# ::edge	say-01	ARG0	prince	0	0.0	
# ::edge	say-01	ARG1	become-01	0	0.1	
# ::edge	then	op1	become-01	0.1.3	0.1	
(s / say-01 
      :ARG0 (p / prince 
            :ARG1-of (k / know-01 
                  :ARG0 (y / you)) 
            :mod (l / little)) 
      :ARG1 (b / become-01 
            :ARG1 (h / he) 
            :ARG2 (s2 / serious) 
            :manner (q / quick) 
            :op-of (t / then)))

# ::snt " I shall not leave you , "
# ::tok " I shall not leave you , "
# ::alignments 5-6|0.1 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:29.793
# ::node	0	leave-01	4-5
# ::node	0.0	i	1-2
# ::node	0.1	you	5-6
# ::root	0	leave-01
# ::edge	leave-01	ARG0	i	0	0.0	
# ::edge	leave-01	ARG1	you	0	0.1	
(l / leave-01 
      :ARG0 (i / i) 
      :ARG1 (y / you))

# ::snt I said .
# ::tok I said .
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:29.809
# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
(s / say-01 
      :ARG0 (i / i))

# ::snt " I shall look as if I were suffering .
# ::tok " I shall look as if I were suffering .
# ::alignments 8-9|0 6-7|0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:29.898
# ::node	0	suffer-01	8-9
# ::node	0.0	i	1-2
# ::node	0.1	i	6-7
# ::root	0	suffer-01
# ::edge	suffer-01	ARG0	i	0	0.0	
# ::edge	suffer-01	ARG1	i	0	0.1	
(s / suffer-01 
      :ARG0 (i2 / i) 
      :ARG1 (i / i))

# ::snt I shall look a little as if I were dying .
# ::tok I shall look a little as if I were dying .
# ::alignments 9-10|0.0 7-8|0.0.1 4-5|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.033
# ::node	0	little	4-5
# ::node	0.0	die-01	9-10
# ::node	0.0.0	i	0-1
# ::node	0.0.1	i	7-8
# ::root	0	little
(l / little 
      :ARG2-of (d / die-01 
            :ARG0 (i2 / i) 
            :ARG1 (i / i)))

# ::snt It is like that .
# ::tok It is like that .
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.046
# ::node	0	it	0-1
# ::root	0	it
(i / it)

# ::snt Do not come to see that .
# ::tok Do not come to see that .
# ::alignments 4-5|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.067
# ::node	0	see-01	4-5
# ::root	0	see-01
(s / see-01)

# ::snt It is not worth the trouble ... "
# ::tok It is not worth the trouble ... "
# ::alignments 5-6|0.1 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.095
# ::node	0	worth	3-4
# ::node	0.0	it	0-1
# ::node	0.1	trouble-01	5-6
# ::root	0	worth
# ::edge	worth	domain	it	0	0.0	
# ::edge	worth	op1	trouble-01	0	0.1	
(w / worth 
      :domain (i / it) 
      :op1 (t / trouble-01))

# ::snt " I shall not leave you . "
# ::tok " I shall not leave you . "
# ::alignments 5-6|0.1 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.122
# ::node	0	leave-01	4-5
# ::node	0.0	i	1-2
# ::node	0.1	you	5-6
# ::root	0	leave-01
# ::edge	leave-01	ARG0	i	0	0.0	
# ::edge	leave-01	ARG1	you	0	0.1	
(l / leave-01 
      :ARG0 (i / i) 
      :ARG1 (y / you))

# ::snt But he was worried .
# ::tok But he was worried .
# ::alignments 3-4|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.147
# ::node	0	contrast-01	0-1
# ::node	0.0	worry-02	3-4
# ::node	0.0.0	he	1-2
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	worry-02	0	0.0	
# ::edge	worry-02	ARG1	he	0.0	0.0.0	
(c / contrast-01 
      :ARG2 (w / worry-02 
            :ARG1 (h / he)))

# ::snt " I tell you - - it is also because of the snake .
# ::tok " I tell you - - it is also because of the snake .
# ::alignments 12-13|0.0 9-10|0 8-9|0.3 6-7|0.1 3-4|0.2.1 2-3|0.2 1-2|0.2.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.313
# ::node	0	cause-01	9-10
# ::node	0.0	snake	12-13
# ::node	0.1	it	6-7
# ::node	0.2	tell-01	2-3
# ::node	0.2.0	i	1-2
# ::node	0.2.1	you	3-4
# ::node	0.3	also	8-9
# ::root	0	cause-01
# ::edge	cause-01	ARG0	snake	0	0.0	
# ::edge	cause-01	ARG1	it	0	0.1	
# ::edge	cause-01	degree	also	0	0.3	
# ::edge	tell-01	ARG0	i	0.2	0.2.0	
# ::edge	tell-01	ARG1	cause-01	0.2	0	
# ::edge	tell-01	ARG2	you	0.2	0.2.1	
(c / cause-01 
      :ARG0 (s / snake) 
      :ARG1 (i / it) 
      :ARG1-of (t / tell-01 
            :ARG0 (i2 / i) 
            :ARG2 (y / you)) 
      :degree (a / also))

# ::snt He must not bite you .
# ::tok He must not bite you .
# ::alignments 4-5|0.1 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.335
# ::node	0	bite	3-4
# ::node	0.0	he	0-1
# ::node	0.1	you	4-5
# ::root	0	bite
# ::edge	bite	ARG0	he	0	0.0	
# ::edge	bite	degree	you	0	0.1	
(b / bite 
      :ARG0 (h / he) 
      :degree (y / you))

# ::snt Snakes - - they are malicious creatures .
# ::tok Snakes - - they are malicious creatures .
# ::alignments 5-6|0.0 3-4|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.355
# ::node	0	they	3-4
# ::node	0.0	malicious	5-6
# ::root	0	they
# ::edge	they	name	malicious	0	0.0	
(t / they 
      :name (m / malicious))

# ::snt This one might bite you just for fun ... "
# ::tok This one might bite you just for fun ... "
# ::alignments 7-8|0.0.0 5-6|0.0.1 4-5|0.0 3-4|0 0-1|0.0.2 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.399
# ::node	0	bite	3-4
# ::node	0.0	you	4-5
# ::node	0.0.0	fun	7-8
# ::node	0.0.1	just	5-6
# ::node	0.0.2	this	0-1
# ::root	0	bite
# ::edge	bite	degree	you	0	0.0	
# ::edge	you	location	fun	0.0	0.0.0	
# ::edge	you	mod	just	0.0	0.0.1	
# ::edge	you	op1	this	0.0	0.0.2	
(b / bite 
      :degree (y / you 
            :location (f / fun) 
            :mod (j / just) 
            :op1 (t / this)))

# ::snt " I shall not leave you . "
# ::tok " I shall not leave you . "
# ::alignments 5-6|0.1 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.424
# ::node	0	leave-01	4-5
# ::node	0.0	i	1-2
# ::node	0.1	you	5-6
# ::root	0	leave-01
# ::edge	leave-01	ARG0	i	0	0.0	
# ::edge	leave-01	ARG1	you	0	0.1	
(l / leave-01 
      :ARG0 (i / i) 
      :ARG1 (y / you))

# ::snt But a thought came to reassure him : " It is true that they have no more poison for a second bite . "
# ::tok But a thought came to reassure him : " It is true that they have no more poison for a second bite . "
# ::alignments 21-22|0.0 15-16|0.1.1 13-14|0.1.0 11-12|0.2 9-10|0.2.0 2-3|0.1 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.526
# ::node	0	contrast-01	0-1
# ::node	0.0	bite	21-22
# ::node	0.1	think-01	2-3
# ::node	0.1.0	they	13-14
# ::node	0.1.1	-	15-16
# ::node	0.2	true	11-12
# ::node	0.2.0	it	9-10
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	bite	0	0.0	
# ::edge	contrast-01	ARG2	think-01	0	0.1	
# ::edge	think-01	ARG0	they	0.1	0.1.0	
# ::edge	think-01	ARG1	-	0.1	0.1.1	
# ::edge	true	domain	contrast-01	0.2	0	
# ::edge	true	domain	it	0.2	0.2.0	
(c / contrast-01 
      :ARG1 (b / bite) 
      :ARG2 (t3 / think-01 
            :ARG0 (t / they) 
            :ARG1 (- / -)) 
      :domain-of (t2 / true 
            :domain (i / it)))

# ::snt That night I did not see him set out on his way .
# ::tok That night I did not see him set out on his way .
# ::alignments 11-12|0.1 5-6|0 2-3|0.0 1-2|0.2 0-1|0.2.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.575
# ::node	0	see-01	5-6
# ::node	0.0	i	2-3
# ::node	0.1	way	11-12
# ::node	0.2	night	1-2
# ::node	0.2.0	that	0-1
# ::root	0	see-01
# ::edge	night	mod	that	0.2	0.2.0	
# ::edge	see-01	ARG0	i	0	0.0	
# ::edge	see-01	ARG1	way	0	0.1	
# ::edge	see-01	time	night	0	0.2	
(s / see-01 
      :ARG0 (i / i) 
      :ARG1 (w / way) 
      :time (n / night 
            :mod (t / that)))

# ::snt He got away from me without making a sound .
# ::tok He got away from me without making a sound .
# ::alignments 8-9|0 2-3|0.0.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.607
# ::node	0	sound	8-9
# ::node	0.0	he	0-1
# ::node	0.0.0	away	2-3
# ::root	0	sound
# ::edge	away	domain	he	0.0.0	0.0	
# ::edge	sound	poss	he	0	0.0	
(s / sound 
      :poss (h / he 
            :domain-of (a / away)))

# ::snt When I succeeded in catching up with him he was walking along with a quick and resolute step .
# ::tok When I succeeded in catching up with him he was walking along with a quick and resolute step .
# ::alignments 15-16|0 14-15|0.1 11-12|0.0.1 10-11|0.0 8-9|0.0.0 2-3|0.0.0.0 1-2|0.0.0.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.737
# ::node	0	and	15-16
# ::node	0.0	walk-01	10-11
# ::node	0.0.0	he	8-9
# ::node	0.0.0.0	succeed-01	2-3
# ::node	0.0.0.0.0	i	1-2
# ::node	0.0.1	along	11-12
# ::node	0.1	quick	14-15
# ::root	0	and
# ::edge	and	op1	quick	0	0.1	
# ::edge	succeed-01	ARG0	i	0.0.0.0	0.0.0.0.0	
# ::edge	succeed-01	ARG1	he	0.0.0.0	0.0.0	
# ::edge	walk-01	ARG0	he	0.0	0.0.0	
# ::edge	walk-01	ARG1	and	0.0	0	
# ::edge	walk-01	direction	along	0.0	0.0.1	
(a / and 
      :ARG1-of (w / walk-01 
            :ARG0 (h / he 
                  :ARG1-of (s / succeed-01 
                        :ARG0 (i / i))) 
            :direction (a2 / along)) 
      :op1 (q / quick))

# ::snt He said to me merely : " Ah !
# ::tok He said to me merely : " Ah !
# ::alignments 7-8|0.1 4-5|0.2 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.768
# ::node	0	say-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	ah	7-8
# ::node	0.2	mere	4-5
# ::root	0	say-01
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	ah	0	0.1	
# ::edge	say-01	mod	mere	0	0.2	
(s / say-01 
      :ARG0 (h / he) 
      :ARG1 (a / ah) 
      :mod (m / mere))

# ::snt You are there ... "
# ::tok You are there ... "
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.778
# ::node	0	you	0-1
# ::root	0	you
(y / you)

# ::snt And he took me by the hand .
# ::tok And he took me by the hand .
# ::alignments 6-7|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.803
# ::node	0	and	0-1
# ::node	0.0	hand	6-7
# ::node	0.0.0	he	1-2
# ::root	0	and
# ::edge	and	op1	hand	0	0.0	
# ::edge	he	part	hand	0.0.0	0.0	
(a / and 
      :op1 (h / hand 
            :part-of (h2 / he)))

# ::snt But he was still worrying .
# ::tok But he was still worrying .
# ::alignments 4-5|0.0 3-4|0.0.1 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.830
# ::node	0	contrast-01	0-1
# ::node	0.0	worry-02	4-5
# ::node	0.0.0	he	1-2
# ::node	0.0.1	still	3-4
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	worry-02	0	0.0	
# ::edge	worry-02	ARG0	he	0.0	0.0.0	
# ::edge	worry-02	mod	still	0.0	0.0.1	
(c / contrast-01 
      :ARG2 (w / worry-02 
            :ARG0 (h / he) 
            :mod (s / still)))

# ::snt " It was wrong of you to come .
# ::tok " It was wrong of you to come .
# ::alignments 5-6|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.876
# ::node	0	wrong-41	3-4
# ::node	0.0	it	1-2
# ::node	0.1	you	5-6
# ::root	0	wrong-41
# ::edge	wrong-41	ARG1	it	0	0.0	
# ::edge	wrong-41	ARG2	you	0	0.1	
(w / wrong-41 
      :ARG1 (i / it) 
      :ARG2 (y / you))

# ::snt You will suffer .
# ::tok You will suffer .
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.890
# ::node	0	suffer-01	2-3
# ::node	0.0	you	0-1
# ::root	0	suffer-01
# ::edge	suffer-01	ARG0	you	0	0.0	
(s / suffer-01 
      :ARG0 (y / you))

# ::snt I shall look as if I were dead ; and that will not be true ... "
# ::tok I shall look as if I were dead ; and that will not be true ... "
# ::alignments 14-15|0.0.1 9-10|0.0 8-9|0 5-6|0.0.0 0-1|0.0.1.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.942
# ::node	0	and	8-9
# ::node	0.0	and	9-10
# ::node	0.0.0	i	5-6
# ::node	0.0.1	true	14-15
# ::node	0.0.1.0	i	0-1
# ::root	0	and
# ::edge	and	op1	and	0	0.0	
# ::edge	and	op1	i	0.0	0.0.0	
# ::edge	and	op2	true	0.0	0.0.1	
# ::edge	true	domain	i	0.0.1	0.0.1.0	
(a2 / and 
      :op1 (a / and 
            :op1 (i / i) 
            :op2 (t / true 
                  :domain (i2 / i))))

# ::snt I said nothing .
# ::tok I said nothing .
# ::alignments 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.961
# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	nothing	2-3
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	nothing	0	0.1	
(s / say-01 
      :ARG0 (i / i) 
      :ARG1 (n / nothing))

# ::snt " You understand ... it is too far .
# ::tok " You understand ... it is too far .
# ::alignments 7-8|0.1.0 6-7|0.1 4-5|0.2 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:30.996
# ::node	0	understand-01	2-3
# ::node	0.0	you	1-2
# ::node	0.1	too	6-7
# ::node	0.1.0	far	7-8
# ::node	0.2	it	4-5
# ::root	0	understand-01
# ::edge	far	degree	too	0.1.0	0.1	
# ::edge	it	op1	understand-01	0.2	0	
# ::edge	understand-01	ARG0	you	0	0.0	
# ::edge	understand-01	ARG1	too	0	0.1	
(u / understand-01 
      :ARG0 (y / you) 
      :ARG1 (t / too 
            :degree-of (f / far)) 
      :op-of (i / it))

# ::snt I can not carry this body with me .
# ::tok I can not carry this body with me .
# ::alignments 5-6|0.0 4-5|0.0.0 1-2|0 0-1|0.0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:31.025
# ::node	0	possible	1-2
# ::node	0.0	body	5-6
# ::node	0.0.0	this	4-5
# ::node	0.0.1	i	0-1
# ::root	0	possible
# ::edge	body	mod	this	0.0	0.0.0	
# ::edge	body	poss	i	0.0	0.0.1	
# ::edge	possible	domain	body	0	0.0	
(p / possible 
      :domain (b / body 
            :mod (t / this) 
            :poss (i / i)))

# ::snt It is too heavy . "
# ::tok It is too heavy . "
# ::alignments 3-4|0 2-3|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:31.043
# ::node	0	heavy	3-4
# ::node	0.0	too	2-3
# ::node	0.1	it	0-1
# ::root	0	heavy
# ::edge	heavy	degree	too	0	0.0	
# ::edge	heavy	domain	it	0	0.1	
(h / heavy 
      :degree (t / too) 
      :domain (i / it))

# ::snt I said nothing .
# ::tok I said nothing .
# ::alignments 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:31.061
# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	nothing	2-3
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	nothing	0	0.1	
(s / say-01 
      :ARG0 (i / i) 
      :ARG1 (n / nothing))

# ::snt " But it will be like an old abandoned shell .
# ::tok " But it will be like an old abandoned shell .
# ::alignments 9-10|0.0.0 8-9|0.0 7-8|0.0.1 2-3|0.0.2 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:31.677
# ::node	0	contrast-01	1-2
# ::node	0.0	abandon-01	8-9
# ::node	0.0.0	shell	9-10
# ::node	0.0.1	old	7-8
# ::node	0.0.2	it	2-3
# ::root	0	contrast-01
# ::edge	abandon-01	ARG1	shell	0.0	0.0.0	
# ::edge	abandon-01	concession	old	0.0	0.0.1	
# ::edge	abandon-01	li	it	0.0	0.0.2	
# ::edge	contrast-01	ARG2	abandon-01	0	0.0	
(c / contrast-01 
      :ARG2 (a / abandon-01 
            :ARG1 (s / shell) 
            :concession (o / old) 
            :li (i / it)))

# ::snt There is nothing sad about old shells ... "
# ::tok There is nothing sad about old shells ... "
# ::alignments 6-7|0.1 5-6|0.1.0 3-4|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:31.706
# ::node	0	sad	3-4
# ::node	0.0	nothing	2-3
# ::node	0.1	shell	6-7
# ::node	0.1.0	old	5-6
# ::root	0	sad
# ::edge	nothing	mod	sad	0.0	0	
# ::edge	sad	prep-in	shell	0	0.1	
# ::edge	shell	mod	old	0.1	0.1.0	
(s2 / sad 
      :mod-of (n / nothing) 
      :prep-in (s / shell 
            :mod (o / old)))

# ::snt I said nothing .
# ::tok I said nothing .
# ::alignments 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:31.723
# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	nothing	2-3
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	nothing	0	0.1	
(s / say-01 
      :ARG0 (i / i) 
      :ARG1 (n / nothing))

# ::snt He was a little discouraged .
# ::tok He was a little discouraged .
# ::alignments 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:31.737
# ::node	0	little	3-4
# ::node	0.0	he	0-1
# ::root	0	little
(l / little 
      :example-of (h / he))

# ::snt But he made one more effort : " You know , it will be very nice .
# ::tok But he made one more effort : " You know , it will be very nice .
# ::alignments 15-16|0.0.2 14-15|0.0.2.0 11-12|0.0.2.1 9-10|0.0 8-9|0.0.0 5-6|0.0.1.0 1-2|0.0.1 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:32.311
# ::node	0	contrast-01	0-1
# ::node	0.0	know-01	9-10
# ::node	0.0.0	you	8-9
# ::node	0.0.1	he	1-2
# ::node	0.0.1.0	effort	5-6
# ::node	0.0.2	nice-42	15-16
# ::node	0.0.2.0	very	14-15
# ::node	0.0.2.1	it	11-12
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	know-01	0	0.0	
# ::edge	effort	poss	he	0.0.1.0	0.0.1	
# ::edge	it	mod	nice-42	0.0.2.1	0.0.2	
# ::edge	know-01	ARG0	you	0.0	0.0.0	
# ::edge	know-01	ARG1	he	0.0	0.0.1	
# ::edge	nice-42	degree	very	0.0.2	0.0.2.0	
# ::edge	nice-42	time	know-01	0.0.2	0.0	
(c / contrast-01 
      :ARG1 (k / know-01 
            :ARG0 (y / you) 
            :ARG1 (h / he 
                  :poss-of (e / effort)) 
            :time-of (n / nice-42 
                  :degree (v / very) 
                  :mod-of (i / it))))

# ::snt I , too , shall look at the stars .
# ::tok I , too , shall look at the stars .
# ::alignments 8-9|0 2-3|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:32.333
# ::node	0	star	8-9
# ::node	0.0	too	2-3
# ::node	0.1	i	0-1
# ::root	0	star
# ::edge	star	poss	i	0	0.1	
# ::edge	too	part	star	0.0	0	
(s / star 
      :part-of (t / too) 
      :poss (i / i))

# ::snt All the stars will be wells with a rusty pulley .
# ::tok All the stars will be wells with a rusty pulley .
# ::alignments 8-9|0.0 5-6|0.1 2-3|0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:32.386
# ::node	0	star	2-3
# ::node	0.0	rust-01	8-9
# ::node	0.1	well	5-6
# ::node	0.2	all	0-1
# ::root	0	star
# ::edge	rust-01	ARG1	star	0.0	0	
# ::edge	star	quant	all	0	0.2	
# ::edge	well	domain	star	0.1	0	
(s / star 
      :ARG1-of (r / rust-01) 
      :domain-of (w / well) 
      :quant (a / all))

# ::snt All the stars will pour out fresh water for me to drink ... "
# ::tok All the stars will pour out fresh water for me to drink ... "
# ::alignments 11-12|0.1 7-8|0.1.0 6-7|0.1.0.0 4-5|0 2-3|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:32.432
# ::node	0	pour-01	4-5
# ::node	0.0	star	2-3
# ::node	0.0.0	all	0-1
# ::node	0.1	drink-01	11-12
# ::node	0.1.0	water	7-8
# ::node	0.1.0.0	fresh	6-7
# ::root	0	pour-01
# ::edge	drink-01	ARG0	water	0.1	0.1.0	
# ::edge	pour-01	ARG0	star	0	0.0	
# ::edge	pour-01	purpose	drink-01	0	0.1	
# ::edge	star	quant	all	0.0	0.0.0	
# ::edge	water	mod	fresh	0.1.0	0.1.0.0	
(p / pour-01 
      :ARG0 (s / star 
            :quant (a / all)) 
      :purpose (d / drink-01 
            :ARG0 (w / water 
                  :mod (f / fresh))))

# ::snt I said nothing .
# ::tok I said nothing .
# ::alignments 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:32.449
# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	nothing	2-3
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	nothing	0	0.1	
(s / say-01 
      :ARG0 (i / i) 
      :ARG1 (n / nothing))

# ::snt " That will be so amusing !
# ::tok " That will be so amusing !
# ::alignments 5-6|0 4-5|0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:32.509
# ::node	0	amuse-01	5-6
# ::node	0.0	that	1-2
# ::node	0.1	so	4-5
# ::root	0	amuse-01
# ::edge	amuse-01	ARG0	that	0	0.0	
# ::edge	amuse-01	degree	so	0	0.1	
(a / amuse-01 
      :ARG0 (t / that) 
      :degree (s / so))

# ::snt You will have five hundred million little bells , and I shall have five hundred million springs of fresh water ... "
# ::tok You will have five hundred million little bells , and I shall have five hundred million springs of fresh water ... "
# ::alignments 19-20|0.1.0.0 18-19|0.1.0.0.0 16-17|0.1.0 13-14|0.1.0.0.0.0.0 10-11|0.1 9-10|0 7-8|0.0 6-7|0.0.0 3-4|0.1.0.0.0.0 0-1|0.0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:32.655
# ::node	0	and	9-10
# ::node	0.0	bell	7-8
# ::node	0.0.0	little	6-7
# ::node	0.0.1	you	0-1
# ::node	0.1	i	10-11
# ::node	0.1.0	spring	16-17
# ::node	0.1.0.0	water	19-20
# ::node	0.1.0.0.0	fresh	18-19
# ::node	0.1.0.0.0.0	5	3-4
# ::node	0.1.0.0.0.0.0	5	13-14
# ::root	0	and
# ::edge	5	poss	5	0.1.0.0.0.0.0	0.1.0.0.0.0	
# ::edge	and	op1	bell	0	0.0	
# ::edge	and	op2	i	0	0.1	
# ::edge	bell	mod	little	0.0	0.0.0	
# ::edge	bell	poss	you	0.0	0.0.1	
# ::edge	fresh	poss	5	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	i	part	spring	0.1	0.1.0	
# ::edge	water	consist	spring	0.1.0.0	0.1.0	
# ::edge	water	mod	fresh	0.1.0.0	0.1.0.0.0	
(a / and 
      :op1 (b / bell 
            :mod (l / little) 
            :poss (y / you)) 
      :op2 (i / i 
            :part (s / spring 
                  :consist-of (w / water 
                        :mod (f / fresh 
                              :poss (52 / 5 
                                    :poss-of 5))))))

# ::snt And he too said nothing more , because he was crying ...
# ::tok And he too said nothing more , because he was crying ...
# ::alignments 10-11|0.4 8-9|0.4.0 7-8|0.4.1 4-5|0.1 3-4|0 2-3|0.2 1-2|0.0 0-1|0.3 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.257
# ::node	0	say-01	3-4
# ::node	0.0	he	1-2
# ::node	0.1	nothing	4-5
# ::node	0.2	too	2-3
# ::node	0.3	and	0-1
# ::node	0.4	cry-02	10-11
# ::node	0.4.0	he	8-9
# ::node	0.4.1	cause-01	7-8
# ::root	0	say-01
# ::edge	and	op1	say-01	0.3	0	
# ::edge	cause-01	ARG0	cry-02	0.4.1	0.4	
# ::edge	cry-02	ARG0	he	0.4	0.4.0	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	nothing	0	0.1	
# ::edge	say-01	mod	too	0	0.2	
# ::edge	say-01	time	cry-02	0	0.4	
(s / say-01 
      :ARG0 (h2 / he) 
      :ARG1 (n / nothing) 
      :mod (t / too) 
      :op-of (a / and) 
      :time (c / cry-02 
            :ARG0 (h / he) 
            :ARG0-of (c2 / cause-01)))

# ::snt " Here it is .
# ::tok " Here it is .
# ::alignments 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.268
# ::node	0	here	1-2
# ::node	0.0	it	2-3
# ::root	0	here
(h / here 
      :mod-of (i / it))

# ::snt Let me go on by myself . "
# ::tok Let me go on by myself . "
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.283
# ::node	0	let-01	0-1
# ::root	0	let-01
(l / let-01)

# ::snt And he sat down , because he was afraid .
# ::tok And he sat down , because he was afraid .
# ::alignments 6-7|0.0.1 5-6|0.0 3-4|0.0.0 1-2|0.0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.338
# ::node	0	and	0-1
# ::node	0.0	cause-01	5-6
# ::node	0.0.0	down	3-4
# ::node	0.0.0.0	he	1-2
# ::node	0.0.1	he	6-7
# ::root	0	and
(a / and 
      :ARG0-of (c / cause-01 
            :ARG1 (d / down 
                  :op1 (h2 / he)) 
            :topic-of (h / he)))

# ::snt Then he said , again : " You know - - my flower ...
# ::tok Then he said , again : " You know - - my flower ...
# ::alignments 8-9|0.1 7-8|0.1.0 4-5|0.2 2-3|0 1-2|0.0 0-1|0.3 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.509
# ::node	0	say-01	2-3
# ::node	0.0	he	1-2
# ::node	0.1	know-01	8-9
# ::node	0.1.0	you	7-8
# ::node	0.2	again	4-5
# ::node	0.3	then	0-1
# ::root	0	say-01
# ::edge	know-01	ARG0	you	0.1	0.1.0	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	know-01	0	0.1	
# ::edge	say-01	mod	again	0	0.2	
# ::edge	say-01	time	then	0	0.3	
(s / say-01 
      :ARG0 (h / he) 
      :ARG1 (k / know-01 
            :ARG0 (y / you)) 
      :mod (a / again) 
      :time (t / then))

# ::snt I am responsible for her .
# ::tok I am responsible for her .
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.523
# ::node	0	responsible-41	2-3
# ::node	0.0	i	0-1
# ::root	0	responsible-41
# ::edge	responsible-41	ARG1	i	0	0.0	
(r / responsible-41 
      :ARG1 (i / i))

# ::snt And she is so weak !
# ::tok And she is so weak !
# ::alignments 4-5|0.0.0 3-4|0.0.0.0 1-2|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.542
# ::node	0	and	0-1
# ::node	0.0	she	1-2
# ::node	0.0.0	weak	4-5
# ::node	0.0.0.0	so	3-4
# ::root	0	and
# ::edge	and	op1	she	0	0.0	
# ::edge	weak	degree	so	0.0.0	0.0.0.0	
# ::edge	weak	domain	she	0.0.0	0.0	
(a / and 
      :op1 (s2 / she 
            :domain-of (w / weak 
                  :degree (s / so))))

# ::snt She is so naïve !
# ::tok She is so naïve !
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.570
# ::node	0	so	2-3
# ::node	0.0	she	0-1
# ::root	0	so
(s / so 
      :quant-of (s2 / she))

# ::snt She has four thorns , of no use at all , to protect herself against all the world ... "
# ::tok She has four thorns , of no use at all , to protect herself against all the world ... "
# ::alignments 17-18|0.1.1 15-16|0.1.1.0 12-13|0.1 9-10|0.0 7-8|0 6-7|0.2 2-3|0.1.1.0.0 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.666
# ::node	0	use-01	7-8
# ::node	0.0	all	9-10
# ::node	0.1	protect-01	12-13
# ::node	0.1.0	she	0-1
# ::node	0.1.1	world	17-18
# ::node	0.1.1.0	all	15-16
# ::node	0.1.1.0.0	4	2-3
# ::node	0.2	-	6-7
# ::root	0	use-01
# ::edge	4	mod	all	0.1.1.0.0	0.1.1.0	
# ::edge	protect-01	ARG1	she	0.1	0.1.0	
# ::edge	protect-01	ARG2	world	0.1	0.1.1	
# ::edge	use-01	ARG1	all	0	0.0	
# ::edge	use-01	ARG2	protect-01	0	0.1	
# ::edge	use-01	polarity	-	0	0.2	
# ::edge	world	quant	all	0.1.1	0.1.1.0	
(u / use-01 
      :ARG1 (a2 / all) 
      :ARG2 (p / protect-01 
            :ARG1 (s / she) 
            :ARG2 (w / world 
                  :quant (a / all 
                        :mod-of 4))) 
      :polarity (- / -))

# ::snt I too sat down , because I was not able to stand up any longer .
# ::tok I too sat down , because I was not able to stand up any longer .
# ::alignments 14-15|0.2.0 13-14|0.2.0.0 9-10|0.0 6-7|0.0.0 5-6|0 3-4|0.1 1-2|0.2 0-1|0.0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.823
# ::node	0	cause-01	5-6
# ::node	0.0	possible	9-10
# ::node	0.0.0	i	6-7
# ::node	0.0.1	i	0-1
# ::node	0.1	down	3-4
# ::node	0.2	too	1-2
# ::node	0.2.0	long	14-15
# ::node	0.2.0.0	any	13-14
# ::root	0	cause-01
# ::edge	cause-01	ARG0	possible	0	0.0	
# ::edge	cause-01	ARG1	down	0	0.1	
# ::edge	cause-01	ARG2	too	0	0.2	
# ::edge	long	degree	too	0.2.0	0.2	
# ::edge	long	mod	any	0.2.0	0.2.0.0	
# ::edge	possible	domain	i	0.0	0.0.0	
# ::edge	possible	domain	i	0.0	0.0.1	
(c / cause-01 
      :ARG0 (p / possible 
            :domain (i / i) 
            :domain (i2 / i)) 
      :ARG1 (d / down) 
      :ARG2 (t / too 
            :degree-of (l / long 
                  :mod (a / any))))

# ::snt " There now - - that is all ... "
# ::tok " There now - - that is all ... "
# ::alignments 7-8|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:33.840
# ::node	0	all	7-8
# ::node	0.0	now	2-3
# ::root	0	all
(a / all 
      :domain-of (n / now))

# ::snt He still hesitated a little ; then he got up .
# ::tok He still hesitated a little ; then he got up .
# ::alignments 7-8|0.0.1 6-7|0.1 5-6|0 4-5|0.0.2 2-3|0.0 1-2|0.0.3 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.013
# ::node	0	and	5-6
# ::node	0.0	hesitate-01	2-3
# ::node	0.0.0	he	0-1
# ::node	0.0.1	he	7-8
# ::node	0.0.2	little	4-5
# ::node	0.0.3	still	1-2
# ::node	0.1	then	6-7
# ::root	0	and
# ::edge	and	op1	hesitate-01	0	0.0	
# ::edge	and	time	then	0	0.1	
# ::edge	hesitate-01	ARG0	he	0.0	0.0.0	
# ::edge	hesitate-01	ARG2	he	0.0	0.0.1	
# ::edge	hesitate-01	degree	little	0.0	0.0.2	
# ::edge	hesitate-01	mod	still	0.0	0.0.3	
(a / and 
      :op1 (h2 / hesitate-01 
            :ARG0 (h3 / he) 
            :ARG2 (h / he) 
            :degree (l / little) 
            :mod (s / still)) 
      :time (t / then))

# ::snt He took one step .
# ::tok He took one step .
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.025
# ::node	0	he	0-1
# ::root	0	he
(h / he)

# ::snt I could not move .
# ::tok I could not move .
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.037
# ::node	0	possible	1-2
# ::node	0.0	i	0-1
# ::root	0	possible
# ::edge	possible	degree	i	0	0.0	
(p / possible 
      :degree (i / i))

# ::snt There was nothing but a flash of yellow close to his ankle .
# ::tok There was nothing but a flash of yellow close to his ankle .
# ::alignments 11-12|0.0 7-8|0.2 3-4|0 2-3|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.086
# ::node	0	contrast-01	3-4
# ::node	0.0	ankle	11-12
# ::node	0.1	nothing	2-3
# ::node	0.2	yellow	7-8
# ::root	0	contrast-01
# ::edge	contrast-01	ARG0	ankle	0	0.0	
# ::edge	contrast-01	ARG1	nothing	0	0.1	
# ::edge	contrast-01	ARG2	yellow	0	0.2	
(c / contrast-01 
      :ARG0 (a / ankle) 
      :ARG1 (n / nothing) 
      :ARG2 (y / yellow))

# ::snt He remained motionless for an instant .
# ::tok He remained motionless for an instant .
# ::alignments 5-6|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.103
# ::node	0	remain-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	instant	5-6
# ::root	0	remain-01
# ::edge	remain-01	ARG1	he	0	0.0	
# ::edge	remain-01	ARG2	instant	0	0.1	
(r / remain-01 
      :ARG1 (h / he) 
      :ARG2 (i / instant))

# ::snt He did not cry out .
# ::tok He did not cry out .
# ::alignments 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.115
# ::node	0	cry-02	3-4
# ::node	0.0	he	0-1
# ::root	0	cry-02
# ::edge	cry-02	ARG0	he	0	0.0	
(c / cry-02 
      :ARG0 (h / he))

# ::snt He fell as gently as a tree falls .
# ::tok He fell as gently as a tree falls .
# ::alignments 6-7|0.0 1-2|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.134
# ::node	0	fall-01	1-2
# ::node	0.0	tree	6-7
# ::node	0.1	he	0-1
# ::root	0	fall-01
# ::edge	fall-01	ARG0	tree	0	0.0	
# ::edge	fall-01	ARG1	he	0	0.1	
(f / fall-01 
      :ARG0 (t / tree) 
      :ARG1 (h / he))

# ::snt There was not even any sound , because of the sand .
# ::tok There was not even any sound , because of the sand .
# ::alignments 10-11|0.0 7-8|0 5-6|0.1.0 4-5|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.180
# ::node	0	cause-01	7-8
# ::node	0.0	sand-01	10-11
# ::node	0.1	any	4-5
# ::node	0.1.0	sound	5-6
# ::root	0	cause-01
# ::edge	any	op1	cause-01	0.1	0	
# ::edge	cause-01	ARG0	sand-01	0	0.0	
# ::edge	sound	mod	any	0.1.0	0.1	
(c / cause-01 
      :ARG0 (s / sand-01) 
      :op-of (a / any 
            :mod-of (s2 / sound)))

# ::snt Chapter 27 .
# ::tok Chapter 27 .
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.189
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt And now six years have already gone by ...
# ::tok And now six years have already gone by ...
# ::alignments 5-6|0.2 3-4|0.0.1+0.0 2-3|0.0.0 1-2|0.1 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.237
# ::node	0	and	0-1
# ::node	0.0	temporal-quantity	3-4
# ::node	0.0.0	6	2-3
# ::node	0.0.1	year	3-4
# ::node	0.1	now	1-2
# ::node	0.2	already	5-6
# ::root	0	and
# ::edge	and	mod	temporal-quantity	0	0.0	
# ::edge	and	time	already	0	0.2	
# ::edge	and	time	now	0	0.1	
# ::edge	temporal-quantity	quant	6	0.0	0.0.0	
# ::edge	temporal-quantity	unit	year	0.0	0.0.1	
(a2 / and 
      :mod (t / temporal-quantity 
            :quant 6 
            :unit (y / year)) 
      :time (n / now) 
      :time (a / already))

# ::snt I have never yet told this story .
# ::tok I have never yet told this story .
# ::alignments 6-7|0.1 5-6|0.1.0 4-5|0 3-4|0.2 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.268
# ::node	0	tell-01	4-5
# ::node	0.0	i	0-1
# ::node	0.1	story	6-7
# ::node	0.1.0	this	5-6
# ::node	0.2	yet	3-4
# ::root	0	tell-01
# ::edge	story	mod	this	0.1	0.1.0	
# ::edge	tell-01	ARG0	i	0	0.0	
# ::edge	tell-01	ARG1	story	0	0.1	
# ::edge	tell-01	time	yet	0	0.2	
(t2 / tell-01 
      :ARG0 (i / i) 
      :ARG1 (s / story 
            :mod (t / this)) 
      :time (y / yet))

# ::snt The companions who met me on my return were well content to see me alive .
# ::tok The companions who met me on my return were well content to see me alive .
# ::alignments 12-13|0.0.0 10-11|0.0.0.0 9-10|0.0.0.0.0 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.309
# ::node	0	meet-03	3-4
# ::node	0.0	companion	1-2
# ::node	0.0.0	see-01	12-13
# ::node	0.0.0.0	content	10-11
# ::node	0.0.0.0.0	well	9-10
# ::root	0	meet-03
# ::edge	content	domain	see-01	0.0.0.0	0.0.0	
# ::edge	content	mod	well	0.0.0.0	0.0.0.0.0	
# ::edge	meet-03	ARG0	companion	0	0.0	
# ::edge	see-01	ARG1	companion	0.0.0	0.0	
(m / meet-03 
      :ARG0 (c2 / companion 
            :ARG1-of (s / see-01 
                  :domain-of (c / content 
                        :mod (w / well)))))

# ::snt I was sad , but I told them : " I am tired . "
# ::tok I was sad , but I told them : " I am tired . "
# ::alignments 12-13|0.1.1.0 10-11|0.1.1 6-7|0.1 5-6|0.1.0 4-5|0 2-3|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.536
# ::node	0	contrast-01	4-5
# ::node	0.0	sad	2-3
# ::node	0.0.0	i	0-1
# ::node	0.1	tell-01	6-7
# ::node	0.1.0	i	5-6
# ::node	0.1.1	i	10-11
# ::node	0.1.1.0	tire-01	12-13
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	sad	0	0.0	
# ::edge	contrast-01	ARG2	tell-01	0	0.1	
# ::edge	sad	domain	i	0.0	0.0.0	
# ::edge	tell-01	ARG0	i	0.1	0.1.0	
# ::edge	tell-01	ARG2	i	0.1	0.1.1	
# ::edge	tire-01	ARG1	i	0.1.1.0	0.1.1	
(c / contrast-01 
      :ARG1 (s / sad 
            :domain (i3 / i)) 
      :ARG2 (t2 / tell-01 
            :ARG0 (i2 / i) 
            :ARG2 (i / i 
                  :ARG1-of (t / tire-01))))

# ::snt Now my sorrow is comforted a little .
# ::tok Now my sorrow is comforted a little .
# ::alignments 6-7|0.1 2-3|0.0+0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.558
# ::node	0	thing	2-3
# ::node	0.0	sorrow-01	2-3
# ::node	0.1	little	6-7
# ::node	0.2	now	0-1
# ::root	0	thing
(t / thing 
      :ARG1-of (s / sorrow-01) 
      :domain-of (l / little) 
      :mod-of (n / now))

# ::snt That is to say - - not entirely .
# ::tok That is to say - - not entirely .
# ::alignments 7-8|0.0 3-4|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:34.579
# ::node	0	say-01	3-4
# ::node	0.0	entire	7-8
# ::node	0.1	that	0-1
# ::root	0	say-01
# ::edge	say-01	ARG0	entire	0	0.0	
# ::edge	say-01	ARG1	that	0	0.1	
(s / say-01 
      :ARG0 (e / entire) 
      :ARG1 (t / that))

# ::snt But I know that he did go back to his planet , because I did not find his body at daybreak .
# ::tok But I know that he did go back to his planet , because I did not find his body at daybreak .
# ::alignments 18-19|0.0.0.0 13-14|0.0.0.0.1 12-13|0.0.0.0.0 10-11|0.0.1 7-8|0.0.0.0.0.0 4-5|0.0.2 2-3|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:35.349
# ::node	0	contrast-01	0-1
# ::node	0.0	know-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.0.0	body	18-19
# ::node	0.0.0.0.0	cause-01	12-13
# ::node	0.0.0.0.0.0	back	7-8
# ::node	0.0.0.0.1	i	13-14
# ::node	0.0.1	planet	10-11
# ::node	0.0.2	he	4-5
# ::root	0	contrast-01
# ::edge	body	poss	i	0.0.0.0	0.0.0	
# ::edge	body	poss	i	0.0.0.0	0.0.0.0.1	
# ::edge	cause-01	ARG0	body	0.0.0.0.0	0.0.0.0	
# ::edge	cause-01	ARG1	back	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	contrast-01	ARG2	know-01	0	0.0	
# ::edge	know-01	ARG0	i	0.0	0.0.0	
# ::edge	know-01	ARG1	planet	0.0	0.0.1	
# ::edge	know-01	ARG4	he	0.0	0.0.2	
(c2 / contrast-01 
      :ARG2 (k / know-01 
            :ARG0 (i2 / i 
                  :poss-of (b / body 
                        :ARG0-of (c / cause-01 
                              :ARG1 (b2 / back)) 
                        :poss (i / i))) 
            :ARG1 (p / planet) 
            :ARG4 (h / he)))

# ::snt It was not such a heavy body ... and at night I love to listen to the stars .
# ::tok It was not such a heavy body ... and at night I love to listen to the stars .
# ::alignments 17-18|0.1.0.0.0 14-15|0.1.0.0 12-13|0.1 11-12|0.1.0 10-11|0.1.2 8-9|0 6-7|0.0 5-6|0.0.0 3-4|0.0.0.0 0-1|0.1.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:35.544
# ::node	0	and	8-9
# ::node	0.0	body	6-7
# ::node	0.0.0	heavy	5-6
# ::node	0.0.0.0	such	3-4
# ::node	0.1	love-01	12-13
# ::node	0.1.0	i	11-12
# ::node	0.1.0.0	listen-01	14-15
# ::node	0.1.0.0.0	star	17-18
# ::node	0.1.1	it	0-1
# ::node	0.1.2	night	10-11
# ::root	0	and
# ::edge	and	op1	body	0	0.0	
# ::edge	and	op2	love-01	0	0.1	
# ::edge	body	mod	heavy	0.0	0.0.0	
# ::edge	heavy	degree	such	0.0.0	0.0.0.0	
# ::edge	listen-01	ARG0	i	0.1.0.0	0.1.0	
# ::edge	listen-01	ARG1	star	0.1.0.0	0.1.0.0.0	
# ::edge	love-01	ARG0	i	0.1	0.1.0	
# ::edge	love-01	ARG1	it	0.1	0.1.1	
# ::edge	love-01	time	night	0.1	0.1.2	
(a / and 
      :op1 (b / body 
            :mod (h / heavy 
                  :degree (s2 / such))) 
      :op2 (l2 / love-01 
            :ARG0 (i / i 
                  :ARG0-of (l / listen-01 
                        :ARG1 (s / star))) 
            :ARG1 (i2 / it) 
            :time (n / night)))

# ::snt It is like five hundred million little bells ...
# ::tok It is like five hundred million little bells ...
# ::alignments 7-8|0.0 6-7|0 3-4|0.0.0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:35.565
# ::node	0	little	6-7
# ::node	0.0	bell	7-8
# ::node	0.0.0	5	3-4
# ::node	0.0.0.0	it	0-1
# ::root	0	little
(l / little 
      :mod-of (b / bell 
            :name-of (5 / 5 
                  :example (i / it))))

# ::snt But there is one extraordinary thing ... when I drew the muzzle for the little prince , I forgot to add the leather strap to it .
# ::tok But there is one extraordinary thing ... when I drew the muzzle for the little prince , I forgot to add the leather strap to it .
# ::alignments 25-26|0.0.1.2 22-23|0.0.1.1 20-21|0.0.1 18-19|0.0 17-18|0.0.1.0 15-16|0.0.0.0.1 14-15|0.0.0.0.1.0 9-10|0.0.0.0 8-9|0.0.0 5-6|0.0.0.0.0 4-5|0.0.0.0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:36.190
# ::node	0	contrast-01	0-1
# ::node	0.0	forget-01	18-19
# ::node	0.0.0	i	8-9
# ::node	0.0.0.0	draw-02	9-10
# ::node	0.0.0.0.0	thing	5-6
# ::node	0.0.0.0.0.0	extraordinary	4-5
# ::node	0.0.0.0.1	prince	15-16
# ::node	0.0.0.0.1.0	little	14-15
# ::node	0.0.1	add-02	20-21
# ::node	0.0.1.0	i	17-18
# ::node	0.0.1.1	leather	22-23
# ::node	0.0.1.2	it	25-26
# ::root	0	contrast-01
# ::edge	add-02	ARG0	i	0.0.1	0.0.1.0	
# ::edge	add-02	ARG1	leather	0.0.1	0.0.1.1	
# ::edge	contrast-01	ARG2	forget-01	0	0.0	
# ::edge	draw-02	ARG0	i	0.0.0.0	0.0.0	
# ::edge	draw-02	ARG1	thing	0.0.0.0	0.0.0.0.0	
# ::edge	draw-02	ARG2	prince	0.0.0.0	0.0.0.0.1	
# ::edge	forget-01	ARG0	i	0.0	0.0.0	
# ::edge	forget-01	ARG1	add-02	0.0	0.0.1	
# ::edge	it	op1	add-02	0.0.1.2	0.0.1	
# ::edge	prince	mod	little	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	thing	mod	extraordinary	0.0.0.0.0	0.0.0.0.0.0	
(c / contrast-01 
      :ARG2 (f / forget-01 
            :ARG0 (i3 / i 
                  :ARG0-of (d / draw-02 
                        :ARG1 (t / thing 
                              :mod (e / extraordinary)) 
                        :ARG2 (p / prince 
                              :mod (l2 / little)))) 
            :ARG1 (a / add-02 
                  :ARG0 (i2 / i) 
                  :ARG1 (l / leather) 
                  :op-of (i / it))))

# ::snt He will never have been able to fasten it on his sheep .
# ::tok He will never have been able to fasten it on his sheep .
# ::alignments 11-12|0.1.0 8-9|0.1 5-6|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:36.217
# ::node	0	possible	5-6
# ::node	0.0	he	0-1
# ::node	0.1	it	8-9
# ::node	0.1.0	sheep	11-12
# ::root	0	possible
# ::edge	it	topic	sheep	0.1	0.1.0	
# ::edge	possible	domain	he	0	0.0	
# ::edge	possible	domain	it	0	0.1	
(p / possible 
      :domain (h / he) 
      :domain (i / it 
            :topic (s / sheep)))

# ::snt So now I keep wondering : what is happening on his planet ?
# ::tok So now I keep wondering : what is happening on his planet ?
# ::alignments 11-12|0.1 8-9|0 4-5|0.0.0 2-3|0.0 1-2|0.0.0.1 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:36.253
# ::node	0	happen-01	8-9
# ::node	0.0	i	2-3
# ::node	0.0.0	wonder-01	4-5
# ::node	0.0.0.0	so	0-1
# ::node	0.0.0.1	now	1-2
# ::node	0.1	planet	11-12
# ::root	0	happen-01
# ::edge	happen-01	ARG1	i	0	0.0	
# ::edge	happen-01	location	planet	0	0.1	
# ::edge	so	op1	wonder-01	0.0.0.0	0.0.0	
# ::edge	wonder-01	ARG0	i	0.0.0	0.0	
# ::edge	wonder-01	time	now	0.0.0	0.0.0.1	
(h / happen-01 
      :ARG1 (i / i 
            :ARG0-of (w / wonder-01 
                  :op-of (s / so) 
                  :time (n / now))) 
      :location (p / planet))

# ::snt Perhaps the sheep has eaten the flower ...
# ::tok Perhaps the sheep has eaten the flower ...
# ::alignments 4-5|0 2-3|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:36.270
# ::node	0	eat-01	4-5
# ::node	0.0	sheep	2-3
# ::node	0.1	perhaps	0-1
# ::root	0	eat-01
# ::edge	eat-01	ARG0	sheep	0	0.0	
# ::edge	perhaps	time	eat-01	0.1	0	
(e / eat-01 
      :ARG0 (s / sheep) 
      :time-of (p / perhaps))

# ::snt At one time I say to myself : " Surely not !
# ::tok At one time I say to myself : " Surely not !
# ::alignments 9-10|0.0.0 4-5|0 3-4|0.0 2-3|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:36.293
# ::node	0	say-01	4-5
# ::node	0.0	i	3-4
# ::node	0.0.0	sure	9-10
# ::node	0.1	time	2-3
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	time	time	0	0.1	
# ::edge	sure	location	i	0.0.0	0.0	
(s2 / say-01 
      :ARG0 (i / i 
            :location-of (s / sure)) 
      :time (t / time))

# ::snt The little prince shuts his flower under her glass globe every night , and he watches over his sheep very carefully ... "
# ::tok The little prince shuts his flower under her glass globe every night , and he watches over his sheep very carefully ... "
# ::alignments 20-21|0.1.2 19-20|0.1.2.0 18-19|0.1.1.0 15-16|0.1 14-15|0.1.1 13-14|0 11-12|0.0 10-11|0.0.0 9-10|0.1.3 8-9|0.1.3.0 2-3|0.1.0 1-2|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:36.796
# ::node	0	and	13-14
# ::node	0.0	night	11-12
# ::node	0.0.0	every	10-11
# ::node	0.1	watch-01	15-16
# ::node	0.1.0	prince	2-3
# ::node	0.1.0.0	little	1-2
# ::node	0.1.1	he	14-15
# ::node	0.1.1.0	sheep	18-19
# ::node	0.1.2	careful	20-21
# ::node	0.1.2.0	very	19-20
# ::node	0.1.3	globe	9-10
# ::node	0.1.3.0	glass	8-9
# ::root	0	and
# ::edge	and	op1	night	0	0.0	
# ::edge	and	op2	watch-01	0	0.1	
# ::edge	careful	degree	very	0.1.2	0.1.2.0	
# ::edge	glass	consist	globe	0.1.3.0	0.1.3	
# ::edge	night	mod	every	0.0	0.0.0	
# ::edge	prince	mod	little	0.1.0	0.1.0.0	
# ::edge	sheep	poss	he	0.1.1.0	0.1.1	
# ::edge	watch-01	ARG0	prince	0.1	0.1.0	
# ::edge	watch-01	ARG1	he	0.1	0.1.1	
# ::edge	watch-01	manner	careful	0.1	0.1.2	
# ::edge	watch-01	prep-as	globe	0.1	0.1.3	
(a / and 
      :op1 (n / night 
            :mod (e / every)) 
      :op2 (w / watch-01 
            :ARG0 (p / prince 
                  :mod (l / little)) 
            :ARG1 (h / he 
                  :poss-of (s / sheep)) 
            :manner (c / careful 
                  :degree (v / very)) 
            :prep-as (g / globe 
                  :consist-of (g2 / glass))))

# ::snt Then I am happy .
# ::tok Then I am happy .
# ::alignments 3-4|0 1-2|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:36.809
# ::node	0	happy	3-4
# ::node	0.0	i	1-2
# ::node	0.1	then	0-1
# ::root	0	happy
# ::edge	happy	domain	i	0	0.0	
# ::edge	happy	time	then	0	0.1	
(h / happy 
      :domain (i / i) 
      :time (t / then))

# ::snt And there is sweetness in the laughter of all the stars .
# ::tok And there is sweetness in the laughter of all the stars .
# ::alignments 10-11|0.0.0 8-9|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:36.830
# ::node	0	and	0-1
# ::node	0.0	all	8-9
# ::node	0.0.0	star	10-11
# ::root	0	and
# ::edge	and	quant	all	0	0.0	
# ::edge	star	quant	all	0.0.0	0.0	
(a2 / and 
      :quant (a / all 
            :quant-of (s / star)))

# ::snt But at another time I say to myself : " At some moment or other one is absent - minded , and that is enough !
# ::tok But at another time I say to myself : " At some moment or other one is absent - minded , and that is enough !
# ::alignments 24-25|0.1.1 21-22|0.1 19-20|0.1.0 17-18|0.1.0.0 14-15|0.1.0.0.0.1 13-14|0.1.0.0.0 12-13|0.1.0.0.0.0 11-12|0.1.0.0.1 5-6|0 4-5|0.0 3-4|0.3 2-3|0.3.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:36.990
# ::node	0	say-01	5-6
# ::node	0.0	i	4-5
# ::node	0.1	and	21-22
# ::node	0.1.0	mind	19-20
# ::node	0.1.0.0	absent-01	17-18
# ::node	0.1.0.0.0	or	13-14
# ::node	0.1.0.0.0.0	moment	12-13
# ::node	0.1.0.0.0.1	other	14-15
# ::node	0.1.0.0.1	some	11-12
# ::node	0.1.1	enough	24-25
# ::node	0.2	contrast-01	0-1
# ::node	0.3	time	3-4
# ::node	0.3.0	another	2-3
# ::root	0	say-01
# ::edge	absent-01	ARG0	or	0.1.0.0	0.1.0.0.0	
# ::edge	absent-01	ARG1	some	0.1.0.0	0.1.0.0.1	
# ::edge	and	op1	mind	0.1	0.1.0	
# ::edge	and	op2	enough	0.1	0.1.1	
# ::edge	contrast-01	ARG2	say-01	0.2	0	
# ::edge	mind	manner	absent-01	0.1.0	0.1.0.0	
# ::edge	or	op1	moment	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	or	op2	other	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	and	0	0.1	
# ::edge	say-01	time	time	0	0.3	
# ::edge	time	mod	another	0.3	0.3.0	
(s2 / say-01 
      :ARG0 (i / i) 
      :ARG1 (a / and 
            :op1 (m / mind 
                  :manner (a2 / absent-01 
                        :ARG0 (o2 / or 
                              :op1 (m2 / moment) 
                              :op2 (o / other)) 
                        :ARG1 (s / some))) 
            :op2 (e / enough)) 
      :ARG2-of (c / contrast-01) 
      :time (t / time 
            :mod (a3 / another)))

# ::snt On some one evening he forgot the glass globe , or the sheep got out , without making any noise , in the night ... "
# ::tok On some one evening he forgot the glass globe , or the sheep got out , without making any noise , in the night ... "
# ::alignments 23-24|0.0.3 19-20|0.0.2.0 18-19|0.0.2.0.0 12-13|0.0.2 10-11|0 8-9|0.0.1 7-8|0.0.1.0 5-6|0.0 4-5|0.0.0 3-4|0.0.4 1-2|0.0.4.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:37.499
# ::node	0	or	10-11
# ::node	0.0	forget-01	5-6
# ::node	0.0.0	he	4-5
# ::node	0.0.1	globe	8-9
# ::node	0.0.1.0	glass	7-8
# ::node	0.0.2	sheep	12-13
# ::node	0.0.2.0	noise	19-20
# ::node	0.0.2.0.0	any	18-19
# ::node	0.0.3	night	23-24
# ::node	0.0.4	evening	3-4
# ::node	0.0.4.0	some	1-2
# ::root	0	or
# ::edge	evening	quant	some	0.0.4	0.0.4.0	
# ::edge	forget-01	ARG0	he	0.0	0.0.0	
# ::edge	forget-01	ARG1	globe	0.0	0.0.1	
# ::edge	forget-01	ARG2	sheep	0.0	0.0.2	
# ::edge	forget-01	location	night	0.0	0.0.3	
# ::edge	forget-01	time	evening	0.0	0.0.4	
# ::edge	glass	consist	globe	0.0.1.0	0.0.1	
# ::edge	noise	mod	any	0.0.2.0	0.0.2.0.0	
# ::edge	noise	poss	sheep	0.0.2.0	0.0.2	
# ::edge	or	op1	forget-01	0	0.0	
(o / or 
      :op1 (f / forget-01 
            :ARG0 (h / he) 
            :ARG1 (g / globe 
                  :consist-of (g2 / glass)) 
            :ARG2 (s / sheep 
                  :poss-of (n2 / noise 
                        :mod (a / any))) 
            :location (n / night) 
            :time (e / evening 
                  :quant (s2 / some))))

# ::snt And then the little bells are changed to tears ...
# ::tok And then the little bells are changed to tears ...
# ::alignments 8-9|0.0.1 6-7|0.0 4-5|0.0.0 3-4|0.0.0.0 1-2|0.0.2 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:37.544
# ::node	0	and	0-1
# ::node	0.0	change-01	6-7
# ::node	0.0.0	bell	4-5
# ::node	0.0.0.0	little	3-4
# ::node	0.0.1	tear	8-9
# ::node	0.0.2	then	1-2
# ::root	0	and
# ::edge	and	op1	change-01	0	0.0	
# ::edge	bell	mod	little	0.0.0	0.0.0.0	
# ::edge	change-01	ARG1	bell	0.0	0.0.0	
# ::edge	change-01	ARG2	tear	0.0	0.0.1	
# ::edge	change-01	time	then	0.0	0.0.2	
(a / and 
      :op1 (c / change-01 
            :ARG1 (b / bell 
                  :mod (l / little)) 
            :ARG2 (t / tear) 
            :time (t2 / then)))

# ::snt Here , then , is a great mystery .
# ::tok Here , then , is a great mystery .
# ::alignments 7-8|0 6-7|0.1 2-3|0.0.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:37.563
# ::node	0	mystery	7-8
# ::node	0.0	here	0-1
# ::node	0.0.0	then	2-3
# ::node	0.1	great	6-7
# ::root	0	mystery
# ::edge	here	mod	then	0.0	0.0.0	
# ::edge	mystery	location	here	0	0.0	
# ::edge	mystery	mod	great	0	0.1	
(m / mystery 
      :location (h / here 
            :mod (t / then)) 
      :mod (g / great))

# ::snt For you who also love the little prince , and for me , nothing in the universe can be the same if somewhere , we do not know where , a sheep that we never saw has - - yes or no ? -- eaten a rose ...
# ::tok For you who also love the little prince , and for me , nothing in the universe can be the same if somewhere , we do not know where , a sheep that we never saw has - - yes or no ? -- eaten a rose ...
# ::alignments 46-47|0.1.1.2.0 44-45|0.1.1.2.0.0 41-42|0.1.1.2.0.0.1 40-41|0.1.1.2.0.0.0 39-40|0.1.2 35-36|0.1.3 33-34|0.1.3.0 31-32|0.1.3.1 27-28|0.1 24-25|0.1.0 22-23|0.1.1.0 20-21|0.1.1 17-18|0.1.1.2 16-17|0.1.1.1.0 13-14|0.1.1.1 9-10|0 7-8|0.0.0 6-7|0.0.0.0 4-5|0.0 3-4|0.0.2 1-2|0.0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.180
# ::node	0	and	9-10
# ::node	0.0	love-01	4-5
# ::node	0.0.0	prince	7-8
# ::node	0.0.0.0	little	6-7
# ::node	0.0.1	you	1-2
# ::node	0.0.2	also	3-4
# ::node	0.1	know-01	27-28
# ::node	0.1.0	we	24-25
# ::node	0.1.1	same-41	20-21
# ::node	0.1.1.0	somewhere	22-23
# ::node	0.1.1.1	nothing	13-14
# ::node	0.1.1.1.0	universe	16-17
# ::node	0.1.1.2	possible	17-18
# ::node	0.1.1.2.0	rise-01	46-47
# ::node	0.1.1.2.0.0	eat-01	44-45
# ::node	0.1.1.2.0.0.0	or	40-41
# ::node	0.1.1.2.0.0.1	-	41-42
# ::node	0.1.2	yes	39-40
# ::node	0.1.3	see-01	35-36
# ::node	0.1.3.0	we	33-34
# ::node	0.1.3.1	sheep	31-32
# ::root	0	and
(a / and 
      :ARG0-of (l2 / love-01 
            :ARG1 (p2 / prince 
                  :mod (l / little)) 
            :ARG2 (y2 / you) 
            :mod (a2 / also)) 
      :ARG1-of (k / know-01 
            :ARG0 (w2 / we) 
            :condition-of (s4 / same-41 
                  :ARG0 (s3 / somewhere) 
                  :ARG1 (n / nothing 
                        :location (u / universe)) 
                  :domain-of (p / possible 
                        :domain (r / rise-01 
                              :ARG1 (e / eat-01 
                                    :ARG0 (o / or) 
                                    :ARG1 (- / -))))) 
            :domain-of (y / yes) 
            :time (s / see-01 
                  :ARG0 (w / we) 
                  :ARG1 (s2 / sheep))))

# ::snt Look up at the sky .
# ::tok Look up at the sky .
# ::alignments 4-5|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.191
# ::node	0	look-01	0-1
# ::node	0.0	sky	4-5
# ::root	0	look-01
# ::edge	look-01	ARG1	sky	0	0.0	
(l / look-01 
      :ARG1 (s / sky))

# ::snt Ask yourselves : is it yes or no ?
# ::tok Ask yourselves : is it yes or no ?
# ::alignments 7-8|0.1 6-7|0 5-6|0.2 4-5|0.2.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.215
# ::node	0	or	6-7
# ::node	0.0	ask-01	0-1
# ::node	0.1	-	7-8
# ::node	0.2	yes	5-6
# ::node	0.2.0	it	4-5
# ::root	0	or
(o / or 
      :ARG1-of (a / ask-01) 
      :mod-of (- / -) 
      :mod-of (y / yes 
            :mod (i / it)))

# ::snt Has the sheep eaten the flower ?
# ::tok Has the sheep eaten the flower ?
# ::alignments 3-4|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.226
# ::node	0	eat-01	3-4
# ::node	0.0	sheep	2-3
# ::root	0	eat-01
# ::edge	eat-01	ARG0	sheep	0	0.0	
(e / eat-01 
      :ARG0 (s / sheep))

# ::snt And you will see how everything changes ...
# ::tok And you will see how everything changes ...
# ::alignments 6-7|0.0.1 5-6|0.0.1.0 3-4|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.250
# ::node	0	and	0-1
# ::node	0.0	see-01	3-4
# ::node	0.0.0	you	1-2
# ::node	0.0.1	change-01	6-7
# ::node	0.0.1.0	everything	5-6
# ::root	0	and
# ::edge	and	op1	see-01	0	0.0	
# ::edge	change-01	ARG1	everything	0.0.1	0.0.1.0	
# ::edge	see-01	ARG0	you	0.0	0.0.0	
# ::edge	see-01	ARG1	change-01	0.0	0.0.1	
(a / and 
      :op1 (s / see-01 
            :ARG0 (y / you) 
            :ARG1 (c / change-01 
                  :ARG1 (e / everything))))

# ::snt And no grown - up will ever understand that this is a matter of so much importance !
# ::tok And no grown - up will ever understand that this is a matter of so much importance !
# ::alignments 16-17|0.1.0.1 15-16|0.1.0.1.0 14-15|0.1.0.1.0.0 12-13|0.1.0 9-10|0.1.0.0 7-8|0.1 6-7|0.1.1 2-3|0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.343
# ::node	0	and	0-1
# ::node	0.0	grow-03	2-3
# ::node	0.0.0	-	1-2
# ::node	0.1	understand-01	7-8
# ::node	0.1.0	matter	12-13
# ::node	0.1.0.0	this	9-10
# ::node	0.1.0.1	important	16-17
# ::node	0.1.0.1.0	much	15-16
# ::node	0.1.0.1.0.0	so	14-15
# ::node	0.1.1	ever	6-7
# ::root	0	and
# ::edge	and	op1	grow-03	0	0.0	
# ::edge	and	op2	understand-01	0	0.1	
# ::edge	grow-03	polarity	-	0.0	0.0.0	
# ::edge	important	poss	matter	0.1.0.1	0.1.0	
# ::edge	important	quant	much	0.1.0.1	0.1.0.1.0	
# ::edge	matter	domain	this	0.1.0	0.1.0.0	
# ::edge	much	degree	so	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	understand-01	ARG1	matter	0.1	0.1.0	
# ::edge	understand-01	mod	ever	0.1	0.1.1	
(a / and 
      :op1 (g / grow-03 
            :polarity (- / -)) 
      :op2 (u / understand-01 
            :ARG1 (m2 / matter 
                  :domain (t / this) 
                  :poss-of (i / important 
                        :quant (m / much 
                              :degree (s / so)))) 
            :mod (e / ever)))

# ::snt This is , to me , the loveliest and saddest landscape in the world .
# ::tok This is , to me , the loveliest and saddest landscape in the world .
# ::alignments 13-14|0.0 8-9|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.365
# ::node	0	and	8-9
# ::node	0.0	world	13-14
# ::node	0.1	this	0-1
# ::root	0	and
# ::edge	and	domain	this	0	0.1	
# ::edge	world	accompanier	and	0.0	0	
(a / and 
      :accompanier-of (w / world) 
      :domain (t / this))

# ::snt It is the same as that on the preceding page , but I have drawn it again to impress it on your memory .
# ::tok It is the same as that on the preceding page , but I have drawn it again to impress it on your memory .
# ::alignments 22-23|0.0 19-20|0.0.0 16-17|0.1.1.0.0.0 15-16|0.2 12-13|0.1.1.0.0 11-12|0 9-10|0.1.1 8-9|0.1.1.0 3-4|0.1 0-1|0.1.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.583
# ::node	0	contrast-01	11-12
# ::node	0.0	memory	22-23
# ::node	0.0.0	it	19-20
# ::node	0.1	same-41	3-4
# ::node	0.1.0	it	0-1
# ::node	0.1.1	page	9-10
# ::node	0.1.1.0	precede-01	8-9
# ::node	0.1.1.0.0	i	12-13
# ::node	0.1.1.0.0.0	again	16-17
# ::node	0.2	it	15-16
# ::root	0	contrast-01
# ::edge	again	domain	i	0.1.1.0.0.0	0.1.1.0.0	
# ::edge	contrast-01	ARG0	memory	0	0.0	
# ::edge	contrast-01	ARG1	same-41	0	0.1	
# ::edge	contrast-01	ARG2	it	0	0.2	
# ::edge	it	topic	memory	0.0.0	0.0	
# ::edge	precede-01	ARG0	i	0.1.1.0	0.1.1.0.0	
# ::edge	precede-01	ARG1	page	0.1.1.0	0.1.1	
# ::edge	same-41	ARG0	it	0.1	0.1.0	
# ::edge	same-41	ARG1	page	0.1	0.1.1	
(c / contrast-01 
      :ARG0 (m / memory 
            :topic-of (i / it)) 
      :ARG1 (s / same-41 
            :ARG0 (i4 / it) 
            :ARG1 (p / page 
                  :ARG1-of (p2 / precede-01 
                        :ARG0 (i3 / i 
                              :domain-of (a / again))))) 
      :ARG2 (i2 / it))

# ::snt It is here that the little prince appeared on Earth , and disappeared .
# ::tok It is here that the little prince appeared on Earth , and disappeared .
# ::alignments 12-13|0.1 11-12|0 9-10|0.0.1.0.0+0.0.1.0+0.0.1 7-8|0.0 6-7|0.1.0 5-6|0.1.0.0 2-3|0.1.1 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.644
# ::node	0	and	11-12
# ::node	0.0	appear-01	7-8
# ::node	0.0.0	it	0-1
# ::node	0.0.1	planet	9-10
# ::node	0.0.1.0	name	9-10
# ::node	0.0.1.0.0	"Earth"	9-10
# ::node	0.1	disappear-01	12-13
# ::node	0.1.0	prince	6-7
# ::node	0.1.0.0	little	5-6
# ::node	0.1.1	here	2-3
# ::root	0	and
# ::edge	and	op1	appear-01	0	0.0	
# ::edge	and	op2	disappear-01	0	0.1	
# ::edge	appear-01	ARG1	it	0.0	0.0.0	
# ::edge	appear-01	location	planet	0.0	0.0.1	
# ::edge	disappear-01	ARG0	prince	0.1	0.1.0	
# ::edge	disappear-01	ARG1	here	0.1	0.1.1	
# ::edge	name	op1	"Earth"	0.0.1.0	0.0.1.0.0	
# ::edge	planet	name	name	0.0.1	0.0.1.0	
# ::edge	prince	mod	little	0.1.0	0.1.0.0	
(a / and 
      :op1 (a2 / appear-01 
            :ARG1 (i / it) 
            :location (p / planet 
                  :name (n / name 
                        :op1 "Earth"))) 
      :op2 (d / disappear-01 
            :ARG0 (p2 / prince 
                  :mod (l / little)) 
            :ARG1 (h / here)))

# ::snt Look at it carefully so that you will be sure to recognise it in case you travel some day to the African desert .
# ::tok Look at it carefully so that you will be sure to recognise it in case you travel some day to the African desert .
# ::alignments 22-23|0.2.0.0 18-19|0.2.0.1 17-18|0.2.0.1.0 16-17|0.2.0 15-16|0.2 14-15|0.3 12-13|0.1 11-12|0 6-7|0.0 4-5|0.2.1.1.0 3-4|0.2.1.1 2-3|0.2.1.0 0-1|0.2.1 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:39.957
# ::node	0	recognize-02	11-12
# ::node	0.0	you	6-7
# ::node	0.1	it	12-13
# ::node	0.2	you	15-16
# ::node	0.2.0	travel-01	16-17
# ::node	0.2.0.0	desert	22-23
# ::node	0.2.0.1	day	18-19
# ::node	0.2.0.1.0	some	17-18
# ::node	0.2.1	look-01	0-1
# ::node	0.2.1.0	it	2-3
# ::node	0.2.1.1	careful	3-4
# ::node	0.2.1.1.0	so	4-5
# ::node	0.3	case	14-15
# ::root	0	recognize-02
# ::edge	careful	mod	so	0.2.1.1	0.2.1.1.0	
# ::edge	day	quant	some	0.2.0.1	0.2.0.1.0	
# ::edge	look-01	ARG0	you	0.2.1	0.2	
# ::edge	look-01	ARG1	it	0.2.1	0.2.1.0	
# ::edge	look-01	duration	careful	0.2.1	0.2.1.1	
# ::edge	recognize-02	ARG0	you	0	0.0	
# ::edge	recognize-02	ARG1	it	0	0.1	
# ::edge	recognize-02	ARG2	you	0	0.2	
# ::edge	recognize-02	time	case	0	0.3	
# ::edge	travel-01	ARG0	you	0.2.0	0.2	
# ::edge	travel-01	ARG1	desert	0.2.0	0.2.0.0	
# ::edge	travel-01	time	day	0.2.0	0.2.0.1	
(r / recognize-02 
      :ARG0 (y2 / you) 
      :ARG1 (i / it) 
      :ARG2 (y / you 
            :ARG0-of (t / travel-01 
                  :ARG1 (d / desert) 
                  :time (d2 / day 
                        :quant (s / some))) 
            :ARG0-of (l / look-01 
                  :ARG1 (i2 / it) 
                  :duration (c2 / careful 
                        :mod (s2 / so)))) 
      :time (c / case))

# ::snt And , if you should come upon this spot , please do not hurry on .
# ::tok And , if you should come upon this spot , please do not hurry on .
# ::alignments 10-11|0.1 8-9|0.0.0.0 7-8|0.0.0.0.0 4-5|0.0 3-4|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:40.007
# ::node	0	and	0-1
# ::node	0.0	recommend-01	4-5
# ::node	0.0.0	you	3-4
# ::node	0.0.0.0	spot	8-9
# ::node	0.0.0.0.0	this	7-8
# ::node	0.1	please-01	10-11
# ::root	0	and
# ::edge	and	op1	please-01	0	0.1	
# ::edge	recommend-01	ARG1	and	0.0	0	
# ::edge	recommend-01	ARG2	you	0.0	0.0.0	
# ::edge	spot	mod	this	0.0.0.0	0.0.0.0.0	
# ::edge	spot	poss	you	0.0.0.0	0.0.0	
(a / and 
      :ARG1-of (r / recommend-01 
            :ARG2 (y / you 
                  :poss-of (s / spot 
                        :mod (t / this)))) 
      :op1 (p / please-01))

# ::snt Wait for a time , exactly under the star .
# ::tok Wait for a time , exactly under the star .
# ::alignments 8-9|0.0 5-6|0.0.0 3-4|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:40.023
# ::node	0	time	3-4
# ::node	0.0	star	8-9
# ::node	0.0.0	exact	5-6
# ::root	0	time
# ::edge	exact	location	star	0.0.0	0.0	
# ::edge	time	compared-to	star	0	0.0	
(t / time 
      :compared-to (s / star 
            :location-of (e / exact)))

# ::snt Then , if a little man appears who laughs , who has golden hair and who refuses to answer questions , you will know who he is .
# ::tok Then , if a little man appears who laughs , who has golden hair and who refuses to answer questions , you will know who he is .
# ::alignments 25-26|0.2.0.0.0 23-24|0.1 21-22|0.1.0 19-20|0.0 18-19|0 16-17|0.2 14-15|0.2.0 13-14|0.2.0.1 12-13|0.2.0.1.0 6-7|0.2.0.0 5-6|0.2.0.0.1 4-5|0.2.0.0.1.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:41.266
# ::node	0	answer-01	18-19
# ::node	0.0	question-01	19-20
# ::node	0.0.0	then	0-1
# ::node	0.1	know-01	23-24
# ::node	0.1.0	you	21-22
# ::node	0.2	refuse-01	16-17
# ::node	0.2.0	and	14-15
# ::node	0.2.0.0	appear-02	6-7
# ::node	0.2.0.0.0	he	25-26
# ::node	0.2.0.0.1	man	5-6
# ::node	0.2.0.0.1.0	little	4-5
# ::node	0.2.0.1	hair	13-14
# ::node	0.2.0.1.0	gold	12-13
# ::root	0	answer-01
# ::edge	and	op1	appear-02	0.2.0	0.2.0.0	
# ::edge	and	op2	hair	0.2.0	0.2.0.1	
# ::edge	answer-01	ARG1	question-01	0	0.0	
# ::edge	appear-02	ARG0	he	0.2.0.0	0.2.0.0.0	
# ::edge	appear-02	ARG1	man	0.2.0.0	0.2.0.0.1	
# ::edge	hair	mod	gold	0.2.0.1	0.2.0.1.0	
# ::edge	know-01	ARG0	you	0.1	0.1.0	
# ::edge	know-01	ARG1	answer-01	0.1	0	
# ::edge	man	quant	little	0.2.0.0.1	0.2.0.0.1.0	
# ::edge	question-01	ARG1	then	0.0	0.0.0	
# ::edge	refuse-01	ARG0	and	0.2	0.2.0	
# ::edge	refuse-01	ARG1	answer-01	0.2	0	
(a / answer-01 
      :ARG1 (q / question-01 
            :ARG1 (t / then)) 
      :ARG1-of (k / know-01 
            :ARG0 (y / you)) 
      :ARG1-of (r / refuse-01 
            :ARG0 (a2 / and 
                  :op1 (a3 / appear-02 
                        :ARG0 (h / he) 
                        :ARG1 (m / man 
                              :quant (l / little))) 
                  :op2 (h2 / hair 
                        :mod (g / gold)))))

# ::snt If this should happen , please comfort me .
# ::tok If this should happen , please comfort me .
# ::alignments 6-7|0.1 5-6|0 3-4|0.2 2-3|0.2.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:41.290
# ::node	0	please-01	5-6
# ::node	0.0	this	1-2
# ::node	0.1	comfort-01	6-7
# ::node	0.2	happen-01	3-4
# ::node	0.2.0	recommend-01	2-3
# ::root	0	please-01
# ::edge	happen-01	ARG1	please-01	0.2	0	
# ::edge	please-01	ARG0	this	0	0.0	
# ::edge	please-01	ARG1	comfort-01	0	0.1	
# ::edge	recommend-01	ARG1	happen-01	0.2.0	0.2	
(p / please-01 
      :ARG0 (t / this) 
      :ARG1 (c / comfort-01) 
      :ARG1-of (h / happen-01 
            :ARG1-of (r / recommend-01)))

# ::snt Send me word that he has come back .
# ::tok Send me word that he has come back .
# ::alignments 7-8|0.0 4-5|0.1 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-05-12T14:23:41.307
# ::node	0	word	2-3
# ::node	0.0	back	7-8
# ::node	0.1	he	4-5
# ::root	0	word
# ::edge	back	op1	word	0.0	0	
# ::edge	word	poss	he	0	0.1	
(w / word 
      :op-of (b / back) 
      :poss (h / he))

