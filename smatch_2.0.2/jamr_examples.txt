# ::snt The girl made adjustments to the machine.
# ::tok The girl made adjustments to the machine .
# ::alignments 6-7|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:29.601
# ::node	0	adjust-01	3-4
# ::node	0.0	girl	1-2
# ::node	0.1	machine	6-7
# ::root	0	adjust-01
# ::edge	adjust-01	ARG0	girl	0	0.0	
# ::edge	adjust-01	ARG1	machine	0	0.1	
(a / adjust-01 
      :ARG0 (g / girl) 
      :ARG1 (m / machine))

# ::snt The girl adjusted the machine.
# ::tok The girl adjusted the machine .
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:29.740
# ::node	0	adjust-01	2-3
# ::node	0.0	girl	1-2
# ::node	0.1	machine	4-5
# ::root	0	adjust-01
# ::edge	adjust-01	ARG0	girl	0	0.0	
# ::edge	adjust-01	ARG1	machine	0	0.1	
(a / adjust-01 
      :ARG0 (g / girl) 
      :ARG1 (m / machine))

# ::snt The machine was adjusted by the girl.
# ::tok The machine was adjusted by the girl .
# ::alignments 6-7|0.0 3-4|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:29.939
# ::node	0	adjust-01	3-4
# ::node	0.0	girl	6-7
# ::node	0.1	machine	1-2
# ::root	0	adjust-01
# ::edge	adjust-01	ARG0	girl	0	0.0	
# ::edge	adjust-01	ARG1	machine	0	0.1	
(a / adjust-01 
      :ARG0 (g / girl) 
      :ARG1 (m / machine))

# ::snt The killing happened yesterday.
# ::tok The killing happened yesterday .
# ::alignments 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.003
# ::node	0	kill-01	1-2
# ::node	0.0	yesterday	3-4
# ::root	0	kill-01
# ::edge	kill-01	time	yesterday	0	0.0	
(k / kill-01 
      :time (y / yesterday))

# ::snt The killing took place yesterday.
# ::tok The killing took place yesterday .
# ::alignments 4-5|0.1 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.105
# ::node	0	kill-01	1-2
# ::node	0.0	place	3-4
# ::node	0.1	yesterday	4-5
# ::root	0	kill-01
# ::edge	kill-01	ARG1	place	0	0.0	
# ::edge	kill-01	time	yesterday	0	0.1	
(k / kill-01 
      :ARG1 (p / place) 
      :time (y / yesterday))

# ::snt the boy and the girl
# ::tok the boy and the girl
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.191
# ::node	0	and	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	girl	4-5
# ::root	0	and
# ::edge	and	op1	boy	0	0.0	
# ::edge	and	op2	girl	0	0.1	
(a / and 
      :op1 (b / boy) 
      :op2 (g / girl))

# ::snt both the boy and the girl
# ::tok both the boy and the girl
# ::alignments 5-6|0.1 3-4|0 2-3|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.315
# ::node	0	and	3-4
# ::node	0.0	boy	2-3
# ::node	0.0.0	both	0-1
# ::node	0.1	girl	5-6
# ::root	0	and
# ::edge	and	op1	boy	0	0.0	
# ::edge	and	op2	girl	0	0.1	
# ::edge	boy	mod	both	0.0	0.0.0	
(a / and 
      :op1 (b / boy 
            :mod (b2 / both)) 
      :op2 (g / girl))

# ::snt his boat
# ::tok his boat
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.334
# ::node	0	boat	1-2
# ::root	0	boat
(b / boat)

# ::snt his own boat
# ::tok his own boat
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.374
# ::node	0	boat	2-3
# ::node	0.0	own-01	1-2
# ::root	0	boat
(b / boat 
      :ARG1-of (o / own-01))

# ::snt The boy must not go.
# ::tok The boy must not go .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.412
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt It is obligatory that the boy not go.
# ::tok It is obligatory that the boy not go .
# ::alignments 5-6|0 3-4|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.499
# ::node	0	boy	5-6
# ::node	0.0	that	3-4
# ::node	0.0.0	it	0-1
# ::root	0	boy
(b / boy 
      :op-of (t / that 
            :domain (i / it)))

# ::snt The boy may not go.
# ::tok The boy may not go .
# ::alignments 2-3|0.0+0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.588
# ::node	0	date-entity	2-3
# ::node	0.0	5	2-3
# ::node	0.1	boy	1-2
# ::root	0	date-entity
# ::edge	date-entity	month	5	0	0.0	
# ::edge	date-entity	op1	boy	0	0.1	
(d / date-entity 
      :month 5 
      :op1 (b / boy))

# ::snt The boy is not permitted to go.
# ::tok The boy is not permitted to go .
# ::alignments 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.643
# ::node	0	permit-01	4-5
# ::node	0.0	boy	1-2
# ::root	0	permit-01
# ::edge	permit-01	ARG1	boy	0	0.0	
(p / permit-01 
      :ARG1 (b / boy))

# ::snt It is not permissible for the boy to go.
# ::tok It is not permissible for the boy to go .
# ::alignments 6-7|0.1 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.768
# ::node	0	permit-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	boy	6-7
# ::root	0	permit-01
# ::edge	permit-01	ARG0	it	0	0.0	
# ::edge	permit-01	ARG2	boy	0	0.1	
(p / permit-01 
      :ARG0 (i / it) 
      :ARG2 (b / boy))

# ::snt The boy does not have permission to go.
# ::tok The boy does not have permission to go .
# ::alignments 5-6|0 2-3|0.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.850
# ::node	0	permit-01	5-6
# ::node	0.0	do-02	2-3
# ::node	0.1	boy	1-2
# ::root	0	permit-01
# ::edge	do-02	ARG0	permit-01	0.0	0	
# ::edge	permit-01	ARG1	boy	0	0.1	
(p / permit-01 
      :ARG0-of (d / do-02) 
      :ARG1 (b / boy))

# ::snt The marble is white.
# ::tok The marble is white .
# ::alignments 3-4|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.868
# ::node	0	white	3-4
# ::root	0	white
(w / white)

# ::snt the whiteness of the marble
# ::tok the whiteness of the marble
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.893
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt the white marble
# ::tok the white marble
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.908
# ::node	0	white	1-2
# ::root	0	white
(w / white)

# ::snt the marble that is white
# ::tok the marble that is white
# ::alignments 4-5|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:30.942
# ::node	0	white	4-5
# ::node	0.0	that	2-3
# ::root	0	white
# ::edge	white	mod	that	0	0.0	
(w / white 
      :mod (t / that))

# ::snt The boy sees that the marble is white.
# ::tok The boy sees that the marble is white .
# ::alignments 7-8|0.0.0 3-4|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:31.253
# ::node	0	see-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.0.0	white	7-8
# ::node	0.1	that	3-4
# ::root	0	see-01
# ::edge	see-01	ARG0	boy	0	0.0	
# ::edge	see-01	ARG1	that	0	0.1	
# ::edge	white	domain	boy	0.0.0	0.0	
(s / see-01 
      :ARG0 (b / boy 
            :domain-of (w / white)) 
      :ARG1 (t / that))

# ::snt The boy sees the whiteness of the marble.
# ::tok The boy sees the whiteness of the marble .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:31.295
# ::node	0	see-01	2-3
# ::node	0.0	boy	1-2
# ::root	0	see-01
# ::edge	see-01	ARG0	boy	0	0.0	
(s / see-01 
      :ARG0 (b / boy))

# ::snt The boy sees the white marble.
# ::tok The boy sees the white marble .
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:31.351
# ::node	0	see-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	white	4-5
# ::root	0	see-01
# ::edge	see-01	ARG0	boy	0	0.0	
# ::edge	see-01	ARG1	white	0	0.1	
(s / see-01 
      :ARG0 (b / boy) 
      :ARG1 (w / white))

# ::snt The boy sees the marble that is white.
# ::tok The boy sees the marble that is white .
# ::alignments 7-8|0.1 5-6|0.1.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:31.435
# ::node	0	see-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	white	7-8
# ::node	0.1.0	that	5-6
# ::root	0	see-01
# ::edge	see-01	ARG0	boy	0	0.0	
# ::edge	see-01	ARG1	white	0	0.1	
# ::edge	white	mod	that	0.1	0.1.0	
(s / see-01 
      :ARG0 (b / boy) 
      :ARG1 (w / white 
            :mod (t / that)))

# ::snt The boy saw the girl who wanted him.
# ::tok The boy saw the girl who wanted him .
# ::alignments 6-7|0.0.0 4-5|0.0.0.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:31.510
# ::node	0	see-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.0.0	want-01	6-7
# ::node	0.0.0.0	girl	4-5
# ::root	0	see-01
# ::edge	see-01	ARG0	boy	0	0.0	
# ::edge	want-01	ARG0	girl	0.0.0	0.0.0.0	
# ::edge	want-01	ARG1	boy	0.0.0	0.0	
(s / see-01 
      :ARG0 (b / boy 
            :ARG1-of (w / want-01 
                  :ARG0 (g / girl))))

# ::snt The boy saw the girl who he was wanted by.
# ::tok The boy saw the girl who he was wanted by .
# ::alignments 8-9|0.0.0 6-7|0.0.0.0 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:31.613
# ::node	0	see-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.0.0	want-01	8-9
# ::node	0.0.0.0	he	6-7
# ::node	0.1	girl	4-5
# ::root	0	see-01
# ::edge	see-01	ARG0	boy	0	0.0	
# ::edge	see-01	ARG1	girl	0	0.1	
# ::edge	want-01	ARG0	he	0.0.0	0.0.0.0	
# ::edge	want-01	ARG1	boy	0.0.0	0.0	
(s / see-01 
      :ARG0 (b / boy 
            :ARG1-of (w / want-01 
                  :ARG0 (h / he))) 
      :ARG1 (g / girl))

# ::snt The girl who wanted the boy was seen by him.
# ::tok The girl who wanted the boy was seen by him .
# ::alignments 7-8|0 5-6|0.0.0.0 3-4|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:31.688
# ::node	0	see-01	7-8
# ::node	0.0	girl	1-2
# ::node	0.0.0	want-01	3-4
# ::node	0.0.0.0	boy	5-6
# ::root	0	see-01
# ::edge	see-01	ARG1	girl	0	0.0	
# ::edge	want-01	ARG0	girl	0.0.0	0.0	
# ::edge	want-01	ARG1	boy	0.0.0	0.0.0.0	
(s / see-01 
      :ARG1 (g / girl 
            :ARG0-of (w / want-01 
                  :ARG1 (b / boy))))

# ::snt The girl who was seen by the boy wants him.
# ::tok The girl who was seen by the boy wants him .
# ::alignments 8-9|0 7-8|0.1 4-5|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:31.762
# ::node	0	want-01	8-9
# ::node	0.0	girl	1-2
# ::node	0.0.0	see-01	4-5
# ::node	0.1	boy	7-8
# ::root	0	want-01
# ::edge	see-01	ARG1	girl	0.0.0	0.0	
# ::edge	want-01	ARG0	girl	0	0.0	
# ::edge	want-01	ARG1	boy	0	0.1	
(w / want-01 
      :ARG0 (g / girl 
            :ARG1-of (s / see-01)) 
      :ARG1 (b / boy))

# ::snt The boy is wanted by the girl he saw.
# ::tok The boy is wanted by the girl he saw .
# ::alignments 8-9|0.0.0 7-8|0.0.0.0 6-7|0.0 3-4|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.158
# ::node	0	want-01	3-4
# ::node	0.0	girl	6-7
# ::node	0.0.0	see-01	8-9
# ::node	0.0.0.0	he	7-8
# ::node	0.1	boy	1-2
# ::root	0	want-01
# ::edge	see-01	ARG0	he	0.0.0	0.0.0.0	
# ::edge	see-01	ARG1	girl	0.0.0	0.0	
# ::edge	want-01	ARG0	girl	0	0.0	
# ::edge	want-01	ARG1	boy	0	0.1	
(w / want-01 
      :ARG0 (g / girl 
            :ARG1-of (s / see-01 
                  :ARG0 (h / he))) 
      :ARG1 (b / boy))

# ::snt The regulatory documents were changed.
# ::tok The regulatory documents were changed .
# ::alignments 4-5|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.198
# ::node	0	change-01	4-5
# ::node	0.0	document	2-3
# ::node	0.0.0	regulate-01	1-2
# ::root	0	change-01
# ::edge	change-01	ARG1	document	0	0.0	
# ::edge	regulate-01	ARG0	document	0.0.0	0.0	
(c / change-01 
      :ARG1 (d / document 
            :ARG0-of (r / regulate-01)))

# ::snt The boy wants to believe.
# ::tok The boy wants to believe .
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.238
# ::node	0	want-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	believe-01	4-5
# ::root	0	want-01
# ::edge	want-01	ARG0	boy	0	0.0	
# ::edge	want-01	ARG1	believe-01	0	0.1	
(w / want-01 
      :ARG0 (b2 / boy) 
      :ARG1 (b / believe-01))

# ::snt The boy believes.
# ::tok The boy believes .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.259
# ::node	0	believe-01	2-3
# ::node	0.0	boy	1-2
# ::root	0	believe-01
# ::edge	believe-01	ARG0	boy	0	0.0	
(b / believe-01 
      :ARG0 (b2 / boy))

# ::snt He described the mission as a failure.
# ::tok He described the mission as a failure .
# ::alignments 6-7|0.2 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.320
# ::node	0	describe-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	mission	3-4
# ::node	0.2	fail-01	6-7
# ::root	0	describe-01
# ::edge	describe-01	ARG0	he	0	0.0	
# ::edge	describe-01	ARG1	mission	0	0.1	
# ::edge	describe-01	ARG2	fail-01	0	0.2	
(d / describe-01 
      :ARG0 (h / he) 
      :ARG1 (m / mission) 
      :ARG2 (f / fail-01))

# ::snt As he described it, the mission was a failure.
# ::tok As he described it , the mission was a failure .
# ::alignments 9-10|0 6-7|0.0 3-4|0.1.1 2-3|0.1 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.407
# ::node	0	fail-01	9-10
# ::node	0.0	mission	6-7
# ::node	0.1	describe-01	2-3
# ::node	0.1.0	he	1-2
# ::node	0.1.1	it	3-4
# ::root	0	fail-01
# ::edge	describe-01	ARG0	he	0.1	0.1.0	
# ::edge	describe-01	ARG1	it	0.1	0.1.1	
# ::edge	fail-01	ARG1	mission	0	0.0	
# ::edge	fail-01	condition	describe-01	0	0.1	
(f / fail-01 
      :ARG1 (m / mission) 
      :condition (d / describe-01 
            :ARG0 (h / he) 
            :ARG1 (i / it)))

# ::snt His description of the mission: failure.
# ::tok His description of the mission : failure .
# ::alignments 6-7|0.0.0 4-5|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.449
# ::node	0	description	1-2
# ::node	0.0	mission	4-5
# ::node	0.0.0	fail-01	6-7
# ::root	0	description
# ::edge	description	prep-in	mission	0	0.0	
# ::edge	fail-01	ARG0	mission	0.0.0	0.0	
(d / description 
      :prep-in (m / mission 
            :ARG0-of (f / fail-01)))

# ::snt the band experienced a comeback
# ::tok the band experienced a comeback
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.486
# ::node	0	experience-01	2-3
# ::node	0.0	band	1-2
# ::node	0.1	comeback	4-5
# ::root	0	experience-01
# ::edge	experience-01	ARG0	band	0	0.0	
# ::edge	experience-01	ARG1	comeback	0	0.1	
(e / experience-01 
      :ARG0 (b / band) 
      :ARG1 (c / comeback))

# ::snt The boy can go.
# ::tok The boy can go .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.511
# ::node	0	possible-01	2-3
# ::node	0.0	boy	1-2
# ::root	0	possible-01
# ::edge	possible-01	ARG1	boy	0	0.0	
(p / possible-01 
      :ARG1 (b / boy))

# ::snt It is possible that the boy goes.
# ::tok It is possible that the boy goes .
# ::alignments 5-6|0.1.0 3-4|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.641
# ::node	0	possible-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	that	3-4
# ::node	0.1.0	boy	5-6
# ::root	0	possible-01
# ::edge	possible-01	ARG1	it	0	0.0	
# ::edge	that	op1	boy	0.1	0.1.0	
# ::edge	that	purpose	possible-01	0.1	0	
(p / possible-01 
      :ARG1 (i / it) 
      :purpose-of (t / that 
            :op1 (b / boy)))

# ::snt The boy must go.
# ::tok The boy must go .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.657
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt The boy is obligated to go.
# ::tok The boy is obligated to go .
# ::alignments 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.684
# ::node	0	obligate-01	3-4
# ::node	0.0	boy	1-2
# ::root	0	obligate-01
# ::edge	obligate-01	ARG1	boy	0	0.0	
(o / obligate-01 
      :ARG1 (b / boy))

# ::snt It is obligatory that the boy go.
# ::tok It is obligatory that the boy go .
# ::alignments 5-6|0 3-4|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.723
# ::node	0	boy	5-6
# ::node	0.0	that	3-4
# ::node	0.0.0	it	0-1
# ::root	0	boy
(b / boy 
      :op-of (t / that 
            :domain (i / it)))

# ::snt The boy may go.
# ::tok The boy may go .
# ::alignments 2-3|0.0+0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.759
# ::node	0	date-entity	2-3
# ::node	0.0	5	2-3
# ::node	0.1	boy	1-2
# ::root	0	date-entity
# ::edge	date-entity	month	5	0	0.0	
# ::edge	date-entity	op1	boy	0	0.1	
(d / date-entity 
      :month 5 
      :op1 (b / boy))

# ::snt The boy is permitted to go.
# ::tok The boy is permitted to go .
# ::alignments 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.785
# ::node	0	permit-01	3-4
# ::node	0.0	boy	1-2
# ::root	0	permit-01
# ::edge	permit-01	ARG1	boy	0	0.0	
(p / permit-01 
      :ARG1 (b / boy))

# ::snt It is permissible that the boy go.
# ::tok It is permissible that the boy go .
# ::alignments 5-6|0.1 3-4|0.1.0 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.867
# ::node	0	permit-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	boy	5-6
# ::node	0.1.0	that	3-4
# ::root	0	permit-01
# ::edge	permit-01	ARG0	it	0	0.0	
# ::edge	permit-01	ARG1	boy	0	0.1	
# ::edge	that	op1	boy	0.1.0	0.1	
(p / permit-01 
      :ARG0 (i / it) 
      :ARG1 (b / boy 
            :op-of (t / that)))

# ::snt It may rain.
# ::tok It may rain .
# ::alignments 2-3|0 1-2|0.1.0+0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.911
# ::node	0	rain-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	date-entity	1-2
# ::node	0.1.0	5	1-2
# ::root	0	rain-01
# ::edge	date-entity	month	5	0.1	0.1.0	
# ::edge	rain-01	ARG0	it	0	0.0	
# ::edge	rain-01	ARG1	date-entity	0	0.1	
(r / rain-01 
      :ARG0 (i / it) 
      :ARG1 (d / date-entity 
            :month 5))

# ::snt It might rain.
# ::tok It might rain .
# ::alignments 2-3|0.0 1-2|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.939
# ::node	0	might	1-2
# ::node	0.0	rain-01	2-3
# ::node	0.0.0	it	0-1
# ::root	0	might
(m / might 
      :ARG1-of (r / rain-01 
            :ARG0 (i / it)))

# ::snt Rain is possible.
# ::tok Rain is possible .
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:32.949
# ::node	0	possible-01	2-3
# ::root	0	possible-01
(p / possible-01)

# ::snt It’s possible that it will rain.
# ::tok It 's possible that it will rain .
# ::alignments 6-7|0.1 4-5|0.1.0 3-4|0.2 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.544
# ::node	0	possible-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	rain-01	6-7
# ::node	0.1.0	it	4-5
# ::node	0.2	that	3-4
# ::root	0	possible-01
# ::edge	possible-01	ARG1	it	0	0.0	
# ::edge	possible-01	mod	that	0	0.2	
# ::edge	rain-01	ARG0	it	0.1	0.1.0	
# ::edge	rain-01	ARG1	possible-01	0.1	0	
(p / possible-01 
      :ARG1 (i2 / it) 
      :ARG1-of (r / rain-01 
            :ARG0 (i / it)) 
      :mod (t / that))

# ::snt The boy should go.
# ::tok The boy should go .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.565
# ::node	0	recommend-01	2-3
# ::node	0.0	boy	1-2
# ::root	0	recommend-01
# ::edge	recommend-01	ARG1	boy	0	0.0	
(r / recommend-01 
      :ARG1 (b / boy))

# ::snt It is recommended that the boy go.
# ::tok It is recommended that the boy go .
# ::alignments 5-6|0.0 3-4|0.2 2-3|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.722
# ::node	0	recommend-01	2-3
# ::node	0.0	boy	5-6
# ::node	0.1	it	0-1
# ::node	0.2	that	3-4
# ::root	0	recommend-01
# ::edge	recommend-01	ARG0	boy	0	0.0	
# ::edge	recommend-01	ARG1	it	0	0.1	
# ::edge	recommend-01	time	that	0	0.2	
(r / recommend-01 
      :ARG0 (b / boy) 
      :ARG1 (i / it) 
      :time (t / that))

# ::snt The boy is likely to go.
# ::tok The boy is likely to go .
# ::alignments 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.745
# ::node	0	likely-01	3-4
# ::node	0.0	boy	1-2
# ::root	0	likely-01
# ::edge	likely-01	ARG1	boy	0	0.0	
(l / likely-01 
      :ARG1 (b / boy))

# ::snt It is likely that the boy will go.
# ::tok It is likely that the boy will go .
# ::alignments 5-6|0.1.0 3-4|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.814
# ::node	0	likely-01	2-3
# ::node	0.0	it	0-1
# ::node	0.1	that	3-4
# ::node	0.1.0	boy	5-6
# ::root	0	likely-01
# ::edge	likely-01	ARG1	it	0	0.0	
# ::edge	that	op1	boy	0.1	0.1.0	
# ::edge	that	purpose	likely-01	0.1	0	
(l / likely-01 
      :ARG1 (i / it) 
      :purpose-of (t / that 
            :op1 (b / boy)))

# ::snt The boy would rather go.
# ::tok The boy would rather go .
# ::alignments 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.833
# ::node	0	boy	1-2
# ::node	0.0	rather	3-4
# ::root	0	boy
(b / boy 
      :poss-of (r / rather))

# ::snt The boy prefers to go.
# ::tok The boy prefers to go .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.852
# ::node	0	prefer-01	2-3
# ::node	0.0	boy	1-2
# ::root	0	prefer-01
# ::edge	prefer-01	ARG0	boy	0	0.0	
(p / prefer-01 
      :ARG0 (b / boy))

# ::snt I am used to working.
# ::tok I am used to working .
# ::alignments 4-5|0.0.0 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.877
# ::node	0	use-01	2-3
# ::node	0.0	i	0-1
# ::node	0.0.0	work-01	4-5
# ::root	0	use-01
# ::edge	use-01	ARG1	i	0	0.0	
# ::edge	work-01	ARG0	i	0.0.0	0.0	
(u / use-01 
      :ARG1 (i / i 
            :ARG0-of (w / work-01)))

# ::snt The boy doesn’t go.
# ::tok The boy does n't go .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.894
# ::node	0	do-02	2-3
# ::node	0.0	boy	1-2
# ::root	0	do-02
# ::edge	do-02	ARG1	boy	0	0.0	
(d / do-02 
      :ARG1 (b / boy))

# ::snt The boy can’t go.
# ::tok The boy ca n't go .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:34.906
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt It’s not possible for the boy to go.
# ::tok It 's not possible for the boy to go .
# ::alignments 6-7|0.1 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:35.483
# ::node	0	possible-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	boy	6-7
# ::root	0	possible-01
# ::edge	possible-01	ARG1	it	0	0.0	
# ::edge	possible-01	accompanier	boy	0	0.1	
(p / possible-01 
      :ARG1 (i / it) 
      :accompanier (b / boy))

# ::snt It is possible for the boy not to go.
# ::tok It is possible for the boy not to go .
# ::alignments 5-6|0.0 2-3|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:35.541
# ::node	0	possible-01	2-3
# ::node	0.0	boy	5-6
# ::node	0.1	it	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG0	boy	0	0.0	
# ::edge	possible-01	ARG1	it	0	0.1	
(p / possible-01 
      :ARG0 (b / boy) 
      :ARG1 (i / it))

# ::snt It is possible for the boy to not go.
# ::tok It is possible for the boy to not go .
# ::alignments 5-6|0.0 2-3|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:35.599
# ::node	0	possible-01	2-3
# ::node	0.0	boy	5-6
# ::node	0.1	it	0-1
# ::root	0	possible-01
# ::edge	possible-01	ARG0	boy	0	0.0	
# ::edge	possible-01	ARG1	it	0	0.1	
(p / possible-01 
      :ARG0 (b / boy) 
      :ARG1 (i / it))

# ::snt The boy doesn’t have to go.
# ::tok The boy does n't have to go .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:35.621
# ::node	0	do-02	2-3
# ::node	0.0	boy	1-2
# ::root	0	do-02
# ::edge	do-02	ARG1	boy	0	0.0	
(d / do-02 
      :ARG1 (b / boy))

# ::snt It’s not necessary for the boy to go.
# ::tok It 's not necessary for the boy to go .
# ::alignments 6-7|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:35.640
# ::node	0	boy	6-7
# ::node	0.0	it	0-1
# ::root	0	boy
# ::edge	boy	domain	it	0	0.0	
(b / boy 
      :domain (i / it))

# ::snt The boy must not go.
# ::tok The boy must not go .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:35.653
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt It’s obligatory that the boy not go.
# ::tok It 's obligatory that the boy not go .
# ::alignments 5-6|0 3-4|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:35.676
# ::node	0	boy	5-6
# ::node	0.0	that	3-4
# ::node	0.0.0	it	0-1
# ::root	0	boy
# ::edge	boy	mod	that	0	0.0	
# ::edge	that	domain	it	0.0	0.0.0	
(b / boy 
      :mod (t / that 
            :domain (i / it)))

# ::snt The boy thinks his team won’t win.
# ::tok The boy thinks his team wo n't win .
# ::alignments 7-8|0.1.0 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:37.187
# ::node	0	think-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	team	4-5
# ::node	0.1.0	win-01	7-8
# ::root	0	think-01
# ::edge	think-01	ARG0	boy	0	0.0	
# ::edge	think-01	ARG1	team	0	0.1	
# ::edge	win-01	ARG1	team	0.1.0	0.1	
(t2 / think-01 
      :ARG0 (b / boy) 
      :ARG1 (t / team 
            :ARG1-of (w / win-01)))

# ::snt The boy doesn’t think his team will win.  (colloquially, ambiguously)
# ::tok The boy does n't think his team will win . ( colloquially , ambiguously )
# ::alignments 8-9|0.0 6-7|0.0.1 4-5|0 2-3|0.0.2 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:38.339
# ::node	0	think-01	4-5
# ::node	0.0	win-01	8-9
# ::node	0.0.0	boy	1-2
# ::node	0.0.1	team	6-7
# ::node	0.0.2	do-02	2-3
# ::root	0	think-01
# ::edge	do-02	ARG1	win-01	0.0.2	0.0	
# ::edge	think-01	ARG1	win-01	0	0.0	
# ::edge	win-01	ARG0	boy	0.0	0.0.0	
# ::edge	win-01	ARG1	team	0.0	0.0.1	
(t2 / think-01 
      :ARG1 (w / win-01 
            :ARG0 (b / boy) 
            :ARG1 (t / team) 
            :ARG1-of (d / do-02)))

# ::snt It’s not true that the boy thinks his team will win.
# ::tok It 's not true that the boy thinks his team will win .
# ::alignments 11-12|0.0.0 9-10|0.1 7-8|0 6-7|0.0 4-5|0.2.1 3-4|0.2 0-1|0.2.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:39.023
# ::node	0	think-01	7-8
# ::node	0.0	boy	6-7
# ::node	0.0.0	win-01	11-12
# ::node	0.1	team	9-10
# ::node	0.2	true	3-4
# ::node	0.2.0	it	0-1
# ::node	0.2.1	that	4-5
# ::root	0	think-01
# ::edge	think-01	ARG0	boy	0	0.0	
# ::edge	think-01	ARG1	team	0	0.1	
# ::edge	true	domain	it	0.2	0.2.0	
# ::edge	true	domain	think-01	0.2	0	
# ::edge	true	mod	that	0.2	0.2.1	
# ::edge	win-01	ARG0	boy	0.0.0	0.0	
(t2 / think-01 
      :ARG0 (b / boy 
            :ARG0-of (w / win-01)) 
      :ARG1 (t / team) 
      :domain-of (t4 / true 
            :domain (i / it) 
            :mod (t3 / that)))

# ::snt The boy doesn’t think his team will win.  (colloquially, ambiguously)
# ::tok The boy does n't think his team will win . ( colloquially , ambiguously )
# ::alignments 8-9|0.0 6-7|0.0.1 4-5|0 2-3|0.0.2 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.024
# ::node	0	think-01	4-5
# ::node	0.0	win-01	8-9
# ::node	0.0.0	boy	1-2
# ::node	0.0.1	team	6-7
# ::node	0.0.2	do-02	2-3
# ::root	0	think-01
# ::edge	do-02	ARG1	win-01	0.0.2	0.0	
# ::edge	think-01	ARG1	win-01	0	0.0	
# ::edge	win-01	ARG0	boy	0.0	0.0.0	
# ::edge	win-01	ARG1	team	0.0	0.0.1	
(t2 / think-01 
      :ARG1 (w / win-01 
            :ARG0 (b / boy) 
            :ARG1 (t / team) 
            :ARG1-of (d / do-02)))

# ::snt I don’t have any money.
# ::tok I do n't have any money .
# ::alignments 5-6|0.1 4-5|0.1.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.163
# ::node	0	do-02	1-2
# ::node	0.0	i	0-1
# ::node	0.1	money	5-6
# ::node	0.1.0	any	4-5
# ::root	0	do-02
# ::edge	do-02	ARG0	i	0	0.0	
# ::edge	do-02	ARG1	money	0	0.1	
# ::edge	money	mod	any	0.1	0.1.0	
(d / do-02 
      :ARG0 (i / i) 
      :ARG1 (m / money 
            :mod (a / any)))

# ::snt I have no money.
# ::tok I have no money .
# ::alignments 3-4|0 2-3|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.183
# ::node	0	money	3-4
# ::node	0.0	i	0-1
# ::node	0.1	-	2-3
# ::root	0	money
# ::edge	money	ARG0	i	0	0.0	
# ::edge	money	polarity	-	0	0.1	
(m / money 
      :ARG0 (i / i) 
      :polarity (- / -))

# ::snt the dress is inappropriate
# ::tok the dress is inappropriate
# ::alignments 3-4|0.1+0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.196
# ::node	0	appropriate-02	3-4
# ::node	0.0	dress	1-2
# ::node	0.1	-	3-4
# ::root	0	appropriate-02
# ::edge	appropriate-02	ARG1	dress	0	0.0	
# ::edge	appropriate-02	polarity	-	0	0.1	
(a / appropriate-02 
      :ARG1 (d / dress) 
      :polarity -)

# ::snt the dress is not appropriate
# ::tok the dress is not appropriate
# ::alignments 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.207
# ::node	0	appropriate-02	4-5
# ::node	0.0	dress	1-2
# ::root	0	appropriate-02
# ::edge	appropriate-02	ARG1	dress	0	0.0	
(a / appropriate-02 
      :ARG1 (d / dress))

# ::snt the inappropriate dress
# ::tok the inappropriate dress
# ::alignments 2-3|0 1-2|0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.218
# ::node	0	dress	2-3
# ::node	0.0	appropriate-02	1-2
# ::node	0.0.0	-	1-2
# ::root	0	dress
(d / dress 
      :ARG1-of (a / appropriate-02 
            :polarity -))

# ::snt the dress that is inappropriate
# ::tok the dress that is inappropriate
# ::alignments 4-5|0.0.1+0.0 2-3|0.0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.291
# ::node	0	dress	1-2
# ::node	0.0	appropriate-02	4-5
# ::node	0.0.0	that	2-3
# ::node	0.0.1	-	4-5
# ::root	0	dress
(d / dress 
      :ARG0-of (a / appropriate-02 
            :ARG1 (t / that) 
            :polarity -))

# ::snt the dress that is not appropriate
# ::tok the dress that is not appropriate
# ::alignments 5-6|0.0 2-3|0.0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.307
# ::node	0	dress	1-2
# ::node	0.0	appropriate-02	5-6
# ::node	0.0.0	that	2-3
# ::root	0	dress
# ::edge	appropriate-02	ARG1	that	0.0	0.0.0	
# ::edge	dress	mod	appropriate-02	0	0.0	
(d / dress 
      :mod (a / appropriate-02 
            :ARG1 (t / that)))

# ::snt What did the girl find?
# ::tok What did the girl find ?
# ::alignments 4-5|0 3-4|0.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.323
# ::node	0	find-01	4-5
# ::node	0.0	girl	3-4
# ::node	0.1	do-02	1-2
# ::root	0	find-01
# ::edge	do-02	ARG1	find-01	0.1	0	
# ::edge	find-01	ARG0	girl	0	0.0	
(f / find-01 
      :ARG0 (g / girl) 
      :ARG1-of (d / do-02))

# ::snt Where did the girl find the boy?
# ::tok Where did the girl find the boy ?
# ::alignments 6-7|0.1 4-5|0 3-4|0.0 1-2|0.2 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.345
# ::node	0	find-01	4-5
# ::node	0.0	girl	3-4
# ::node	0.1	boy	6-7
# ::node	0.2	do-02	1-2
# ::root	0	find-01
# ::edge	do-02	ARG1	find-01	0.2	0	
# ::edge	find-01	ARG0	girl	0	0.0	
# ::edge	find-01	ARG1	boy	0	0.1	
(f / find-01 
      :ARG0 (g / girl) 
      :ARG1 (b / boy) 
      :ARG1-of (d / do-02))

# ::snt How did the girl find the boy?
# ::tok How did the girl find the boy ?
# ::alignments 6-7|0.1 4-5|0 3-4|0.0 1-2|0.2 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.368
# ::node	0	find-01	4-5
# ::node	0.0	girl	3-4
# ::node	0.1	boy	6-7
# ::node	0.2	do-02	1-2
# ::root	0	find-01
# ::edge	do-02	ARG1	find-01	0.2	0	
# ::edge	find-01	ARG0	girl	0	0.0	
# ::edge	find-01	ARG1	boy	0	0.1	
(f / find-01 
      :ARG0 (g / girl) 
      :ARG1 (b / boy) 
      :ARG1-of (d / do-02))

# ::snt Whose toy did the girl find?
# ::tok Whose toy did the girl find ?
# ::alignments 5-6|0 4-5|0.0 2-3|0.1.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.390
# ::node	0	find-01	5-6
# ::node	0.0	girl	4-5
# ::node	0.1	toy	1-2
# ::node	0.1.0	do-02	2-3
# ::root	0	find-01
# ::edge	do-02	ARG1	toy	0.1.0	0.1	
# ::edge	find-01	ARG0	girl	0	0.0	
# ::edge	find-01	ARG1	toy	0	0.1	
(f / find-01 
      :ARG0 (g / girl) 
      :ARG1 (t / toy 
            :ARG1-of (d / do-02)))

# ::snt How fast did the girl run?
# ::tok How fast did the girl run ?
# ::alignments 4-5|0.1 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.407
# ::node	0	fast	1-2
# ::node	0.0	do-02	2-3
# ::node	0.1	girl	4-5
# ::root	0	fast
# ::edge	do-02	ARG1	fast	0.0	0	
# ::edge	fast	domain	girl	0	0.1	
(f / fast 
      :ARG1-of (d / do-02) 
      :domain (g / girl))

# ::snt What purple thing did the girl see?
# ::tok What purple thing did the girl see ?
# ::alignments 6-7|0 5-6|0.0 3-4|0.1.1 2-3|0.1 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.434
# ::node	0	see-01	6-7
# ::node	0.0	girl	5-6
# ::node	0.1	thing	2-3
# ::node	0.1.0	purple-02	1-2
# ::node	0.1.1	do-02	3-4
# ::root	0	see-01
# ::edge	do-02	ARG1	thing	0.1.1	0.1	
# ::edge	purple-02	ARG1	thing	0.1.0	0.1	
# ::edge	see-01	ARG0	girl	0	0.0	
# ::edge	see-01	ARG1	thing	0	0.1	
(s / see-01 
      :ARG0 (g / girl) 
      :ARG1 (t / thing 
            :ARG1-of (p / purple-02) 
            :ARG1-of (d / do-02)))

# ::snt Which investigation did she lead?
# ::tok Which investigation did she lead ?
# ::alignments 4-5|0 3-4|0.0 2-3|0.1.0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.455
# ::node	0	lead-03	4-5
# ::node	0.0	she	3-4
# ::node	0.1	investigate-01	1-2
# ::node	0.1.0	do-02	2-3
# ::root	0	lead-03
# ::edge	do-02	ARG1	investigate-01	0.1.0	0.1	
# ::edge	lead-03	ARG0	she	0	0.0	
# ::edge	lead-03	ARG1	investigate-01	0	0.1	
(l / lead-03 
      :ARG0 (s / she) 
      :ARG1 (i / investigate-01 
            :ARG1-of (d / do-02)))

# ::snt I know who you saw.
# ::tok I know who you saw .
# ::alignments 4-5|0.1 3-4|0.1.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:40.949
# ::node	0	know-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	see-01	4-5
# ::node	0.1.0	you	3-4
# ::root	0	know-01
# ::edge	know-01	ARG0	i	0	0.0	
# ::edge	know-01	ARG1	see-01	0	0.1	
# ::edge	see-01	ARG0	you	0.1	0.1.0	
(k / know-01 
      :ARG0 (i / i) 
      :ARG1 (s / see-01 
            :ARG0 (y / you)))

# ::snt I know the person you saw.
# ::tok I know the person you saw .
# ::alignments 5-6|0.1.0 4-5|0.1.0.0 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:41.076
# ::node	0	know-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	person	3-4
# ::node	0.1.0	see-01	5-6
# ::node	0.1.0.0	you	4-5
# ::root	0	know-01
# ::edge	know-01	ARG0	i	0	0.0	
# ::edge	know-01	ARG1	person	0	0.1	
# ::edge	see-01	ARG0	you	0.1.0	0.1.0.0	
# ::edge	see-01	ARG1	person	0.1.0	0.1	
(k / know-01 
      :ARG0 (i / i) 
      :ARG1 (p / person 
            :ARG1-of (s / see-01 
                  :ARG0 (y / you))))

# ::snt Did the girl find the boy?
# ::tok Did the girl find the boy ?
# ::alignments 5-6|0.1 3-4|0 2-3|0.0 0-1|0.2 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:41.097
# ::node	0	find-01	3-4
# ::node	0.0	girl	2-3
# ::node	0.1	boy	5-6
# ::node	0.2	do-02	0-1
# ::root	0	find-01
# ::edge	do-02	ARG1	find-01	0.2	0	
# ::edge	find-01	ARG0	girl	0	0.0	
# ::edge	find-01	ARG1	boy	0	0.1	
(f / find-01 
      :ARG0 (g / girl) 
      :ARG1 (b / boy) 
      :ARG1-of (d / do-02))

# ::snt Was the boy found?
# ::tok Was the boy found ?
# ::alignments 3-4|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:41.108
# ::node	0	find-01	3-4
# ::node	0.0	boy	2-3
# ::root	0	find-01
# ::edge	find-01	ARG1	boy	0	0.0	
(f / find-01 
      :ARG1 (b / boy))

# ::snt The boy doesn’t know whether the girl came.
# ::tok The boy does n't know whether the girl came .
# ::alignments 8-9|0.1.1 7-8|0.1 4-5|0 2-3|0.1.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:41.683
# ::node	0	know-01	4-5
# ::node	0.0	boy	1-2
# ::node	0.1	girl	7-8
# ::node	0.1.0	do-02	2-3
# ::node	0.1.1	come-01	8-9
# ::root	0	know-01
# ::edge	come-01	ARG1	girl	0.1.1	0.1	
# ::edge	do-02	ARG1	girl	0.1.0	0.1	
# ::edge	know-01	ARG0	boy	0	0.0	
# ::edge	know-01	ARG1	girl	0	0.1	
(k / know-01 
      :ARG0 (b / boy) 
      :ARG1 (g / girl 
            :ARG1-of (d / do-02) 
            :ARG1-of (c / come-01)))

# ::snt The boy doesn’t know if the girl came.
# ::tok The boy does n't know if the girl came .
# ::alignments 8-9|0.1.1 7-8|0.1 5-6|0 4-5|0.1.0 2-3|0.1.2 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:42.380
# ::node	0	cause-01	5-6
# ::node	0.0	boy	1-2
# ::node	0.1	girl	7-8
# ::node	0.1.0	know-01	4-5
# ::node	0.1.1	come-01	8-9
# ::node	0.1.2	do-02	2-3
# ::root	0	cause-01
# ::edge	cause-01	ARG0	boy	0	0.0	
# ::edge	cause-01	ARG1	girl	0	0.1	
# ::edge	come-01	ARG1	girl	0.1.1	0.1	
# ::edge	do-02	ARG1	girl	0.1.2	0.1	
# ::edge	know-01	ARG1	girl	0.1.0	0.1	
(c2 / cause-01 
      :ARG0 (b / boy) 
      :ARG1 (g / girl 
            :ARG1-of (k / know-01) 
            :ARG1-of (c / come-01) 
            :ARG1-of (d / do-02)))

# ::snt The boy doesn’t know that the girl came.
# ::tok The boy does n't know that the girl came .
# ::alignments 8-9|0.1.0 7-8|0.1 5-6|0.0.0.0 4-5|0 2-3|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.032
# ::node	0	know-01	4-5
# ::node	0.0	boy	1-2
# ::node	0.0.0	do-02	2-3
# ::node	0.0.0.0	that	5-6
# ::node	0.1	girl	7-8
# ::node	0.1.0	come-01	8-9
# ::root	0	know-01
# ::edge	come-01	ARG1	girl	0.1.0	0.1	
# ::edge	do-02	ARG0	boy	0.0.0	0.0	
# ::edge	do-02	ARG1	that	0.0.0	0.0.0.0	
# ::edge	know-01	ARG0	boy	0	0.0	
# ::edge	know-01	ARG1	girl	0	0.1	
(k / know-01 
      :ARG0 (b / boy 
            :ARG0-of (d / do-02 
                  :ARG1 (t / that))) 
      :ARG1 (g / girl 
            :ARG1-of (c / come-01)))

# ::snt The boy doesn’t know the girl came.
# ::tok The boy does n't know the girl came .
# ::alignments 7-8|0.1.1 6-7|0.1 4-5|0 2-3|0.1.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.553
# ::node	0	know-01	4-5
# ::node	0.0	boy	1-2
# ::node	0.1	girl	6-7
# ::node	0.1.0	do-02	2-3
# ::node	0.1.1	come-01	7-8
# ::root	0	know-01
# ::edge	come-01	ARG1	girl	0.1.1	0.1	
# ::edge	do-02	ARG1	girl	0.1.0	0.1	
# ::edge	know-01	ARG0	boy	0	0.0	
# ::edge	know-01	ARG1	girl	0	0.1	
(k / know-01 
      :ARG0 (b / boy) 
      :ARG1 (g / girl 
            :ARG1-of (d / do-02) 
            :ARG1-of (c / come-01)))

# ::snt Go.
# ::tok Go .
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.558
# ::node	0	go-02	0-1
# ::root	0	go-02
(g / go-02)

# ::snt Go!
# ::tok Go !
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.563
# ::node	0	go-02	0-1
# ::root	0	go-02
(g / go-02)

# ::snt Let’s go.
# ::tok Let 's go .
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.570
# ::node	0	let-01	0-1
# ::root	0	let-01
(l / let-01)

# ::snt Let’s go!
# ::tok Let 's go !
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.576
# ::node	0	let-01	0-1
# ::root	0	let-01
(l / let-01)

# ::snt Yippee!
# ::tok Yippee !
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.581
# ::node	0	yippee	0-1
# ::root	0	yippee
(y / yippee)

# ::snt Yes!!!
# ::tok Yes !!!
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.586
# ::node	0	yes	0-1
# ::root	0	yes
(y / yes)

# ::snt The boy went.
# ::tok The boy went .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.595
# ::node	0	go-02	2-3
# ::node	0.0	boy	1-2
# ::root	0	go-02
# ::edge	go-02	ARG0	boy	0	0.0	
(g / go-02 
      :ARG0 (b / boy))

# ::snt The boys went.
# ::tok The boys went .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.605
# ::node	0	go-02	2-3
# ::node	0.0	boy	1-2
# ::root	0	go-02
# ::edge	go-02	ARG0	boy	0	0.0	
(g / go-02 
      :ARG0 (b / boy))

# ::snt A boy went.
# ::tok A boy went .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.615
# ::node	0	go-02	2-3
# ::node	0.0	boy	1-2
# ::root	0	go-02
# ::edge	go-02	ARG0	boy	0	0.0	
(g / go-02 
      :ARG0 (b / boy))

# ::snt The boy goes.
# ::tok The boy goes .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.622
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt The boy will go.
# ::tok The boy will go .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.630
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt that boy
# ::tok that boy
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.638
# ::node	0	boy	1-2
# ::node	0.0	that	0-1
# ::root	0	boy
(b / boy 
      :mod-of (t / that))

# ::snt those boys
# ::tok those boys
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.642
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt this boy
# ::tok this boy
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.650
# ::node	0	boy	1-2
# ::node	0.0	this	0-1
# ::root	0	boy
# ::edge	boy	mod	this	0	0.0	
(b / boy 
      :mod (t / this))

# ::snt these boys
# ::tok these boys
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.655
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt that is a shame.
# ::tok that is a shame .
# ::alignments 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.665
# ::node	0	shame	3-4
# ::node	0.0	that	0-1
# ::root	0	shame
# ::edge	shame	domain	that	0	0.0	
(s / shame 
      :domain (t / that))

# ::snt money-market account
# ::tok money - market account
# ::alignments 3-4|0 2-3|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.677
# ::node	0	account	3-4
# ::node	0.0	market	2-3
# ::node	0.0.0	money	0-1
# ::root	0	account
# ::edge	account	mod	market	0	0.0	
# ::edge	market	mod	money	0.0	0.0.0	
(a / account 
      :mod (m / market 
            :mod (m2 / money)))

# ::snt vice-president
# ::tok vice - president
# ::alignments 2-3|0.0+0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.688
# ::node	0	have-org-role-91	2-3
# ::node	0.0	president	2-3
# ::node	0.0.0	vice	0-1
# ::root	0	have-org-role-91
# ::edge	have-org-role-91	ARG2	president	0	0.0	
# ::edge	president	mod	vice	0.0	0.0.0	
(h / have-org-role-91 
      :ARG2 (p / president 
            :mod (v / vice)))

# ::snt vice president
# ::tok vice president
# ::alignments 1-2|0.0+0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.700
# ::node	0	have-org-role-91	1-2
# ::node	0.0	president	1-2
# ::node	0.0.0	vice	0-1
# ::root	0	have-org-role-91
# ::edge	have-org-role-91	ARG2	president	0	0.0	
# ::edge	president	mod	vice	0.0	0.0.0	
(h / have-org-role-91 
      :ARG2 (p / president 
            :mod (v / vice)))

# ::snt brother-in-law
# ::tok brother - in - law
# ::alignments 4-5|0 0-1|0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.712
# ::node	0	law	4-5
# ::node	0.0	have-rel-role-91	0-1
# ::node	0.0.0	brother	0-1
# ::root	0	law
(l / law 
      :ARG1-of (h / have-rel-role-91 
            :ARG2 (b / brother)))

# ::snt He was charged with public intoxication and resisting arrest.
# ::tok He was charged with public intoxication and resisting arrest .
# ::alignments 8-9|0.1.0 7-8|0.1 6-7|0 4-5|0.0.1 2-3|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.748
# ::node	0	and	6-7
# ::node	0.0	charge-05	2-3
# ::node	0.0.0	he	0-1
# ::node	0.0.1	public	4-5
# ::node	0.1	resist-01	7-8
# ::node	0.1.0	arrest-01	8-9
# ::root	0	and
# ::edge	and	op1	charge-05	0	0.0	
# ::edge	and	op2	resist-01	0	0.1	
# ::edge	charge-05	ARG0	he	0.0	0.0.0	
# ::edge	charge-05	ARG2	public	0.0	0.0.1	
# ::edge	resist-01	ARG1	arrest-01	0.1	0.1.0	
(a2 / and 
      :op1 (c / charge-05 
            :ARG0 (h / he) 
            :ARG2 (p / public)) 
      :op2 (r / resist-01 
            :ARG1 (a / arrest-01)))

# ::snt the hopeful girl
# ::tok the hopeful girl
# ::alignments 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.756
# ::node	0	hopeful-03	1-2
# ::node	0.0	girl	2-3
# ::root	0	hopeful-03
(h / hopeful-03 
      :mod-of (g / girl))

# ::snt The marble is small.
# ::tok The marble is small .
# ::alignments 3-4|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.763
# ::node	0	small	3-4
# ::root	0	small
(s / small)

# ::snt The man is a lawyer.
# ::tok The man is a lawyer .
# ::alignments 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.773
# ::node	0	lawyer	4-5
# ::node	0.0	man	1-2
# ::root	0	lawyer
# ::edge	lawyer	domain	man	0	0.0	
(l / lawyer 
      :domain (m / man))

# ::snt the man who is a lawyer
# ::tok the man who is a lawyer
# ::alignments 5-6|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.784
# ::node	0	man	1-2
# ::node	0.0	lawyer	5-6
# ::root	0	man
# ::edge	man	mod	lawyer	0	0.0	
(m / man 
      :mod (l / lawyer))

# ::snt the boy
# ::tok the boy
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.789
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt There is a boy.
# ::tok There is a boy .
# ::alignments 3-4|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.796
# ::node	0	boy	3-4
# ::root	0	boy
(b / boy)

# ::snt four boys making pies
# ::tok four boys making pies
# ::alignments 2-3|0.0 1-2|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.808
# ::node	0	boy	1-2
# ::node	0.0	make-01	2-3
# ::node	0.1	4	0-1
# ::root	0	boy
# ::edge	boy	quant	4	0	0.1	
# ::edge	make-01	ARG1	boy	0.0	0	
(b / boy 
      :ARG1-of (m / make-01) 
      :quant 4)

# ::snt There are four boys making pies.
# ::tok There are four boys making pies .
# ::alignments 4-5|0 3-4|0.0 2-3|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.824
# ::node	0	make-01	4-5
# ::node	0.0	boy	3-4
# ::node	0.0.0	4	2-3
# ::root	0	make-01
# ::edge	boy	quant	4	0.0	0.0.0	
# ::edge	make-01	ARG1	boy	0	0.0	
(m / make-01 
      :ARG1 (b / boy 
            :quant 4))

# ::snt The boy destroyed the room.
# ::tok The boy destroyed the room .
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:43.837
# ::node	0	destroy-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	room	4-5
# ::root	0	destroy-01
# ::edge	destroy-01	ARG0	boy	0	0.0	
# ::edge	destroy-01	ARG1	room	0	0.1	
(d / destroy-01 
      :ARG0 (b / boy) 
      :ARG1 (r / room))

# ::snt The boy’s destruction of the room
# ::tok The boy 's destruction of the room
# ::alignments 6-7|0 3-4|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.329
# ::node	0	room	6-7
# ::node	0.0	destroy-01	3-4
# ::node	0.0.0	boy	1-2
# ::root	0	room
(r / room 
      :ARG1-of (d / destroy-01 
            :ARG0 (b / boy)))

# ::snt The destruction of the room by the boy
# ::tok The destruction of the room by the boy
# ::alignments 7-8|0.0.0 4-5|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.345
# ::node	0	destroy-01	1-2
# ::node	0.0	room	4-5
# ::node	0.0.0	boy	7-8
# ::root	0	destroy-01
# ::edge	destroy-01	ARG1	room	0	0.0	
# ::edge	room	purpose	boy	0.0	0.0.0	
(d / destroy-01 
      :ARG1 (r / room 
            :purpose (b / boy)))

# ::snt the explosion
# ::tok the explosion
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.351
# ::node	0	explode-01	1-2
# ::root	0	explode-01
(e / explode-01)

# ::snt the proposal
# ::tok the proposal
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.356
# ::node	0	propose-01	1-2
# ::root	0	propose-01
(p / propose-01)

# ::snt the thing proposed
# ::tok the thing proposed
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.364
# ::node	0	propose-01	2-3
# ::node	0.0	thing	1-2
# ::root	0	propose-01
# ::edge	propose-01	ARG0	thing	0	0.0	
(p / propose-01 
      :ARG0 (t / thing))

# ::snt what got proposed
# ::tok what got proposed
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.373
# ::node	0	propose-01	2-3
# ::node	0.0	get-01	1-2
# ::root	0	propose-01
(p / propose-01 
      :ARG1-of (g / get-01))

# ::snt the boy’s opinion
# ::tok the boy 's opinion
# ::alignments 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.380
# ::node	0	opine-01	3-4
# ::node	0.0	boy	1-2
# ::root	0	opine-01
# ::edge	opine-01	ARG1	boy	0	0.0	
(o / opine-01 
      :ARG1 (b / boy))

# ::snt the opinion of the boy
# ::tok the opinion of the boy
# ::alignments 4-5|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.390
# ::node	0	opine-01	1-2
# ::node	0.0	boy	4-5
# ::root	0	opine-01
# ::edge	opine-01	ARG1	boy	0	0.0	
(o / opine-01 
      :ARG1 (b / boy))

# ::snt that which was opined by the boy
# ::tok that which was opined by the boy
# ::alignments 6-7|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.401
# ::node	0	boy	6-7
# ::node	0.0	that	0-1
# ::root	0	boy
(b / boy 
      :poss-of (t / that))

# ::snt what the boy opined
# ::tok what the boy opined
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.407
# ::node	0	boy	2-3
# ::root	0	boy
(b / boy)

# ::snt chip maker
# ::tok chip maker
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.415
# ::node	0	make-01	1-2
# ::node	0.0	chip	0-1
# ::root	0	make-01
# ::edge	make-01	ARG1	chip	0	0.0	
(m / make-01 
      :ARG1 (c / chip))

# ::snt maker of chips
# ::tok maker of chips
# ::alignments 2-3|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.424
# ::node	0	make-01	0-1
# ::node	0.0	chip	2-3
# ::root	0	make-01
# ::edge	make-01	ARG1	chip	0	0.0	
(m / make-01 
      :ARG1 (c / chip))

# ::snt investor
# ::tok investor
# ::alignments 0-1|0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.432
# ::node	0	invest-01	0-1
# ::node	0.0	person	0-1
# ::root	0	invest-01
# ::edge	invest-01	ARG0	person	0	0.0	
(i / invest-01 
      :ARG0 (p / person))

# ::snt bond investor
# ::tok bond investor
# ::alignments 1-2|0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.439
# ::node	0	invest-01	1-2
# ::node	0.0	person	1-2
# ::root	0	invest-01
# ::edge	invest-01	ARG0	person	0	0.0	
(i / invest-01 
      :ARG0 (p / person))

# ::snt small investor
# ::tok small investor
# ::alignments 1-2|0+0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.451
# ::node	0	invest-01	1-2
# ::node	0.0	person	1-2
# ::node	0.0.0	small	0-1
# ::root	0	invest-01
# ::edge	invest-01	ARG0	person	0	0.0	
# ::edge	person	mod	small	0.0	0.0.0	
(i / invest-01 
      :ARG0 (p / person 
            :mod (s / small)))

# ::snt nerdy investor
# ::tok nerdy investor
# ::alignments 1-2|0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.458
# ::node	0	invest-01	1-2
# ::node	0.0	person	1-2
# ::root	0	invest-01
# ::edge	invest-01	ARG0	person	0	0.0	
(i / invest-01 
      :ARG0 (p / person))

# ::snt treasurer
# ::tok treasurer
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.463
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt president
# ::tok president
# ::alignments 0-1|0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.470
# ::node	0	have-org-role-91	0-1
# ::node	0.0	president	0-1
# ::root	0	have-org-role-91
# ::edge	have-org-role-91	ARG2	president	0	0.0	
(h / have-org-role-91 
      :ARG2 (p / president))

# ::snt the boy is a hard worker
# ::tok the boy is a hard worker
# ::alignments 5-6|0+0.0 4-5|0.1 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.489
# ::node	0	work-01	5-6
# ::node	0.0	person	5-6
# ::node	0.0.0	boy	1-2
# ::node	0.1	hard-02	4-5
# ::root	0	work-01
# ::edge	hard-02	ARG1	work-01	0.1	0	
# ::edge	person	domain	boy	0.0	0.0.0	
# ::edge	work-01	ARG0	person	0	0.0	
(w / work-01 
      :ARG0 (p / person 
            :domain (b / boy)) 
      :ARG1-of (h / hard-02))

# ::snt the boy works hard
# ::tok the boy works hard
# ::alignments 3-4|0 2-3|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.501
# ::node	0	hard-02	3-4
# ::node	0.0	boy	1-2
# ::node	0.0.0	work-09	2-3
# ::root	0	hard-02
# ::edge	hard-02	ARG1	boy	0	0.0	
# ::edge	work-09	ARG1	boy	0.0.0	0.0	
(h / hard-02 
      :ARG1 (b / boy 
            :ARG1-of (w / work-09)))

# ::snt the attractive man
# ::tok the attractive man
# ::alignments 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.509
# ::node	0	attract-01	1-2
# ::node	0.0	man	2-3
# ::root	0	attract-01
# ::edge	attract-01	ARG0	man	0	0.0	
(a / attract-01 
      :ARG0 (m / man))

# ::snt the man is attractive
# ::tok the man is attractive
# ::alignments 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.518
# ::node	0	attract-01	3-4
# ::node	0.0	man	1-2
# ::root	0	attract-01
# ::edge	attract-01	ARG0	man	0	0.0	
(a / attract-01 
      :ARG0 (m / man))

# ::snt the man attracts
# ::tok the man attracts
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.525
# ::node	0	attract-01	2-3
# ::node	0.0	man	1-2
# ::root	0	attract-01
# ::edge	attract-01	ARG0	man	0	0.0	
(a / attract-01 
      :ARG0 (m / man))

# ::snt the man is attractive to women
# ::tok the man is attractive to women
# ::alignments 5-6|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.538
# ::node	0	attract-01	3-4
# ::node	0.0	man	1-2
# ::node	0.1	woman	5-6
# ::root	0	attract-01
# ::edge	attract-01	ARG0	man	0	0.0	
# ::edge	attract-01	ARG1	woman	0	0.1	
(a / attract-01 
      :ARG0 (m / man) 
      :ARG1 (w / woman))

# ::snt the man attracts women
# ::tok the man attracts women
# ::alignments 3-4|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.550
# ::node	0	attract-01	2-3
# ::node	0.0	man	1-2
# ::node	0.1	woman	3-4
# ::root	0	attract-01
# ::edge	attract-01	ARG0	man	0	0.0	
# ::edge	attract-01	ARG1	woman	0	0.1	
(a / attract-01 
      :ARG0 (m / man) 
      :ARG1 (w / woman))

# ::snt The soldier was aware of the battle.
# ::tok The soldier was aware of the battle .
# ::alignments 6-7|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.562
# ::node	0	battle-01	6-7
# ::node	0.0	soldier	1-2
# ::root	0	battle-01
# ::edge	battle-01	ARG0	soldier	0	0.0	
(b / battle-01 
      :ARG0 (s / soldier))

# ::snt The soldier realized there was a battle.
# ::tok The soldier realized there was a battle .
# ::alignments 6-7|0.1 3-4|0.1.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.582
# ::node	0	realize-02	2-3
# ::node	0.0	soldier	1-2
# ::node	0.1	battle-01	6-7
# ::node	0.1.0	there	3-4
# ::root	0	realize-02
# ::edge	battle-01	location	there	0.1	0.1.0	
# ::edge	realize-02	ARG0	soldier	0	0.0	
# ::edge	realize-02	ARG1	battle-01	0	0.1	
(r / realize-02 
      :ARG0 (s / soldier) 
      :ARG1 (b / battle-01 
            :location (t / there)))

# ::snt The boy is responsible for the work.
# ::tok The boy is responsible for the work .
# ::alignments 6-7|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.598
# ::node	0	responsible-01	3-4
# ::node	0.0	boy	1-2
# ::node	0.1	work-01	6-7
# ::root	0	responsible-01
# ::edge	responsible-01	ARG0	boy	0	0.0	
# ::edge	responsible-01	ARG1	work-01	0	0.1	
(r / responsible-01 
      :ARG0 (b / boy) 
      :ARG1 (w / work-01))

# ::snt The boy is responsible for doing the work.
# ::tok The boy is responsible for doing the work .
# ::alignments 7-8|0.1.0 5-6|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.619
# ::node	0	responsible-01	3-4
# ::node	0.0	boy	1-2
# ::node	0.1	do-02	5-6
# ::node	0.1.0	work-01	7-8
# ::root	0	responsible-01
# ::edge	do-02	ARG1	work-01	0.1	0.1.0	
# ::edge	responsible-01	ARG0	boy	0	0.0	
# ::edge	responsible-01	ARG1	do-02	0	0.1	
(r / responsible-01 
      :ARG0 (b / boy) 
      :ARG1 (d / do-02 
            :ARG1 (w / work-01)))

# ::snt The boy has the responsibility for the work.
# ::tok The boy has the responsibility for the work .
# ::alignments 7-8|0.1 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.637
# ::node	0	responsible-03	4-5
# ::node	0.0	boy	1-2
# ::node	0.1	work-01	7-8
# ::root	0	responsible-03
# ::edge	responsible-03	ARG0	boy	0	0.0	
# ::edge	responsible-03	ARG1	work-01	0	0.1	
(r / responsible-03 
      :ARG0 (b / boy) 
      :ARG1 (w / work-01))

# ::snt The girl is sad.
# ::tok The girl is sad .
# ::alignments 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.645
# ::node	0	sad-02	3-4
# ::node	0.0	girl	1-2
# ::root	0	sad-02
# ::edge	sad-02	ARG1	girl	0	0.0	
(s / sad-02 
      :ARG1 (g / girl))

# ::snt The girl was saddened by the disaster.
# ::tok The girl was saddened by the disaster .
# ::alignments 6-7|0.0 3-4|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.660
# ::node	0	sadden-01	3-4
# ::node	0.0	disaster	6-7
# ::node	0.1	girl	1-2
# ::root	0	sadden-01
# ::edge	sadden-01	ARG0	disaster	0	0.0	
# ::edge	sadden-01	ARG1	girl	0	0.1	
(s / sadden-01 
      :ARG0 (d / disaster) 
      :ARG1 (g / girl))

# ::snt The disaster saddened the girl.
# ::tok The disaster saddened the girl .
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.678
# ::node	0	sadden-01	2-3
# ::node	0.0	disaster	1-2
# ::node	0.1	girl	4-5
# ::root	0	sadden-01
# ::edge	sadden-01	ARG0	disaster	0	0.0	
# ::edge	sadden-01	ARG1	girl	0	0.1	
(s / sadden-01 
      :ARG0 (d / disaster) 
      :ARG1 (g / girl))

# ::snt the boy is acquainted with magic
# ::tok the boy is acquainted with magic
# ::alignments 5-6|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.692
# ::node	0	acquaint-01	3-4
# ::node	0.0	boy	1-2
# ::node	0.1	magic	5-6
# ::root	0	acquaint-01
# ::edge	acquaint-01	ARG1	boy	0	0.0	
# ::edge	acquaint-01	ARG2	magic	0	0.1	
(a / acquaint-01 
      :ARG1 (b / boy) 
      :ARG2 (m / magic))

# ::snt Boys want to please.
# ::tok Boys want to please .
# ::alignments 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.701
# ::node	0	want-01	1-2
# ::node	0.0	please-01	3-4
# ::root	0	want-01
# ::edge	want-01	ARG1	please-01	0	0.0	
(w / want-01 
      :ARG1 (p / please-01))

# ::snt Girls are easy to please.
# ::tok Girls are easy to please .
# ::alignments 4-5|0.0 2-3|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.714
# ::node	0	easy-05	2-3
# ::node	0.0	please-01	4-5
# ::node	0.0.0	girl	0-1
# ::root	0	easy-05
# ::edge	easy-05	ARG1	please-01	0	0.0	
# ::edge	please-01	ARG0	girl	0.0	0.0.0	
(e / easy-05 
      :ARG1 (p / please-01 
            :ARG0 (g / girl)))

# ::snt It is easy to please girls.
# ::tok It is easy to please girls .
# ::alignments 5-6|0.0.1 4-5|0.0 2-3|0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.730
# ::node	0	easy-05	2-3
# ::node	0.0	please-01	4-5
# ::node	0.0.0	it	0-1
# ::node	0.0.1	girl	5-6
# ::root	0	easy-05
# ::edge	easy-05	ARG1	please-01	0	0.0	
# ::edge	please-01	ARG0	it	0.0	0.0.0	
# ::edge	please-01	ARG1	girl	0.0	0.0.1	
(e / easy-05 
      :ARG1 (p / please-01 
            :ARG0 (i / it) 
            :ARG1 (g / girl)))

# ::snt Pleasing girls is easy.
# ::tok Pleasing girls is easy .
# ::alignments 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.740
# ::node	0	easy-05	3-4
# ::node	0.0	girl	1-2
# ::root	0	easy-05
# ::edge	easy-05	ARG1	girl	0	0.0	
(e / easy-05 
      :ARG1 (g / girl))

# ::snt an edible sandwich
# ::tok an edible sandwich
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.745
# ::node	0	sandwich	2-3
# ::root	0	sandwich
(s / sandwich)

# ::snt a sandwich that can be eaten
# ::tok a sandwich that can be eaten
# ::alignments 5-6|0.0 3-4|0.0.0 2-3|0.0.0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.793
# ::node	0	sandwich	1-2
# ::node	0.0	eat-01	5-6
# ::node	0.0.0	possible-01	3-4
# ::node	0.0.0.0	that	2-3
# ::root	0	sandwich
(s / sandwich 
      :ARG1-of (e / eat-01 
            :ARG1-of (p / possible-01 
                  :ARG0 (t / that))))

# ::snt a sandwich that it is possible to eat
# ::tok a sandwich that it is possible to eat
# ::alignments 7-8|0.1 5-6|0 3-4|0.1.0 2-3|0.2 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.817
# ::node	0	possible-01	5-6
# ::node	0.0	sandwich	1-2
# ::node	0.1	eat-01	7-8
# ::node	0.1.0	it	3-4
# ::node	0.2	that	2-3
# ::root	0	possible-01
# ::edge	eat-01	ARG0	it	0.1	0.1.0	
# ::edge	possible-01	ARG0	sandwich	0	0.0	
# ::edge	possible-01	ARG1	eat-01	0	0.1	
# ::edge	that	op1	possible-01	0.2	0	
(p / possible-01 
      :ARG0 (s / sandwich) 
      :ARG1 (e / eat-01 
            :ARG0 (i / it)) 
      :op-of (t / that))

# ::snt an inedible sandwich
# ::tok an inedible sandwich
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.822
# ::node	0	sandwich	2-3
# ::root	0	sandwich
(s / sandwich)

# ::snt a taxable fund
# ::tok a taxable fund
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.827
# ::node	0	fund-01	2-3
# ::root	0	fund-01
(f / fund-01)

# ::snt I observed that the army moved quickly.
# ::tok I observed that the army moved quickly .
# ::alignments 6-7|0.0.0.1 5-6|0.0.0 4-5|0.0.0.0 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.865
# ::node	0	observe-01	1-2
# ::node	0.0	i	0-1
# ::node	0.0.0	move-01	5-6
# ::node	0.0.0.0	army	4-5
# ::node	0.0.0.1	quick-02	6-7
# ::node	0.1	that	2-3
# ::root	0	observe-01
# ::edge	move-01	ARG0	i	0.0.0	0.0	
# ::edge	move-01	ARG1	army	0.0.0	0.0.0.0	
# ::edge	observe-01	ARG0	i	0	0.0	
# ::edge	observe-01	ARG1	that	0	0.1	
# ::edge	quick-02	ARG1	move-01	0.0.0.1	0.0.0	
(o / observe-01 
      :ARG0 (i / i 
            :ARG0-of (m / move-01 
                  :ARG1 (a / army) 
                  :ARG1-of (q / quick-02))) 
      :ARG1 (t / that))

# ::snt I observed the quick movement of the army
# ::tok I observed the quick movement of the army
# ::alignments 7-8|0.1.0 4-5|0.1 3-4|0.1.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.888
# ::node	0	observe-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	movement-07	4-5
# ::node	0.1.0	army	7-8
# ::node	0.1.1	quick-02	3-4
# ::root	0	observe-01
# ::edge	movement-07	ARG1	army	0.1	0.1.0	
# ::edge	observe-01	ARG0	i	0	0.0	
# ::edge	observe-01	ARG1	movement-07	0	0.1	
# ::edge	quick-02	ARG1	movement-07	0.1.1	0.1	
(o / observe-01 
      :ARG0 (i / i) 
      :ARG1 (m / movement-07 
            :ARG1 (a / army) 
            :ARG1-of (q / quick-02)))

# ::snt I observed the army moving quickly.
# ::tok I observed the army moving quickly .
# ::alignments 5-6|0.1.0.0 4-5|0.1.0 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.910
# ::node	0	observe-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	army	3-4
# ::node	0.1.0	move-01	4-5
# ::node	0.1.0.0	quick-02	5-6
# ::root	0	observe-01
# ::edge	move-01	ARG1	army	0.1.0	0.1	
# ::edge	observe-01	ARG0	i	0	0.0	
# ::edge	observe-01	ARG1	army	0	0.1	
# ::edge	quick-02	ARG1	move-01	0.1.0.0	0.1.0	
(o / observe-01 
      :ARG0 (i / i) 
      :ARG1 (a / army 
            :ARG1-of (m / move-01 
                  :ARG1-of (q / quick-02))))

# ::snt He drove west, from Houston to Austin.
# ::tok He drove west , from Houston to Austin .
# ::alignments 7-8|0.1.0.0+0.1.0+0.1 5-6|0.3.0.0+0.3.0+0.3 2-3|0.2 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:44.953
# ::node	0	drive-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	city	7-8
# ::node	0.1.0	name	7-8
# ::node	0.1.0.0	"Austin"	7-8
# ::node	0.2	west	2-3
# ::node	0.3	city	5-6
# ::node	0.3.0	name	5-6
# ::node	0.3.0.0	"Houston"	5-6
# ::root	0	drive-01
# ::edge	city	name	name	0.1	0.1.0	
# ::edge	city	name	name	0.3	0.3.0	
# ::edge	drive-01	ARG0	he	0	0.0	
# ::edge	drive-01	destination	city	0	0.1	
# ::edge	drive-01	direction	west	0	0.2	
# ::edge	drive-01	source	city	0	0.3	
# ::edge	name	op1	"Austin"	0.1.0	0.1.0.0	
# ::edge	name	op1	"Houston"	0.3.0	0.3.0.0	
(d / drive-01 
      :ARG0 (h / he) 
      :destination (c / city 
            :name (n / name 
                  :op1 "Austin")) 
      :direction (w / west) 
      :source (c2 / city 
            :name (n2 / name 
                  :op1 "Houston")))

# ::snt I drove to Indianapolis on I-65.
# ::tok I drove to Indianapolis on I - 65 .
# ::alignments 7-8|0.3 5-6|0.2 3-4|0.1.0.0+0.1.0+0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.120
# ::node	0	drive-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	city	3-4
# ::node	0.1.0	name	3-4
# ::node	0.1.0.0	"Indianapolis"	3-4
# ::node	0.2	i	5-6
# ::node	0.3	65	7-8
# ::root	0	drive-01
# ::edge	city	name	name	0.1	0.1.0	
# ::edge	drive-01	ARG0	i	0	0.0	
# ::edge	drive-01	destination	city	0	0.1	
# ::edge	drive-01	prep-with	65	0	0.3	
# ::edge	drive-01	prep-with	i	0	0.2	
# ::edge	name	op1	"Indianapolis"	0.1.0	0.1.0.0	
(d / drive-01 
      :ARG0 (i2 / i) 
      :destination (c / city 
            :name (n / name 
                  :op1 "Indianapolis")) 
      :prep-with (i / i) 
      :prep-with 65)

# ::snt I drove through the tunnel.
# ::tok I drove through the tunnel .
# ::alignments 4-5|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.146
# ::node	0	drive-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	tunnel	4-5
# ::root	0	drive-01
# ::edge	drive-01	ARG0	i	0	0.0	
# ::edge	drive-01	path	tunnel	0	0.1	
(d / drive-01 
      :ARG0 (i / i) 
      :path (t / tunnel))

# ::snt The soldier hummed a tune for the girl as he walked with her to town.
# ::tok The soldier hummed a tune for the girl as he walked with her to town .
# ::alignments 14-15|0.2.1 10-11|0.2 9-10|0.2.0 7-8|0.1 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.240
# ::node	0	tune-01	4-5
# ::node	0.0	soldier	1-2
# ::node	0.1	girl	7-8
# ::node	0.2	walk-01	10-11
# ::node	0.2.0	he	9-10
# ::node	0.2.1	town	14-15
# ::root	0	tune-01
# ::edge	tune-01	ARG0	soldier	0	0.0	
# ::edge	tune-01	ARG1	girl	0	0.1	
# ::edge	tune-01	condition	walk-01	0	0.2	
# ::edge	walk-01	ARG0	he	0.2	0.2.0	
# ::edge	walk-01	ARG1	town	0.2	0.2.1	
(t2 / tune-01 
      :ARG0 (s / soldier) 
      :ARG1 (g / girl) 
      :condition (w / walk-01 
            :ARG0 (h / he) 
            :ARG1 (t / town)))

# ::snt There is no information about the case.
# ::tok There is no information about the case .
# ::alignments 6-7|0.1 4-5|0.1.0 3-4|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.259
# ::node	0	information	3-4
# ::node	0.0	-	2-3
# ::node	0.1	case-03	6-7
# ::node	0.1.0	about	4-5
# ::root	0	information
# ::edge	about	op1	case-03	0.1.0	0.1	
# ::edge	information	polarity	-	0	0.0	
# ::edge	information	topic	case-03	0	0.1	
(i / information 
      :polarity (- / -) 
      :topic (c / case-03 
            :op-of (a / about)))

# ::snt USC Associate Professor for Mathematics Jay Bartroff
# ::tok USC Associate Professor for Mathematics Jay Bartroff
# ::alignments 4-7|0.0.0.0+0.0.0.1+0.0.0.2+0.0.0+0.0 2-3|0.2+0 1-2|0.2.0 0-1|0.1.0.0+0.1.0+0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.629
# ::node	0	have-org-role-91	2-3
# ::node	0.0	organization	4-7
# ::node	0.0.0	name	4-7
# ::node	0.0.0.0	"Bartroff"	4-7
# ::node	0.0.0.1	"Jay"	4-7
# ::node	0.0.0.2	"Mathematics"	4-7
# ::node	0.1	university	0-1
# ::node	0.1.0	name	0-1
# ::node	0.1.0.0	"USC"	0-1
# ::node	0.2	professor	2-3
# ::node	0.2.0	associate	1-2
# ::root	0	have-org-role-91
# ::edge	have-org-role-91	ARG0	organization	0	0.0	
# ::edge	have-org-role-91	ARG1	university	0	0.1	
# ::edge	have-org-role-91	ARG2	professor	0	0.2	
# ::edge	name	op1	"Bartroff"	0.0.0	0.0.0.0	
# ::edge	name	op1	"USC"	0.1.0	0.1.0.0	
# ::edge	name	op2	"Jay"	0.0.0	0.0.0.1	
# ::edge	name	op3	"Mathematics"	0.0.0	0.0.0.2	
# ::edge	organization	name	name	0.0	0.0.0	
# ::edge	professor	mod	associate	0.2	0.2.0	
# ::edge	university	name	name	0.1	0.1.0	
(h / have-org-role-91 
      :ARG0 (o / organization 
            :name (n / name 
                  :op1 "Bartroff" 
                  :op2 "Jay" 
                  :op3 "Mathematics")) 
      :ARG1 (u / university 
            :name (n2 / name 
                  :op1 "USC")) 
      :ARG2 (p / professor 
            :mod (a / associate)))

# ::snt He worked for two hours.
# ::tok He worked for two hours .
# ::alignments 4-5|0.1.1+0.1 3-4|0.1.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.650
# ::node	0	work-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	temporal-quantity	4-5
# ::node	0.1.0	2	3-4
# ::node	0.1.1	hour	4-5
# ::root	0	work-01
# ::edge	temporal-quantity	quant	2	0.1	0.1.0	
# ::edge	temporal-quantity	unit	hour	0.1	0.1.1	
# ::edge	work-01	ARG0	he	0	0.0	
# ::edge	work-01	duration	temporal-quantity	0	0.1	
(w / work-01 
      :ARG0 (h2 / he) 
      :duration (t / temporal-quantity 
            :quant 2 
            :unit (h / hour)))

# ::snt I ate pasta with a fork.
# ::tok I ate pasta with a fork .
# ::alignments 5-6|0.2 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.667
# ::node	0	eat-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	pasta	2-3
# ::node	0.2	fork	5-6
# ::root	0	eat-01
# ::edge	eat-01	ARG0	i	0	0.0	
# ::edge	eat-01	ARG1	pasta	0	0.1	
# ::edge	eat-01	instrument	fork	0	0.2	
(e / eat-01 
      :ARG0 (i / i) 
      :ARG1 (p / pasta) 
      :instrument (f / fork))

# ::snt Iraq launched a missile attack.
# ::tok Iraq launched a missile attack .
# ::alignments 4-5|0.1 3-4|0.1.0 1-2|0 0-1|0.0.0.0+0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.690
# ::node	0	launch-01	1-2
# ::node	0.0	country	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	"Iraq"	0-1
# ::node	0.1	attack-01	4-5
# ::node	0.1.0	missile	3-4
# ::root	0	launch-01
# ::edge	attack-01	instrument	missile	0.1	0.1.0	
# ::edge	country	name	name	0.0	0.0.0	
# ::edge	launch-01	ARG0	country	0	0.0	
# ::edge	launch-01	ARG1	attack-01	0	0.1	
# ::edge	name	op1	"Iraq"	0.0.0	0.0.0.0	
(l / launch-01 
      :ARG0 (c / country 
            :name (n / name 
                  :op1 "Iraq")) 
      :ARG1 (a / attack-01 
            :instrument (m / missile)))

# ::snt She talked to him in French.
# ::tok She talked to him in French .
# ::alignments 5-6|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.704
# ::node	0	talk-01	1-2
# ::node	0.0	she	0-1
# ::node	0.1	"France"	5-6
# ::root	0	talk-01
# ::edge	talk-01	ARG0	she	0	0.0	
# ::edge	talk-01	medium	"France"	0	0.1	
(t / talk-01 
      :ARG0 (s / she) 
      :medium "France")

# ::snt John announced the birth of his son on Twitter.
# ::tok John announced the birth of his son on Twitter .
# ::alignments 8-9|0.2.0.0+0.2.0+0.2 6-7|0.0.0.0+0.0.0 3-4|0.1 1-2|0 0-1|0.0.1.0+0.0.1+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.752
# ::node	0	announce-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	have-rel-role-91	6-7
# ::node	0.0.0.0	son	6-7
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	"John"	0-1
# ::node	0.1	birth-01	3-4
# ::node	0.2	product	8-9
# ::node	0.2.0	name	8-9
# ::node	0.2.0.0	"Twitter"	8-9
# ::root	0	announce-01
# ::edge	announce-01	ARG0	person	0	0.0	
# ::edge	announce-01	ARG1	birth-01	0	0.1	
# ::edge	announce-01	medium	product	0	0.2	
# ::edge	have-rel-role-91	ARG0	person	0.0.0	0.0	
# ::edge	have-rel-role-91	ARG2	son	0.0.0	0.0.0.0	
# ::edge	name	op1	"John"	0.0.1	0.0.1.0	
# ::edge	name	op1	"Twitter"	0.2.0	0.2.0.0	
# ::edge	person	name	name	0.0	0.0.1	
# ::edge	product	name	name	0.2	0.2.0	
(a / announce-01 
      :ARG0 (p2 / person 
            :ARG0-of (h / have-rel-role-91 
                  :ARG2 (s / son)) 
            :name (n2 / name 
                  :op1 "John")) 
      :ARG1 (b / birth-01) 
      :medium (p / product 
            :name (n / name 
                  :op1 "Twitter")))

# ::snt The boy sang very beautifully.
# ::tok The boy sang very beautifully .
# ::alignments 4-5|0.1 3-4|0.1.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.768
# ::node	0	sing-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	beautiful-02	4-5
# ::node	0.1.0	very	3-4
# ::root	0	sing-01
# ::edge	beautiful-02	ARG1	sing-01	0.1	0	
# ::edge	beautiful-02	degree	very	0.1	0.1.0	
# ::edge	sing-01	ARG0	boy	0	0.0	
(s / sing-01 
      :ARG0 (b2 / boy) 
      :ARG1-of (b / beautiful-02 
            :degree (v / very)))

# ::snt He decorated the room in a creative way.
# ::tok He decorated the room in a creative way .
# ::alignments 7-8|0.1.0 6-7|0.1.0.0 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.792
# ::node	0	decorate-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	room	3-4
# ::node	0.1.0	way	7-8
# ::node	0.1.0.0	creative	6-7
# ::root	0	decorate-01
# ::edge	decorate-01	ARG0	he	0	0.0	
# ::edge	decorate-01	ARG1	room	0	0.1	
# ::edge	room	purpose	way	0.1	0.1.0	
# ::edge	way	mod	creative	0.1.0	0.1.0.0	
(d / decorate-01 
      :ARG0 (h / he) 
      :ARG1 (r / room 
            :purpose (w / way 
                  :mod (c / creative))))

# ::snt The mayor proposed to lower crime by hiring more police officers.
# ::tok The mayor proposed to lower crime by hiring more police officers .
# ::alignments 10-11|0.0.1.0.1+0.0.1.0 9-10|0.0.1.0.0 8-9|0.0.0.0.0 7-8|0.0.2 5-6|0.0.1 4-5|0.0 2-3|0 1-2|0.0.0+0.0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:45.995
# ::node	0	propose-01	2-3
# ::node	0.0	low-04	4-5
# ::node	0.0.0	mayor	1-2
# ::node	0.0.0.0	have-org-role-91	1-2
# ::node	0.0.0.0.0	more	8-9
# ::node	0.0.1	crime-02	5-6
# ::node	0.0.1.0	have-org-role-91	10-11
# ::node	0.0.1.0.0	police	9-10
# ::node	0.0.1.0.1	officer	10-11
# ::node	0.0.2	hire-01	7-8
# ::root	0	propose-01
# ::edge	have-org-role-91	ARG0	more	0.0.0.0	0.0.0.0.0	
# ::edge	have-org-role-91	ARG1	police	0.0.1.0	0.0.1.0.0	
# ::edge	have-org-role-91	ARG2	mayor	0.0.0.0	0.0.0	
# ::edge	have-org-role-91	ARG2	officer	0.0.1.0	0.0.1.0.1	
# ::edge	have-org-role-91	purpose	crime-02	0.0.1.0	0.0.1	
# ::edge	low-04	ARG0	mayor	0.0	0.0.0	
# ::edge	low-04	ARG1	crime-02	0.0	0.0.1	
# ::edge	low-04	manner	hire-01	0.0	0.0.2	
# ::edge	propose-01	ARG1	low-04	0	0.0	
(p2 / propose-01 
      :ARG1 (l / low-04 
            :ARG0 (m2 / mayor 
                  :ARG2-of (h3 / have-org-role-91 
                        :ARG0 (m / more))) 
            :ARG1 (c / crime-02 
                  :purpose-of (h / have-org-role-91 
                        :ARG1 (p / police) 
                        :ARG2 (o / officer))) 
            :manner (h2 / hire-01)))

# ::snt Nicole went to England by train.
# ::tok Nicole went to England by train .
# ::alignments 5-6|0.2 3-4|0.1.0.0+0.1.0+0.1 1-2|0 0-1|0.0.0.0+0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.026
# ::node	0	go-02	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	name	0-1
# ::node	0.0.0.0	"Nicole"	0-1
# ::node	0.1	country	3-4
# ::node	0.1.0	name	3-4
# ::node	0.1.0.0	"England"	3-4
# ::node	0.2	train	5-6
# ::root	0	go-02
# ::edge	country	name	name	0.1	0.1.0	
# ::edge	go-02	ARG0	person	0	0.0	
# ::edge	go-02	ARG4	country	0	0.1	
# ::edge	go-02	manner	train	0	0.2	
# ::edge	name	op1	"England"	0.1.0	0.1.0.0	
# ::edge	name	op1	"Nicole"	0.0.0	0.0.0.0	
# ::edge	person	name	name	0.0	0.0.0	
(g / go-02 
      :ARG0 (p / person 
            :name (n2 / name 
                  :op1 "Nicole")) 
      :ARG4 (c / country 
            :name (n / name 
                  :op1 "England")) 
      :manner (t / train))

# ::snt He went to the store to buy wood for a new fence.
# ::tok He went to the store to buy wood for a new fence .
# ::alignments 11-12|0.2.0.0 10-11|0.2.0.0.0 7-8|0.2.0 6-7|0.2 4-5|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.065
# ::node	0	go-02	1-2
# ::node	0.0	he	0-1
# ::node	0.1	store	4-5
# ::node	0.2	buy-01	6-7
# ::node	0.2.0	wood	7-8
# ::node	0.2.0.0	fence	11-12
# ::node	0.2.0.0.0	new	10-11
# ::root	0	go-02
# ::edge	buy-01	ARG1	wood	0.2	0.2.0	
# ::edge	fence	mod	new	0.2.0.0	0.2.0.0.0	
# ::edge	go-02	ARG0	he	0	0.0	
# ::edge	go-02	ARG4	store	0	0.1	
# ::edge	go-02	purpose	buy-01	0	0.2	
# ::edge	wood	purpose	fence	0.2.0	0.2.0.0	
(g / go-02 
      :ARG0 (h / he) 
      :ARG4 (s / store) 
      :purpose (b / buy-01 
            :ARG1 (w / wood 
                  :purpose (f / fence 
                        :mod (n / new)))))

# ::snt The boy murmured softly to soothe the girl, because he worried about her.
# ::tok The boy murmured softly to soothe the girl , because he worried about her .
# ::alignments 12-13|0.0.2 11-12|0.0 10-11|0.0.0 9-10|0 7-8|0.0.0.0 1-2|0.0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.212
# ::node	0	cause-01	9-10
# ::node	0.0	worry-02	11-12
# ::node	0.0.0	he	10-11
# ::node	0.0.0.0	girl	7-8
# ::node	0.0.1	boy	1-2
# ::node	0.0.2	about	12-13
# ::root	0	cause-01
# ::edge	cause-01	ARG0	worry-02	0	0.0	
# ::edge	girl	domain	he	0.0.0.0	0.0.0	
# ::edge	worry-02	ARG0	he	0.0	0.0.0	
# ::edge	worry-02	ARG1	boy	0.0	0.0.1	
# ::edge	worry-02	time	about	0.0	0.0.2	
(c / cause-01 
      :ARG0 (w / worry-02 
            :ARG0 (h / he 
                  :domain-of (g / girl)) 
            :ARG1 (b / boy) 
            :time (a / about)))

# ::snt The game continued although it rained.
# ::tok The game continued although it rained .
# ::alignments 5-6|0.1 4-5|0.1.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.229
# ::node	0	continue-01	2-3
# ::node	0.0	game	1-2
# ::node	0.1	rain-01	5-6
# ::node	0.1.0	it	4-5
# ::root	0	continue-01
# ::edge	continue-01	ARG1	game	0	0.0	
# ::edge	continue-01	concession	rain-01	0	0.1	
# ::edge	rain-01	ARG1	it	0.1	0.1.0	
(c / continue-01 
      :ARG1 (g / game) 
      :concession (r / rain-01 
            :ARG1 (i / it)))

# ::snt The game continued despite the rain.
# ::tok The game continued despite the rain .
# ::alignments 5-6|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.242
# ::node	0	continue-01	2-3
# ::node	0.0	game	1-2
# ::node	0.1	rain-01	5-6
# ::root	0	continue-01
# ::edge	continue-01	ARG1	game	0	0.0	
# ::edge	continue-01	concession	rain-01	0	0.1	
(c / continue-01 
      :ARG1 (g / game) 
      :concession (r / rain-01))

# ::snt The game will continue even if it rains.
# ::tok The game will continue even if it rains .
# ::alignments 7-8|0.0.0 6-7|0.0 5-6|0.2 4-5|0.3 3-4|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.271
# ::node	0	continue-01	3-4
# ::node	0.0	it	6-7
# ::node	0.0.0	rain-01	7-8
# ::node	0.1	game	1-2
# ::node	0.2	cause-01	5-6
# ::node	0.3	even	4-5
# ::root	0	continue-01
# ::edge	cause-01	ARG1	continue-01	0.2	0	
# ::edge	continue-01	ARG0	it	0	0.0	
# ::edge	continue-01	ARG1	game	0	0.1	
# ::edge	continue-01	concession	even	0	0.3	
# ::edge	rain-01	ARG1	it	0.0.0	0.0	
(c2 / continue-01 
      :ARG0 (i / it 
            :ARG1-of (r / rain-01)) 
      :ARG1 (g / game) 
      :ARG1-of (c / cause-01) 
      :concession (e / even))

# ::snt They feared him even when he was behind bars.
# ::tok They feared him even when he was behind bars .
# ::alignments 8-9|0.1.0 7-8|0.1.0.0 5-6|0.1 3-4|0.2 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.301
# ::node	0	fear-01	1-2
# ::node	0.0	they	0-1
# ::node	0.1	he	5-6
# ::node	0.1.0	bar-01	8-9
# ::node	0.1.0.0	behind	7-8
# ::node	0.2	even	3-4
# ::root	0	fear-01
# ::edge	bar-01	ARG0	he	0.1.0	0.1	
# ::edge	behind	op1	bar-01	0.1.0.0	0.1.0	
# ::edge	fear-01	ARG0	they	0	0.0	
# ::edge	fear-01	ARG1	he	0	0.1	
# ::edge	fear-01	concession	even	0	0.2	
(f / fear-01 
      :ARG0 (t / they) 
      :ARG1 (h / he 
            :ARG0-of (b / bar-01 
                  :op-of (b2 / behind))) 
      :concession (e / even))

# ::snt The boy will sing if he is given money.
# ::tok The boy will sing if he is given money .
# ::alignments 8-9|0.0.0.0.0 7-8|0.0.0.0 5-6|0.0.0.0.1 4-5|0 3-4|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.332
# ::node	0	cause-01	4-5
# ::node	0.0	sing-01	3-4
# ::node	0.0.0	boy	1-2
# ::node	0.0.0.0	give-01	7-8
# ::node	0.0.0.0.0	money	8-9
# ::node	0.0.0.0.1	he	5-6
# ::root	0	cause-01
# ::edge	cause-01	ARG1	sing-01	0	0.0	
# ::edge	give-01	ARG0	boy	0.0.0.0	0.0.0	
# ::edge	give-01	ARG1	money	0.0.0.0	0.0.0.0.0	
# ::edge	give-01	ARG2	he	0.0.0.0	0.0.0.0.1	
# ::edge	sing-01	ARG0	boy	0.0	0.0.0	
(c / cause-01 
      :ARG1 (s / sing-01 
            :ARG0 (b / boy 
                  :ARG0-of (g / give-01 
                        :ARG1 (m / money) 
                        :ARG2 (h / he)))))

# ::snt If the boy is given money, he will sing.
# ::tok If the boy is given money , he will sing .
# ::alignments 9-10|0.1 7-8|0.1.0 5-6|0.0.0 4-5|0.0 2-3|0.0.1 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.419
# ::node	0	cause-01	0-1
# ::node	0.0	give-01	4-5
# ::node	0.0.0	money	5-6
# ::node	0.0.1	boy	2-3
# ::node	0.1	sing-01	9-10
# ::node	0.1.0	he	7-8
# ::root	0	cause-01
# ::edge	cause-01	ARG0	give-01	0	0.0	
# ::edge	cause-01	ARG1	sing-01	0	0.1	
# ::edge	give-01	ARG1	money	0.0	0.0.0	
# ::edge	give-01	ARG2	boy	0.0	0.0.1	
# ::edge	sing-01	ARG0	he	0.1	0.1.0	
(c / cause-01 
      :ARG0 (g / give-01 
            :ARG1 (m / money) 
            :ARG2 (b / boy)) 
      :ARG1 (s / sing-01 
            :ARG0 (h / he)))

# ::snt The boy will sing in case of a money donation.
# ::tok The boy will sing in case of a money donation .
# ::alignments 9-10|0.1.0 8-9|0.1.0.0 5-6|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.445
# ::node	0	sing-01	3-4
# ::node	0.0	boy	1-2
# ::node	0.1	case-03	5-6
# ::node	0.1.0	donate-01	9-10
# ::node	0.1.0.0	money	8-9
# ::root	0	sing-01
# ::edge	case-03	ARG1	donate-01	0.1	0.1.0	
# ::edge	donate-01	ARG1	money	0.1.0	0.1.0.0	
# ::edge	sing-01	ARG0	boy	0	0.0	
# ::edge	sing-01	topic	case-03	0	0.1	
(s / sing-01 
      :ARG0 (b / boy) 
      :topic (c / case-03 
            :ARG1 (d / donate-01 
                  :ARG1 (m / money))))

# ::snt The boy will sing unless he is given money.
# ::tok The boy will sing unless he is given money .
# ::alignments 8-9|0.0.0.0 7-8|0.0.0 5-6|0.0.0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.469
# ::node	0	sing-01	3-4
# ::node	0.0	boy	1-2
# ::node	0.0.0	give-01	7-8
# ::node	0.0.0.0	money	8-9
# ::node	0.0.0.1	he	5-6
# ::root	0	sing-01
# ::edge	give-01	ARG0	boy	0.0.0	0.0	
# ::edge	give-01	ARG1	money	0.0.0	0.0.0.0	
# ::edge	give-01	ARG2	he	0.0.0	0.0.0.1	
# ::edge	sing-01	ARG0	boy	0	0.0	
(s / sing-01 
      :ARG0 (b / boy 
            :ARG0-of (g / give-01 
                  :ARG1 (m / money) 
                  :ARG2 (h / he))))

# ::snt Unless the boy is given money, he will sing.
# ::tok Unless the boy is given money , he will sing .
# ::alignments 9-10|0 7-8|0.0 5-6|0.1.0 4-5|0.1 2-3|0.1.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.542
# ::node	0	sing-01	9-10
# ::node	0.0	he	7-8
# ::node	0.1	give-01	4-5
# ::node	0.1.0	money	5-6
# ::node	0.1.1	boy	2-3
# ::root	0	sing-01
# ::edge	give-01	ARG1	money	0.1	0.1.0	
# ::edge	give-01	ARG2	boy	0.1	0.1.1	
# ::edge	sing-01	ARG0	he	0	0.0	
# ::edge	sing-01	time	give-01	0	0.1	
(s / sing-01 
      :ARG0 (h / he) 
      :time (g / give-01 
            :ARG1 (m / money) 
            :ARG2 (b / boy)))

# ::snt The torpedo struck, causing the ship to be damaged.
# ::tok The torpedo struck , causing the ship to be damaged .
# ::alignments 9-10|0.1 6-7|0.1.0 4-5|0 2-3|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.568
# ::node	0	cause-01	4-5
# ::node	0.0	torpedo-01	1-2
# ::node	0.0.0	strike-01	2-3
# ::node	0.1	damage-01	9-10
# ::node	0.1.0	ship	6-7
# ::root	0	cause-01
# ::edge	cause-01	ARG0	torpedo-01	0	0.0	
# ::edge	cause-01	ARG1	damage-01	0	0.1	
# ::edge	damage-01	ARG1	ship	0.1	0.1.0	
# ::edge	strike-01	ARG2	torpedo-01	0.0.0	0.0	
(c / cause-01 
      :ARG0 (t / torpedo-01 
            :ARG2-of (s2 / strike-01)) 
      :ARG1 (d / damage-01 
            :ARG1 (s / ship)))

# ::snt The torpedo struck, causing damage to the ship.
# ::tok The torpedo struck , causing damage to the ship .
# ::alignments 8-9|0.1.0 5-6|0.1 4-5|0 2-3|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.592
# ::node	0	cause-01	4-5
# ::node	0.0	torpedo-01	1-2
# ::node	0.0.0	strike-01	2-3
# ::node	0.1	damage-01	5-6
# ::node	0.1.0	ship	8-9
# ::root	0	cause-01
# ::edge	cause-01	ARG0	torpedo-01	0	0.0	
# ::edge	cause-01	ARG1	damage-01	0	0.1	
# ::edge	damage-01	ARG1	ship	0.1	0.1.0	
# ::edge	strike-01	ARG2	torpedo-01	0.0.0	0.0	
(c / cause-01 
      :ARG0 (t / torpedo-01 
            :ARG2-of (s2 / strike-01)) 
      :ARG1 (d / damage-01 
            :ARG1 (s / ship)))

# ::snt The torpedo struck, damaging the ship.
# ::tok The torpedo struck , damaging the ship .
# ::alignments 6-7|0.0.0.0 4-5|0.0.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.609
# ::node	0	strike-01	2-3
# ::node	0.0	torpedo-01	1-2
# ::node	0.0.0	damage-01	4-5
# ::node	0.0.0.0	ship	6-7
# ::root	0	strike-01
# ::edge	damage-01	ARG0	torpedo-01	0.0.0	0.0	
# ::edge	damage-01	ARG1	ship	0.0.0	0.0.0.0	
# ::edge	strike-01	ARG2	torpedo-01	0	0.0	
(s2 / strike-01 
      :ARG2 (t / torpedo-01 
            :ARG0-of (d / damage-01 
                  :ARG1 (s / ship))))

# ::snt The boy provided chocolate to the girl.
# ::tok The boy provided chocolate to the girl .
# ::alignments 6-7|0.2 3-4|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.627
# ::node	0	provide-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	chocolate	3-4
# ::node	0.2	girl	6-7
# ::root	0	provide-01
# ::edge	provide-01	ARG0	boy	0	0.0	
# ::edge	provide-01	ARG1	chocolate	0	0.1	
# ::edge	provide-01	ARG2	girl	0	0.2	
(p / provide-01 
      :ARG0 (b / boy) 
      :ARG1 (c / chocolate) 
      :ARG2 (g / girl))

# ::snt The boy provided the girl with chocolate.
# ::tok The boy provided the girl with chocolate .
# ::alignments 6-7|0.2 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.703
# ::node	0	provide-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	girl	4-5
# ::node	0.2	chocolate	6-7
# ::root	0	provide-01
# ::edge	provide-01	ARG0	boy	0	0.0	
# ::edge	provide-01	ARG1	girl	0	0.1	
# ::edge	provide-01	ARG2	chocolate	0	0.2	
(p / provide-01 
      :ARG0 (b / boy) 
      :ARG1 (g / girl) 
      :ARG2 (c / chocolate))

# ::snt They built the bridge in Maryland in December.
# ::tok They built the bridge in Maryland in December .
# ::alignments 7-8|0.3.0+0.3 5-6|0.2.0.0+0.2.0+0.2 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.750
# ::node	0	build-01	1-2
# ::node	0.0	they	0-1
# ::node	0.1	bridge	3-4
# ::node	0.2	state	5-6
# ::node	0.2.0	name	5-6
# ::node	0.2.0.0	"Maryland"	5-6
# ::node	0.3	date-entity	7-8
# ::node	0.3.0	12	7-8
# ::root	0	build-01
# ::edge	build-01	ARG0	they	0	0.0	
# ::edge	build-01	ARG1	bridge	0	0.1	
# ::edge	build-01	location	date-entity	0	0.3	
# ::edge	build-01	location	state	0	0.2	
# ::edge	date-entity	month	12	0.3	0.3.0	
# ::edge	name	op1	"Maryland"	0.2.0	0.2.0.0	
# ::edge	state	name	name	0.2	0.2.0	
(b2 / build-01 
      :ARG0 (t / they) 
      :ARG1 (b / bridge) 
      :location (s / state 
            :name (n / name 
                  :op1 "Maryland")) 
      :location (d / date-entity 
            :month 12))

# ::snt The bridge was built by them in Maryland in December.
# ::tok The bridge was built by them in Maryland in December .
# ::alignments 9-10|0.1.1.0+0.1.1 7-8|0.1.0.0+0.1.0+0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.783
# ::node	0	build-01	3-4
# ::node	0.0	bridge	1-2
# ::node	0.1	state	7-8
# ::node	0.1.0	name	7-8
# ::node	0.1.0.0	"Maryland"	7-8
# ::node	0.1.1	date-entity	9-10
# ::node	0.1.1.0	12	9-10
# ::root	0	build-01
# ::edge	build-01	ARG1	bridge	0	0.0	
# ::edge	build-01	location	state	0	0.1	
# ::edge	date-entity	month	12	0.1.1	0.1.1.0	
# ::edge	name	op1	"Maryland"	0.1.0	0.1.0.0	
# ::edge	state	name	name	0.1	0.1.0	
# ::edge	state	time	date-entity	0.1	0.1.1	
(b / build-01 
      :ARG1 (b2 / bridge) 
      :location (s / state 
            :name (n / name 
                  :op1 "Maryland") 
            :time (d / date-entity 
                  :month 12)))

# ::snt the engine of the car
# ::tok the engine of the car
# ::alignments 4-5|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.793
# ::node	0	engine	1-2
# ::node	0.0	car	4-5
# ::root	0	engine
(e / engine 
      :part-of (c / car))

# ::snt the car’s engine
# ::tok the car 's engine
# ::alignments 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.799
# ::node	0	engine	3-4
# ::node	0.0	car	1-2
# ::root	0	engine
# ::edge	engine	domain	car	0	0.0	
(e / engine 
      :domain (c / car))

# ::snt a unit of the company
# ::tok a unit of the company
# ::alignments 4-5|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.808
# ::node	0	unit	1-2
# ::node	0.0	company	4-5
# ::root	0	unit
# ::edge	unit	location	company	0	0.0	
(u / unit 
      :location (c / company))

# ::snt the company’s unit
# ::tok the company 's unit
# ::alignments 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.815
# ::node	0	company	1-2
# ::node	0.0	unit	3-4
# ::root	0	company
(c / company 
      :source-of (u / unit))

# ::snt the south of France
# ::tok the south of France
# ::alignments 3-4|0.0.0.0+0.0.0+0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.828
# ::node	0	south	1-2
# ::node	0.0	country	3-4
# ::node	0.0.0	name	3-4
# ::node	0.0.0.0	"France"	3-4
# ::root	0	south
(s / south 
      :part-of (c / country 
            :name (n / name 
                  :op1 "France")))

# ::snt southern France
# ::tok southern France
# ::alignments 0-2|0.0.0+0.0.1+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.837
# ::node	0	country-region	0-2
# ::node	0.0	name	0-2
# ::node	0.0.0	"Southern"	0-2
# ::node	0.0.1	"France"	0-2
# ::root	0	country-region
# ::edge	country-region	name	name	0	0.0	
# ::edge	name	op1	"Southern"	0.0	0.0.0	
# ::edge	name	op2	"France"	0.0	0.0.1	
(c / country-region 
      :name (n / name 
            :op1 "Southern" 
            :op2 "France"))

# ::snt The boy won the race in the Olympics.
# ::tok The boy won the race in the Olympics .
# ::alignments 7-8|0.2.0.0+0.2.0+0.2 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.861
# ::node	0	win-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	race	4-5
# ::node	0.2	game	7-8
# ::node	0.2.0	name	7-8
# ::node	0.2.0.0	"Olympics"	7-8
# ::root	0	win-01
# ::edge	game	name	name	0.2	0.2.0	
# ::edge	name	op1	"Olympics"	0.2.0	0.2.0.0	
# ::edge	win-01	ARG0	boy	0	0.0	
# ::edge	win-01	ARG1	race	0	0.1	
# ::edge	win-01	location	game	0	0.2	
(w / win-01 
      :ARG0 (b / boy) 
      :ARG1 (r / race) 
      :location (g / game 
            :name (n / name 
                  :op1 "Olympics")))

# ::snt a ring of gold
# ::tok a ring of gold
# ::alignments 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.869
# ::node	0	ring	1-2
# ::node	0.0	gold	3-4
# ::root	0	ring
(r / ring 
      :consist-of (g / gold))

# ::snt a team of monkeys
# ::tok a team of monkeys
# ::alignments 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.877
# ::node	0	team	1-2
# ::node	0.0	monkey	3-4
# ::root	0	team
(t / team 
      :consist-of (m / monkey))

# ::snt companies like IBM and Google
# ::tok companies like IBM and Google
# ::alignments 4-5|0.0.1.0.0+0.0.1.0+0.0.1 3-4|0.0 2-3|0.0.0.0.0+0.0.0.0+0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.905
# ::node	0	company	0-1
# ::node	0.0	and	3-4
# ::node	0.0.0	company	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	"IBM"	2-3
# ::node	0.0.1	company	4-5
# ::node	0.0.1.0	name	4-5
# ::node	0.0.1.0.0	"Google"	4-5
# ::root	0	company
# ::edge	and	op1	company	0.0	0.0.0	
# ::edge	and	op2	company	0.0	0.0.1	
# ::edge	company	example	and	0	0.0	
# ::edge	company	name	name	0.0.0	0.0.0.0	
# ::edge	company	name	name	0.0.1	0.0.1.0	
# ::edge	name	op1	"Google"	0.0.1.0	0.0.1.0.0	
# ::edge	name	op1	"IBM"	0.0.0.0	0.0.0.0.0	
(c3 / company 
      :example (a / and 
            :op1 (c2 / company 
                  :name (n2 / name 
                        :op1 "IBM")) 
            :op2 (c / company 
                  :name (n / name 
                        :op1 "Google"))))

# ::snt He drove west.
# ::tok He drove west .
# ::alignments 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.916
# ::node	0	drive-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	west	2-3
# ::root	0	drive-01
# ::edge	drive-01	ARG0	he	0	0.0	
# ::edge	drive-01	direction	west	0	0.1	
(d / drive-01 
      :ARG0 (h / he) 
      :direction (w / west))

# ::snt We met three times.
# ::tok We met three times .
# ::alignments 3-4|0.1 2-3|0.1.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.930
# ::node	0	meet-03	1-2
# ::node	0.0	we	0-1
# ::node	0.1	time	3-4
# ::node	0.1.0	3	2-3
# ::root	0	meet-03
# ::edge	meet-03	ARG0	we	0	0.0	
# ::edge	meet-03	ARG1	time	0	0.1	
# ::edge	time	quant	3	0.1	0.1.0	
(m / meet-03 
      :ARG0 (w / we) 
      :ARG1 (t / time 
            :quant 3))

# ::snt twice a year
# ::tok twice a year
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.935
# ::node	0	year	2-3
# ::root	0	year
(y / year)

# ::snt We play bridge every Wednesday afternoon.
# ::tok We play bridge every Wednesday afternoon .
# ::alignments 5-6|0.0.0 4-5|0.0.0.0.0 3-4|0.0.0.0 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.961
# ::node	0	play-01	1-2
# ::node	0.0	we	0-1
# ::node	0.0.0	afternoon	5-6
# ::node	0.0.0.0	every	3-4
# ::node	0.0.0.0.0	wednesday	4-5
# ::node	0.1	bridge	2-3
# ::root	0	play-01
# ::edge	afternoon	mod	every	0.0.0	0.0.0.0	
# ::edge	play-01	ARG0	we	0	0.0	
# ::edge	play-01	ARG1	bridge	0	0.1	
# ::edge	we	part	afternoon	0.0	0.0.0	
# ::edge	wednesday	mod	every	0.0.0.0.0	0.0.0.0	
(p / play-01 
      :ARG0 (w2 / we 
            :part (a / afternoon 
                  :mod (e / every 
                        :mod-of (w / wednesday)))) 
      :ARG1 (b / bridge))

# ::snt The road goes on forever.
# ::tok The road goes on forever .
# ::alignments 4-5|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.970
# ::node	0	road	1-2
# ::node	0.0	forever	4-5
# ::root	0	road
# ::edge	road	mod	forever	0	0.0	
(r / road 
      :mod (f / forever))

# ::snt The boy from the college sang.
# ::tok The boy from the college sang .
# ::alignments 5-6|0 4-5|0.1 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.982
# ::node	0	sing-01	5-6
# ::node	0.0	boy	1-2
# ::node	0.1	college	4-5
# ::root	0	sing-01
# ::edge	sing-01	ARG0	boy	0	0.0	
# ::edge	sing-01	ARG1	college	0	0.1	
(s / sing-01 
      :ARG0 (b / boy) 
      :ARG1 (c / college))

# ::snt The singing boy from the college
# ::tok The singing boy from the college
# ::alignments 5-6|0.1 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:46.993
# ::node	0	sing-01	1-2
# ::node	0.0	boy	2-3
# ::node	0.1	college	5-6
# ::root	0	sing-01
# ::edge	sing-01	ARG0	boy	0	0.0	
# ::edge	sing-01	ARG1	college	0	0.1	
(s / sing-01 
      :ARG0 (b / boy) 
      :ARG1 (c / college))

# ::snt There is a boy from the college who sang.
# ::tok There is a boy from the college who sang .
# ::alignments 8-9|0 6-7|0.0 3-4|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.021
# ::node	0	sing-01	8-9
# ::node	0.0	college	6-7
# ::node	0.1	boy	3-4
# ::root	0	sing-01
# ::edge	sing-01	ARG0	college	0	0.0	
# ::edge	sing-01	ARG1	boy	0	0.1	
(s / sing-01 
      :ARG0 (c / college) 
      :ARG1 (b / boy))

# ::snt The college that the singing boy came from
# ::tok The college that the singing boy came from
# ::alignments 6-7|0.0 5-6|0.0.0 4-5|0.0.0.0 2-3|0.0.0.1 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.064
# ::node	0	college	1-2
# ::node	0.0	come-01	6-7
# ::node	0.0.0	boy	5-6
# ::node	0.0.0.0	sing-01	4-5
# ::node	0.0.0.1	that	2-3
# ::root	0	college
(c2 / college 
      :ARG0-of (c / come-01 
            :ARG1 (b / boy 
                  :ARG1-of (s / sing-01) 
                  :mod (t / that))))

# ::snt The girl left because the boy arrived.
# ::tok The girl left because the boy arrived .
# ::alignments 6-7|0.0 5-6|0.0.1 3-4|0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.081
# ::node	0	cause-01	3-4
# ::node	0.0	arrive-01	6-7
# ::node	0.0.0	girl	1-2
# ::node	0.0.1	boy	5-6
# ::root	0	cause-01
# ::edge	arrive-01	ARG0	girl	0.0	0.0.0	
# ::edge	arrive-01	ARG1	boy	0.0	0.0.1	
# ::edge	cause-01	ARG0	arrive-01	0	0.0	
(c / cause-01 
      :ARG0 (a / arrive-01 
            :ARG0 (g / girl) 
            :ARG1 (b / boy)))

# ::snt We know the knife that is in the drawer. (???)
# ::tok We know the knife that is in the drawer . ( ? ? ? )
# ::alignments 8-9|0.2 4-5|0.1.0 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.145
# ::node	0	know-01	1-2
# ::node	0.0	we	0-1
# ::node	0.1	knife	3-4
# ::node	0.1.0	that	4-5
# ::node	0.2	drawer	8-9
# ::root	0	know-01
# ::edge	knife	mod	that	0.1	0.1.0	
# ::edge	know-01	ARG0	we	0	0.0	
# ::edge	know-01	ARG1	knife	0	0.1	
# ::edge	know-01	ARG2	drawer	0	0.2	
(k2 / know-01 
      :ARG0 (w / we) 
      :ARG1 (k / knife 
            :mod (t / that)) 
      :ARG2 (d / drawer))

# ::snt We know the drawer where the knife is.  (???)
# ::tok We know the drawer where the knife is . ( ? ? ? )
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.147
# THERE WAS AN EXCEPTION IN THE PARSER.  Returning an empty graph.
# java.lang.AssertionError: assertion failed
# 	at scala.Predef$.assert(Predef.scala:165)
# 	at edu.cmu.lti.nlp.amr.Annotation$$anonfun$makeLeftRight$1.apply$mcVI$sp(Annotation.scala:70)
# 	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
# 	at edu.cmu.lti.nlp.amr.Annotation.makeLeftRight(Annotation.scala:51)
# 	at edu.cmu.lti.nlp.amr.Annotation.<init>(Annotation.scala:89)
# 	at edu.cmu.lti.nlp.amr.Input.<init>(Input.scala:19)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:200)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:78)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:194)
# 	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:192)
# 	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
# 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
# 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
# 	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
# 	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:192)
# 	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
(a / amr-empty)

# ::snt We know the knife is in the drawer.
# ::tok We know the knife is in the drawer .
# ::alignments 7-8|0.2 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.192
# ::node	0	know-01	1-2
# ::node	0.0	we	0-1
# ::node	0.1	knife	3-4
# ::node	0.2	drawer	7-8
# ::root	0	know-01
# ::edge	know-01	ARG0	we	0	0.0	
# ::edge	know-01	ARG1	knife	0	0.1	
# ::edge	know-01	condition	drawer	0	0.2	
(k2 / know-01 
      :ARG0 (w / we) 
      :ARG1 (k / knife) 
      :condition (d / drawer))

# ::snt We know the knife was not in the drawer yesterday.
# ::tok We know the knife was not in the drawer yesterday .
# ::alignments 9-10|0.1.0 8-9|0.1.0.0 3-4|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.246
# ::node	0	know-01	1-2
# ::node	0.0	we	0-1
# ::node	0.1	knife	3-4
# ::node	0.1.0	yesterday	9-10
# ::node	0.1.0.0	drawer	8-9
# ::root	0	know-01
# ::edge	knife	time	yesterday	0.1	0.1.0	
# ::edge	know-01	ARG0	we	0	0.0	
# ::edge	know-01	ARG1	knife	0	0.1	
# ::edge	yesterday	mod	drawer	0.1.0	0.1.0.0	
(k2 / know-01 
      :ARG0 (w / we) 
      :ARG1 (k / knife 
            :time (y / yesterday 
                  :mod (d / drawer))))

# ::snt The girl adjusted the machine.
# ::tok The girl adjusted the machine .
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.258
# ::node	0	adjust-01	2-3
# ::node	0.0	girl	1-2
# ::node	0.1	machine	4-5
# ::root	0	adjust-01
# ::edge	adjust-01	ARG0	girl	0	0.0	
# ::edge	adjust-01	ARG1	machine	0	0.1	
(a / adjust-01 
      :ARG0 (g / girl) 
      :ARG1 (m / machine))

# ::snt The girl made an adjustment to the machine.
# ::tok The girl made an adjustment to the machine .
# ::alignments 7-8|0.1 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.289
# ::node	0	adjust-01	4-5
# ::node	0.0	girl	1-2
# ::node	0.1	machine	7-8
# ::root	0	adjust-01
# ::edge	adjust-01	ARG0	girl	0	0.0	
# ::edge	adjust-01	ARG1	machine	0	0.1	
(a / adjust-01 
      :ARG0 (g / girl) 
      :ARG1 (m / machine))

# ::snt The boy bathed.
# ::tok The boy bathed .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.295
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt The boy took a bath.
# ::tok The boy took a bath .
# ::alignments 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.306
# ::node	0	bathe-01	4-5
# ::node	0.0	boy	1-2
# ::root	0	bathe-01
# ::edge	bathe-01	ARG0	boy	0	0.0	
(b / bathe-01 
      :ARG0 (b2 / boy))

# ::snt The boy looked up the answer.
# ::tok The boy looked up the answer .
# ::alignments 5-6|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.320
# ::node	0	answer-01	5-6
# ::node	0.0	look-01	2-3
# ::node	0.0.0	boy	1-2
# ::root	0	answer-01
(a / answer-01 
      :ARG1-of (l / look-01 
            :ARG0 (b / boy)))

# ::snt The boy looked the answer up.
# ::tok The boy looked the answer up .
# ::alignments 4-5|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.335
# ::node	0	answer-01	4-5
# ::node	0.0	look-01	2-3
# ::node	0.0.0	boy	1-2
# ::root	0	answer-01
(a / answer-01 
      :ARG1-of (l / look-01 
            :ARG0 (b / boy)))

# ::snt The nation defaulted in June.
# ::tok The nation defaulted in June .
# ::alignments 4-5|0.1.0+0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.352
# ::node	0	default-01	2-3
# ::node	0.0	nation	1-2
# ::node	0.1	date-entity	4-5
# ::node	0.1.0	6	4-5
# ::root	0	default-01
# ::edge	date-entity	month	6	0.1	0.1.0	
# ::edge	default-01	ARG1	nation	0	0.0	
# ::edge	default-01	time	date-entity	0	0.1	
(d2 / default-01 
      :ARG1 (n / nation) 
      :time (d / date-entity 
            :month 6))

# ::snt The man died in his house.
# ::tok The man died in his house .
# ::alignments 5-6|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.364
# ::node	0	die-01	2-3
# ::node	0.0	man	1-2
# ::node	0.1	house	5-6
# ::root	0	die-01
# ::edge	die-01	ARG1	man	0	0.0	
# ::edge	die-01	location	house	0	0.1	
(d / die-01 
      :ARG1 (m / man) 
      :location (h / house))

# ::snt The nation defaulted after the war.
# ::tok The nation defaulted after the war .
# ::alignments 5-6|0.1.0 3-4|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.380
# ::node	0	default-01	2-3
# ::node	0.0	nation	1-2
# ::node	0.1	after	3-4
# ::node	0.1.0	war	5-6
# ::root	0	default-01
# ::edge	after	op1	war	0.1	0.1.0	
# ::edge	default-01	ARG1	nation	0	0.0	
# ::edge	default-01	time	after	0	0.1	
(d / default-01 
      :ARG1 (n / nation) 
      :time (a / after 
            :op1 (w / war)))

# ::snt The man died near his house.
# ::tok The man died near his house .
# ::alignments 5-6|0.1.0 3-4|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.395
# ::node	0	die-01	2-3
# ::node	0.0	man	1-2
# ::node	0.1	near-02	3-4
# ::node	0.1.0	house	5-6
# ::root	0	die-01
# ::edge	die-01	ARG1	man	0	0.0	
# ::edge	near-02	ARG1	die-01	0.1	0	
# ::edge	near-02	ARG2	house	0.1	0.1.0	
(d / die-01 
      :ARG1 (m / man) 
      :ARG1-of (n / near-02 
            :ARG2 (h / house)))

# ::snt The man died between the house and the river.
# ::tok The man died between the house and the river .
# ::alignments 8-9|0.0.0 6-7|0.0 5-6|0.2.0 3-4|0.2 2-3|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.423
# ::node	0	die-01	2-3
# ::node	0.0	and	6-7
# ::node	0.0.0	river	8-9
# ::node	0.1	man	1-2
# ::node	0.2	between	3-4
# ::node	0.2.0	house	5-6
# ::root	0	die-01
# ::edge	and	op1	river	0.0	0.0.0	
# ::edge	between	op1	house	0.2	0.2.0	
# ::edge	die-01	ARG0	and	0	0.0	
# ::edge	die-01	ARG1	man	0	0.1	
# ::edge	die-01	location	between	0	0.2	
(d / die-01 
      :ARG0 (a / and 
            :op1 (r / river)) 
      :ARG1 (m / man) 
      :location (b / between 
            :op1 (h / house)))

# ::snt He was sued in the case.
# ::tok He was sued in the case .
# ::alignments 5-6|0.1 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.434
# ::node	0	sue-02	2-3
# ::node	0.0	he	0-1
# ::node	0.1	case-03	5-6
# ::root	0	sue-02
# ::edge	sue-02	ARG1	he	0	0.0	
# ::edge	sue-02	topic	case-03	0	0.1	
(s / sue-02 
      :ARG1 (h / he) 
      :topic (c / case-03))

# ::snt The brief was filed on behalf of the government.
# ::tok The brief was filed on behalf of the government .
# ::alignments 8-9|0.1.0+0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.454
# ::node	0	file-01	3-4
# ::node	0.0	brief	1-2
# ::node	0.1	government-organization	8-9
# ::node	0.1.0	govern-01	8-9
# ::root	0	file-01
# ::edge	file-01	ARG1	brief	0	0.0	
# ::edge	govern-01	ARG0	government-organization	0.1.0	0.1	
# ::edge	government-organization	prep-on-behalf	file-01	0.1	0	
(f / file-01 
      :ARG1 (b / brief) 
      :prep-on-behalf-of (g / government-organization 
            :ARG0-of (g2 / govern-01)))

# ::snt According to government sources, the killing happened yesterday.
# ::tok According to government sources , the killing happened yesterday .
# ::alignments 8-9|0.0 6-7|0 3-4|0.0.0.1 2-3|0.0.0.0+0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.478
# ::node	0	kill-01	6-7
# ::node	0.0	yesterday	8-9
# ::node	0.0.0	government-organization	2-3
# ::node	0.0.0.0	govern-01	2-3
# ::node	0.0.0.1	source	3-4
# ::root	0	kill-01
# ::edge	govern-01	ARG0	government-organization	0.0.0.0	0.0.0	
# ::edge	kill-01	time	yesterday	0	0.0	
# ::edge	source	mod	government-organization	0.0.0.1	0.0.0	
# ::edge	yesterday	op1	government-organization	0.0	0.0.0	
(k / kill-01 
      :time (y / yesterday 
            :op1 (g / government-organization 
                  :ARG0-of (g2 / govern-01) 
                  :mod-of (s / source))))

# ::snt Government sources said that the killing happened yesterday.
# ::tok Government sources said that the killing happened yesterday .
# ::alignments 7-8|0.0.0.1.0 5-6|0.0.0.1 3-4|0.1 2-3|0 1-2|0.0 0-1|0.0.0.0+0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.512
# ::node	0	say-01	2-3
# ::node	0.0	source	1-2
# ::node	0.0.0	government-organization	0-1
# ::node	0.0.0.0	govern-01	0-1
# ::node	0.0.0.1	kill-01	5-6
# ::node	0.0.0.1.0	yesterday	7-8
# ::node	0.1	that	3-4
# ::root	0	say-01
# ::edge	govern-01	ARG0	government-organization	0.0.0.0	0.0.0	
# ::edge	kill-01	ARG2	government-organization	0.0.0.1	0.0.0	
# ::edge	kill-01	time	yesterday	0.0.0.1	0.0.0.1.0	
# ::edge	say-01	ARG0	source	0	0.0	
# ::edge	say-01	ARG1	that	0	0.1	
# ::edge	source	mod	government-organization	0.0	0.0.0	
(s / say-01 
      :ARG0 (s2 / source 
            :mod (g / government-organization 
                  :ARG0-of (g2 / govern-01) 
                  :ARG2-of (k / kill-01 
                        :time (y / yesterday)))) 
      :ARG1 (t / that))

# ::snt The boy believes.
# ::tok The boy believes .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.519
# ::node	0	believe-01	2-3
# ::node	0.0	boy	1-2
# ::root	0	believe-01
# ::edge	believe-01	ARG0	boy	0	0.0	
(b / believe-01 
      :ARG0 (b2 / boy))

# ::snt the boy who believes
# ::tok the boy who believes
# ::alignments 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.526
# ::node	0	believe-01	3-4
# ::node	0.0	boy	1-2
# ::root	0	believe-01
# ::edge	believe-01	ARG0	boy	0	0.0	
(b / believe-01 
      :ARG0 (b2 / boy))

# ::snt the black car
# ::tok the black car
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.531
# ::node	0	car	2-3
# ::root	0	car
(c / car)

# ::snt the car that is not black
# ::tok the car that is not black
# ::alignments 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.539
# ::node	0	car	1-2
# ::node	0.0	that	2-3
# ::root	0	car
# ::edge	car	mod	that	0	0.0	
(c / car 
      :mod (t / that))

# ::snt the Shanghai legal system
# ::tok the Shanghai legal system
# ::alignments 3-4|0 2-3|0.0 1-2|0.1.0.0+0.1.0+0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.554
# ::node	0	system	3-4
# ::node	0.0	legal-02	2-3
# ::node	0.1	city	1-2
# ::node	0.1.0	name	1-2
# ::node	0.1.0.0	"Shanghai"	1-2
# ::root	0	system
# ::edge	city	name	name	0.1	0.1.0	
# ::edge	legal-02	ARG1	system	0.0	0	
# ::edge	name	op1	"Shanghai"	0.1.0	0.1.0.0	
# ::edge	system	mod	city	0	0.1	
(s / system 
      :ARG1-of (l / legal-02) 
      :mod (c / city 
            :name (n / name 
                  :op1 "Shanghai")))

# ::snt the boy who wants to believe the girl
# ::tok the boy who wants to believe the girl
# ::alignments 7-8|0.0.0.0 5-6|0.0.0 3-4|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.570
# ::node	0	boy	1-2
# ::node	0.0	want-01	3-4
# ::node	0.0.0	believe-01	5-6
# ::node	0.0.0.0	girl	7-8
# ::root	0	boy
(b2 / boy 
      :ARG0-of (w / want-01 
            :ARG1 (b / believe-01 
                  :ARG1 (g / girl))))

# ::snt the boy and the girl
# ::tok the boy and the girl
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.581
# ::node	0	and	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	girl	4-5
# ::root	0	and
# ::edge	and	op1	boy	0	0.0	
# ::edge	and	op2	girl	0	0.1	
(a / and 
      :op1 (b / boy) 
      :op2 (g / girl))

# ::snt either the boy, the girl, or the dog
# ::tok either the boy , the girl , or the dog
# ::alignments 9-10|0.2 7-8|0 5-6|0.1 2-3|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.602
# ::node	0	or	7-8
# ::node	0.0	boy	2-3
# ::node	0.0.0	either	0-1
# ::node	0.1	girl	5-6
# ::node	0.2	dog	9-10
# ::root	0	or
# ::edge	either	op1	boy	0.0.0	0.0	
# ::edge	or	op1	boy	0	0.0	
# ::edge	or	op2	girl	0	0.1	
# ::edge	or	op3	dog	0	0.2	
(o / or 
      :op1 (b / boy 
            :op-of (e / either)) 
      :op2 (g / girl) 
      :op3 (d / dog))

# ::snt the big, heavy ball
# ::tok the big , heavy ball
# ::alignments 4-5|0 3-4|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.612
# ::node	0	ball	4-5
# ::node	0.0	heavy	3-4
# ::node	0.0.0	big	1-2
# ::root	0	ball
# ::edge	ball	mod	heavy	0	0.0	
# ::edge	heavy	poss	big	0.0	0.0.0	
(b / ball 
      :mod (h / heavy 
            :poss (b2 / big)))

# ::snt the big and heavy ball
# ::tok the big and heavy ball
# ::alignments 4-5|0 3-4|0.0 2-3|0.1 1-2|0.1.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.626
# ::node	0	ball	4-5
# ::node	0.0	heavy	3-4
# ::node	0.1	and	2-3
# ::node	0.1.0	big	1-2
# ::root	0	ball
# ::edge	and	op1	big	0.1	0.1.0	
# ::edge	and	op2	ball	0.1	0	
# ::edge	ball	mod	heavy	0	0.0	
(b / ball 
      :mod (h / heavy) 
      :op-of (a / and 
            :op1 (b2 / big)))

# ::snt There was shouting, and the boy left.
# ::tok There was shouting , and the boy left .
# ::alignments 6-7|0.0 4-5|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.637
# ::node	0	and	4-5
# ::node	0.0	boy	6-7
# ::root	0	and
# ::edge	and	op1	boy	0	0.0	
(a / and 
      :op1 (b / boy))

# ::snt There was shouting, but the boy stayed.
# ::tok There was shouting , but the boy stayed .
# ::alignments 7-8|0.0 6-7|0.0.0 4-5|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.650
# ::node	0	contrast-01	4-5
# ::node	0.0	stay-01	7-8
# ::node	0.0.0	boy	6-7
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	stay-01	0	0.0	
# ::edge	stay-01	ARG0	boy	0.0	0.0.0	
(c / contrast-01 
      :ARG2 (s / stay-01 
            :ARG0 (b / boy)))

# ::snt But the boy stayed.
# ::tok But the boy stayed .
# ::alignments 3-4|0.0 2-3|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.660
# ::node	0	contrast-01	0-1
# ::node	0.0	stay-01	3-4
# ::node	0.0.0	boy	2-3
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	stay-01	0	0.0	
# ::edge	stay-01	ARG0	boy	0.0	0.0.0	
(c / contrast-01 
      :ARG2 (s / stay-01 
            :ARG0 (b / boy)))

# ::snt The boy shouted and left.
# ::tok The boy shouted and left .
# ::alignments 3-4|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.671
# ::node	0	and	3-4
# ::node	0.0	shout-01	2-3
# ::node	0.0.0	boy	1-2
# ::root	0	and
# ::edge	and	op1	shout-01	0	0.0	
# ::edge	shout-01	ARG0	boy	0.0	0.0.0	
(a / and 
      :op1 (s / shout-01 
            :ARG0 (b / boy)))

# ::snt The boy arrived and was promptly killed.
# ::tok The boy arrived and was promptly killed .
# ::alignments 6-7|0.0.0.0 5-6|0.0.0.0.0 3-4|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.692
# ::node	0	and	3-4
# ::node	0.0	arrive-01	2-3
# ::node	0.0.0	boy	1-2
# ::node	0.0.0.0	kill-01	6-7
# ::node	0.0.0.0.0	prompt	5-6
# ::root	0	and
# ::edge	and	op1	arrive-01	0	0.0	
# ::edge	arrive-01	ARG1	boy	0.0	0.0.0	
# ::edge	kill-01	ARG0	boy	0.0.0.0	0.0.0	
# ::edge	kill-01	manner	prompt	0.0.0.0	0.0.0.0.0	
(a / and 
      :op1 (a2 / arrive-01 
            :ARG1 (b / boy 
                  :ARG0-of (k / kill-01 
                        :manner (p / prompt)))))

# ::snt The boy arrived and left on Tuesday.
# ::tok The boy arrived and left on Tuesday .
# ::alignments 6-7|0.1 3-4|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.708
# ::node	0	and	3-4
# ::node	0.0	arrive-01	2-3
# ::node	0.0.0	boy	1-2
# ::node	0.1	tuesday	6-7
# ::root	0	and
# ::edge	and	op1	arrive-01	0	0.0	
# ::edge	and	time	tuesday	0	0.1	
# ::edge	arrive-01	ARG1	boy	0.0	0.0.0	
(a / and 
      :op1 (a2 / arrive-01 
            :ARG1 (b / boy)) 
      :time (t / tuesday))

# ::snt On Tuesday, the boy arrived and left.
# ::tok On Tuesday , the boy arrived and left .
# ::alignments 6-7|0 5-6|0.0 4-5|0.0.0 1-2|0.0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.725
# ::node	0	and	6-7
# ::node	0.0	arrive-01	5-6
# ::node	0.0.0	boy	4-5
# ::node	0.0.1	tuesday	1-2
# ::root	0	and
# ::edge	and	op1	arrive-01	0	0.0	
# ::edge	arrive-01	ARG1	boy	0.0	0.0.0	
# ::edge	tuesday	subevent	arrive-01	0.0.1	0.0	
(a / and 
      :op1 (a2 / arrive-01 
            :ARG1 (b / boy) 
            :subevent-of (t / tuesday)))

# ::snt The boys all left.
# ::tok The boys all left .
# ::alignments 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.732
# ::node	0	boy	1-2
# ::node	0.0	all	2-3
# ::root	0	boy
# ::edge	boy	quant	all	0	0.0	
(b / boy 
      :quant (a / all))

# ::snt All the boys left.
# ::tok All the boys left .
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.740
# ::node	0	boy	2-3
# ::node	0.0	all	0-1
# ::root	0	boy
# ::edge	boy	mod	all	0	0.0	
(b / boy 
      :mod (a / all))

# ::snt Each of the boys left.
# ::tok Each of the boys left .
# ::alignments 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.748
# ::node	0	boy	3-4
# ::node	0.0	each	0-1
# ::root	0	boy
# ::edge	boy	mod	each	0	0.0	
(b / boy 
      :mod (e / each))

# ::snt No boy left.
# ::tok No boy left .
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.755
# ::node	0	boy	1-2
# ::node	0.0	no	0-1
# ::root	0	boy
# ::edge	boy	mod	no	0	0.0	
(b / boy 
      :mod (n / no))

# ::snt None of the boys left.
# ::tok None of the boys left .
# ::alignments 3-4|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.764
# ::node	0	boy	3-4
# ::node	0.0	none	0-1
# ::root	0	boy
(b / boy 
      :domain-of (n / none))

# ::snt Not all of the boys left.
# ::tok Not all of the boys left .
# ::alignments 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.773
# ::node	0	boy	4-5
# ::node	0.0	all	1-2
# ::root	0	boy
# ::edge	boy	mod	all	0	0.0	
(b / boy 
      :mod (a / all))

# ::snt Not everyone left.
# ::tok Not everyone left .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:47.778
# ::node	0	everyone	1-2
# ::root	0	everyone
(e / everyone)

# ::snt The girl believes that the boy works hard.
# ::tok The girl believes that the boy works hard .
# ::alignments 7-8|0.1.0.0 6-7|0.1 5-6|0.1.0 3-4|0.0.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:48.263
# ::node	0	believe-01	2-3
# ::node	0.0	girl	1-2
# ::node	0.0.0	that	3-4
# ::node	0.1	work-09	6-7
# ::node	0.1.0	boy	5-6
# ::node	0.1.0.0	hard-02	7-8
# ::root	0	believe-01
# ::edge	believe-01	ARG0	girl	0	0.0	
# ::edge	believe-01	ARG1	work-09	0	0.1	
# ::edge	girl	time	that	0.0	0.0.0	
# ::edge	hard-02	ARG1	boy	0.1.0.0	0.1.0	
# ::edge	work-09	ARG0	boy	0.1	0.1.0	
(b2 / believe-01 
      :ARG0 (g / girl 
            :time (t / that)) 
      :ARG1 (w / work-09 
            :ARG0 (b / boy 
                  :ARG1-of (h / hard-02))))

# ::snt The girl believes that the boy works in a not-hard manner.
# ::tok The girl believes that the boy works in a not - hard manner .
# ::alignments 12-13|0.1.2 11-12|0.1.2.0 6-7|0.1 5-6|0.1.1 3-4|0.1.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:48.470
# ::node	0	believe-01	2-3
# ::node	0.0	girl	1-2
# ::node	0.1	work-09	6-7
# ::node	0.1.0	that	3-4
# ::node	0.1.1	boy	5-6
# ::node	0.1.2	manner	12-13
# ::node	0.1.2.0	hard-02	11-12
# ::root	0	believe-01
# ::edge	believe-01	ARG0	girl	0	0.0	
# ::edge	believe-01	ARG1	work-09	0	0.1	
# ::edge	hard-02	ARG1	manner	0.1.2.0	0.1.2	
# ::edge	work-09	ARG0	that	0.1	0.1.0	
# ::edge	work-09	ARG1	boy	0.1	0.1.1	
# ::edge	work-09	ARG2	manner	0.1	0.1.2	
(b2 / believe-01 
      :ARG0 (g / girl) 
      :ARG1 (w / work-09 
            :ARG0 (t / that) 
            :ARG1 (b / boy) 
            :ARG2 (m / manner 
                  :ARG1-of (h / hard-02))))

# ::snt The girl believes that the boy doesn’t work hard.  (colloquially)
# ::tok The girl believes that the boy does n't work hard . ( colloquially )
# ::alignments 9-10|0.0.1.1 8-9|0.0.1 6-7|0.0.0 5-6|0.0.1.0 3-4|0.0.0.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:49.343
# ::node	0	believe-01	2-3
# ::node	0.0	girl	1-2
# ::node	0.0.0	do-02	6-7
# ::node	0.0.0.0	that	3-4
# ::node	0.0.1	work-01	8-9
# ::node	0.0.1.0	boy	5-6
# ::node	0.0.1.1	hard-02	9-10
# ::root	0	believe-01
# ::edge	believe-01	ARG0	girl	0	0.0	
# ::edge	do-02	ARG0	girl	0.0.0	0.0	
# ::edge	do-02	ARG1	that	0.0.0	0.0.0.0	
# ::edge	hard-02	ARG1	work-01	0.0.1.1	0.0.1	
# ::edge	work-01	ARG0	boy	0.0.1	0.0.1.0	
# ::edge	work-01	ARG1	girl	0.0.1	0.0	
(b2 / believe-01 
      :ARG0 (g / girl 
            :ARG0-of (d / do-02 
                  :ARG1 (t / that)) 
            :ARG1-of (w / work-01 
                  :ARG0 (b / boy) 
                  :ARG1-of (h / hard-02))))

# ::snt The girl doesn’t believe that the boy works hard.  (colloquially)
# ::tok The girl does n't believe that the boy works hard . ( colloquially )
# ::alignments 9-10|0.2 8-9|0.2.0 7-8|0.1 5-6|0.0.0.0 4-5|0 2-3|0.0.0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:50.315
# ::node	0	believe-01	4-5
# ::node	0.0	girl	1-2
# ::node	0.0.0	do-02	2-3
# ::node	0.0.0.0	that	5-6
# ::node	0.1	boy	7-8
# ::node	0.2	hard-02	9-10
# ::node	0.2.0	work-09	8-9
# ::root	0	believe-01
# ::edge	believe-01	ARG0	girl	0	0.0	
# ::edge	believe-01	ARG1	boy	0	0.1	
# ::edge	do-02	ARG0	girl	0.0.0	0.0	
# ::edge	do-02	ARG1	that	0.0.0	0.0.0.0	
# ::edge	hard-02	ARG1	believe-01	0.2	0	
# ::edge	work-09	ARG1	hard-02	0.2.0	0.2	
(b2 / believe-01 
      :ARG0 (g / girl 
            :ARG0-of (d / do-02 
                  :ARG1 (t / that))) 
      :ARG1 (b / boy) 
      :ARG1-of (h / hard-02 
            :ARG1-of (w / work-09)))

# ::snt The girl believes that the boy refrains from work, in a hard manner.
# ::tok The girl believes that the boy refrains from work , in a hard manner .
# ::alignments 13-14|0.0.0.2 12-13|0.0.0.2.0 8-9|0.0.0.1 6-7|0.0.0 5-6|0.0.0.0 3-4|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:50.521
# ::node	0	believe-01	2-3
# ::node	0.0	girl	1-2
# ::node	0.0.0	refrain-01	6-7
# ::node	0.0.0.0	boy	5-6
# ::node	0.0.0.1	work-01	8-9
# ::node	0.0.0.2	manner	13-14
# ::node	0.0.0.2.0	hard-02	12-13
# ::node	0.1	that	3-4
# ::root	0	believe-01
# ::edge	believe-01	ARG0	girl	0	0.0	
# ::edge	believe-01	ARG1	that	0	0.1	
# ::edge	hard-02	ARG1	manner	0.0.0.2.0	0.0.0.2	
# ::edge	refrain-01	ARG0	boy	0.0.0	0.0.0.0	
# ::edge	refrain-01	ARG1	girl	0.0.0	0.0	
# ::edge	refrain-01	ARG3	work-01	0.0.0	0.0.0.1	
# ::edge	refrain-01	location	manner	0.0.0	0.0.0.2	
(b2 / believe-01 
      :ARG0 (g / girl 
            :ARG1-of (r / refrain-01 
                  :ARG0 (b / boy) 
                  :ARG3 (w / work-01) 
                  :location (m / manner 
                        :ARG1-of (h / hard-02)))) 
      :ARG1 (t / that))

# ::snt It’s not true that the girl believes the boy works hard.
# ::tok It 's not true that the girl believes the boy works hard .
# ::alignments 11-12|0.2 10-11|0.1.0 9-10|0.1 7-8|0 6-7|0.0 4-5|0.0.0 3-4|0.1.0.0.0 0-1|0.1.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.313
# ::node	0	believe-01	7-8
# ::node	0.0	girl	6-7
# ::node	0.0.0	that	4-5
# ::node	0.1	boy	9-10
# ::node	0.1.0	work-09	10-11
# ::node	0.1.0.0	it	0-1
# ::node	0.1.0.0.0	true	3-4
# ::node	0.2	hard-02	11-12
# ::root	0	believe-01
# ::edge	believe-01	ARG0	girl	0	0.0	
# ::edge	believe-01	ARG1	boy	0	0.1	
# ::edge	girl	mod	that	0.0	0.0.0	
# ::edge	hard-02	ARG1	believe-01	0.2	0	
# ::edge	true	domain	it	0.1.0.0.0	0.1.0.0	
# ::edge	work-09	ARG0	boy	0.1.0	0.1	
# ::edge	work-09	ARG1	it	0.1.0	0.1.0.0	
(b2 / believe-01 
      :ARG0 (g / girl 
            :mod (t / that)) 
      :ARG1 (b / boy 
            :ARG0-of (w / work-09 
                  :ARG1 (i / it 
                        :domain-of (t2 / true)))) 
      :ARG1-of (h / hard-02))

# ::snt The non-girl believes that the non-boy works hard.
# ::tok The non - girl believes that the non - boy works hard .
# ::alignments 11-12|0.1.1.0 10-11|0.1 9-10|0.1.1 5-6|0.1.0 4-5|0 3-4|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.482
# ::node	0	believe-01	4-5
# ::node	0.0	girl	3-4
# ::node	0.1	work-09	10-11
# ::node	0.1.0	that	5-6
# ::node	0.1.1	boy	9-10
# ::node	0.1.1.0	hard-02	11-12
# ::root	0	believe-01
# ::edge	believe-01	ARG0	girl	0	0.0	
# ::edge	believe-01	ARG1	work-09	0	0.1	
# ::edge	hard-02	ARG1	boy	0.1.1.0	0.1.1	
# ::edge	work-09	ARG0	that	0.1	0.1.0	
# ::edge	work-09	ARG1	boy	0.1	0.1.1	
(b2 / believe-01 
      :ARG0 (g / girl) 
      :ARG1 (w / work-09 
            :ARG0 (t / that) 
            :ARG1 (b / boy 
                  :ARG1-of (h / hard-02))))

# ::snt That boy is brighter.
# ::tok That boy is brighter .
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.490
# ::node	0	boy	1-2
# ::node	0.0	that	0-1
# ::root	0	boy
# ::edge	boy	mod	that	0	0.0	
(b / boy 
      :mod (t / that))

# ::snt That boy is more bright.
# ::tok That boy is more bright .
# ::alignments 4-5|0 3-4|0.1 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.503
# ::node	0	bright-02	4-5
# ::node	0.0	boy	1-2
# ::node	0.0.0	that	0-1
# ::node	0.1	more	3-4
# ::root	0	bright-02
# ::edge	boy	mod	that	0.0	0.0.0	
# ::edge	bright-02	ARG1	boy	0	0.0	
# ::edge	bright-02	degree	more	0	0.1	
(b / bright-02 
      :ARG1 (b2 / boy 
            :mod (t / that)) 
      :degree (m / more))

# ::snt That boy is the brightest.
# ::tok That boy is the brightest .
# ::alignments 4-5|0.0.0+0.0 1-2|0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.517
# ::node	0	boy	1-2
# ::node	0.0	bright-03	4-5
# ::node	0.0.0	most	4-5
# ::node	0.1	that	0-1
# ::root	0	boy
# ::edge	boy	mod	that	0	0.1	
# ::edge	bright-03	ARG1	boy	0.0	0	
# ::edge	bright-03	degree	most	0.0	0.0.0	
(b2 / boy 
      :ARG1-of (b / bright-03 
            :degree (m / most)) 
      :mod (t / that))

# ::snt That boy is the most bright.
# ::tok That boy is the most bright .
# ::alignments 5-6|0 4-5|0.1 1-2|0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.532
# ::node	0	bright-02	5-6
# ::node	0.0	boy	1-2
# ::node	0.0.0	that	0-1
# ::node	0.1	most	4-5
# ::root	0	bright-02
# ::edge	boy	mod	that	0.0	0.0.0	
# ::edge	bright-02	ARG1	boy	0	0.0	
# ::edge	bright-02	degree	most	0	0.1	
(b / bright-02 
      :ARG1 (b2 / boy 
            :mod (t / that)) 
      :degree (m / most))

# ::snt the earlier plan
# ::tok the earlier plan
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.538
# ::node	0	plan-01	2-3
# ::node	0.0	early	1-2
# ::root	0	plan-01
# ::edge	plan-01	time	early	0	0.0	
(p / plan-01 
      :time (e / early))

# ::snt a better plan
# ::tok a better plan
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.545
# ::node	0	plan-01	2-3
# ::node	0.0	good	1-2
# ::root	0	plan-01
# ::edge	plan-01	mod	good	0	0.0	
(p / plan-01 
      :mod (g / good))

# ::snt a worse plan
# ::tok a worse plan
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.551
# ::node	0	plan-01	2-3
# ::node	0.0	bad-07	1-2
# ::root	0	plan-01
(p / plan-01 
      :ARG1-of (b / bad-07))

# ::snt a plan that is too extreme
# ::tok a plan that is too extreme
# ::alignments 5-6|0.1 4-5|0.1.0 2-3|0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.565
# ::node	0	plan-01	1-2
# ::node	0.0	that	2-3
# ::node	0.1	extreme	5-6
# ::node	0.1.0	too	4-5
# ::root	0	plan-01
# ::edge	extreme	degree	too	0.1	0.1.0	
# ::edge	plan-01	ARG1	that	0	0.0	
# ::edge	plan-01	mod	extreme	0	0.1	
(p / plan-01 
      :ARG1 (t2 / that) 
      :mod (e / extreme 
            :degree (t / too)))

# ::snt the girl is taller than the boy
# ::tok the girl is taller than the boy
# ::alignments 6-7|0.0 3-4|0 1-2|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.576
# ::node	0	tall	3-4
# ::node	0.0	boy	6-7
# ::node	0.1	girl	1-2
# ::root	0	tall
# ::edge	tall	compared-to	boy	0	0.0	
# ::edge	tall	domain	girl	0	0.1	
(t / tall 
      :compared-to (b / boy) 
      :domain (g / girl))

# ::snt she is the tallest girl on the team
# ::tok she is the tallest girl on the team
# ::alignments 7-8|0.1.0 4-5|0 3-4|0.1.1+0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.595
# ::node	0	girl	4-5
# ::node	0.0	she	0-1
# ::node	0.1	tall	3-4
# ::node	0.1.0	team	7-8
# ::node	0.1.1	most	3-4
# ::root	0	girl
# ::edge	girl	domain	she	0	0.0	
# ::edge	girl	mod	tall	0	0.1	
# ::edge	tall	compared-to	team	0.1	0.1.0	
# ::edge	tall	degree	most	0.1	0.1.1	
(g / girl 
      :domain (s / she) 
      :mod (t2 / tall 
            :compared-to (t / team) 
            :degree (m / most)))

# ::snt The boy wants to go.
# ::tok The boy wants to go .
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.604
# ::node	0	want-01	2-3
# ::node	0.0	boy	1-2
# ::root	0	want-01
# ::edge	want-01	ARG0	boy	0	0.0	
(w / want-01 
      :ARG0 (b / boy))

# ::snt The boy wants to believe himself.
# ::tok The boy wants to believe himself .
# ::alignments 4-5|0.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.615
# ::node	0	want-01	2-3
# ::node	0.0	boy	1-2
# ::node	0.1	believe-01	4-5
# ::root	0	want-01
# ::edge	want-01	ARG0	boy	0	0.0	
# ::edge	want-01	ARG1	believe-01	0	0.1	
(w / want-01 
      :ARG0 (b2 / boy) 
      :ARG1 (b / believe-01))

# ::snt He saw them.
# ::tok He saw them .
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.621
# ::node	0	see-01	1-2
# ::node	0.0	he	0-1
# ::root	0	see-01
# ::edge	see-01	ARG0	he	0	0.0	
(s / see-01 
      :ARG0 (h / he))

# ::snt I saw you (plural).
# ::tok I saw you ( plural ) .
# ::alignments 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.632
# ::node	0	see-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	you	2-3
# ::root	0	see-01
# ::edge	see-01	ARG0	i	0	0.0	
# ::edge	see-01	ARG1	you	0	0.1	
(s / see-01 
      :ARG0 (i / i) 
      :ARG1 (y / you))

# ::snt I saw y’all.
# ::tok I saw y'all .
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.638
# ::node	0	see-01	1-2
# ::node	0.0	i	0-1
# ::root	0	see-01
# ::edge	see-01	ARG1	i	0	0.0	
(s / see-01 
      :ARG1 (i / i))

# ::snt I saw you guys.
# ::tok I saw you guys .
# ::alignments 3-4|0.2 2-3|0.1 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.652
# ::node	0	see-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	you	2-3
# ::node	0.2	guy	3-4
# ::root	0	see-01
# ::edge	see-01	ARG0	i	0	0.0	
# ::edge	see-01	ARG1	you	0	0.1	
# ::edge	see-01	ARG2	guy	0	0.2	
(s / see-01 
      :ARG0 (i / i) 
      :ARG1 (y / you) 
      :ARG2 (g / guy))

# ::snt his car
# ::tok his car
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.656
# ::node	0	car	1-2
# ::root	0	car
(c / car)

# ::snt the car of his
# ::tok the car of his
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.660
# ::node	0	car	1-2
# ::root	0	car
(c / car)

# ::snt the nation’s titans
# ::tok the nation 's titans
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.664
# ::node	0	nation	1-2
# ::root	0	nation
(n / nation)

# ::snt microbial virus
# ::tok microbial virus
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.669
# ::node	0	virus	1-2
# ::node	0.0	microbe	0-1
# ::root	0	virus
# ::edge	virus	mod	microbe	0	0.0	
(v / virus 
      :mod (m / microbe))

# ::snt microbe virus
# ::tok microbe virus
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.672
# ::node	0	virus	1-2
# ::root	0	virus
(v / virus)

# ::snt atomic war
# ::tok atomic war
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.678
# ::node	0	war	1-2
# ::node	0.0	atom	0-1
# ::root	0	war
# ::edge	war	mod	atom	0	0.0	
(w / war 
      :mod (a / atom))

# ::snt Behavioral problems.
# ::tok Behavioral problems .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.681
# ::node	0	problem	1-2
# ::root	0	problem
(p / problem)

# ::snt Behavior problems.
# ::tok Behavior problems .
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.685
# ::node	0	problem	1-2
# ::root	0	problem
(p / problem)

# ::snt Problems with behavior.
# ::tok Problems with behavior .
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.690
# ::node	0	behave-01	2-3
# ::root	0	behave-01
(b / behave-01)

# ::snt Problems behaving.
# ::tok Problems behaving .
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.693
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt the second planet
# ::tok the second planet
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.697
# ::node	0	planet	2-3
# ::root	0	planet
(p / planet)

# ::snt planet number 2
# ::tok planet number 2
# ::alignments 2-3|0.0.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.705
# ::node	0	number	1-2
# ::node	0.0	planet	0-1
# ::node	0.0.0	2	2-3
# ::root	0	number
# ::edge	2	mod	planet	0.0.0	0.0	
# ::edge	number	mod	planet	0	0.0	
(n / number 
      :mod (p / planet 
            :mod-of 2))

# ::snt our first visit in 10 years
# ::tok our first visit in 10 years
# ::alignments 5-6|0.1.1+0.1 4-5|0.1.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.723
# ::node	0	visit-01	2-3
# ::node	0.0	first	1-2
# ::node	0.1	temporal-quantity	5-6
# ::node	0.1.0	10	4-5
# ::node	0.1.1	year	5-6
# ::root	0	visit-01
# ::edge	temporal-quantity	quant	10	0.1	0.1.0	
# ::edge	temporal-quantity	unit	year	0.1	0.1.1	
# ::edge	visit-01	mod	first	0	0.0	
# ::edge	visit-01	time	temporal-quantity	0	0.1	
(v / visit-01 
      :mod (f / first) 
      :time (t / temporal-quantity 
            :quant 10 
            :unit (y / year)))

# ::snt Nine of the twenty soldiers died.
# ::tok Nine of the twenty soldiers died .
# ::alignments 5-6|0 4-5|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.732
# ::node	0	die-01	5-6
# ::node	0.0	soldier	4-5
# ::root	0	die-01
# ::edge	die-01	ARG1	soldier	0	0.0	
(d / die-01 
      :ARG1 (s / soldier))

# ::snt Four of the five survivors had the disease, including three who were diagnosed.
# ::tok Four of the five survivors had the disease , including three who were diagnosed .
# ::alignments 13-14|0 10-11|0.0 9-10|0.1 7-8|0.1.1 4-5|0.1.0.0+0.1.0 3-4|0.1.0.2 0-1|0.1.0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.921
# ::node	0	diagnose-01	13-14
# ::node	0.0	3	10-11
# ::node	0.1	include-91	9-10
# ::node	0.1.0	person	4-5
# ::node	0.1.0.0	survive-01	4-5
# ::node	0.1.0.1	4	0-1
# ::node	0.1.0.2	5	3-4
# ::node	0.1.1	disease	7-8
# ::root	0	diagnose-01
# ::edge	diagnose-01	ARG0	3	0	0.0	
# ::edge	diagnose-01	ARG2	include-91	0	0.1	
# ::edge	include-91	ARG0	person	0.1	0.1.0	
# ::edge	include-91	ARG1	disease	0.1	0.1.1	
# ::edge	person	quant	4	0.1.0	0.1.0.1	
# ::edge	person	quant	5	0.1.0	0.1.0.2	
# ::edge	survive-01	ARG0	person	0.1.0.0	0.1.0	
(d / diagnose-01 
      :ARG0 3 
      :ARG2 (i / include-91 
            :ARG0 (p / person 
                  :ARG0-of (s / survive-01) 
                  :quant 4 
                  :quant 5) 
            :ARG1 (d2 / disease)))

# ::snt Nine of the twenty soldiers died.
# ::tok Nine of the twenty soldiers died .
# ::alignments 5-6|0 4-5|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.929
# ::node	0	die-01	5-6
# ::node	0.0	soldier	4-5
# ::root	0	die-01
# ::edge	die-01	ARG1	soldier	0	0.0	
(d / die-01 
      :ARG1 (s / soldier))

# ::snt Mollie Brown
# ::tok Mollie Brown
# ::alignments 0-2|0.0.0+0.0.1+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.937
# ::node	0	person	0-2
# ::node	0.0	name	0-2
# ::node	0.0.0	"Mollie"	0-2
# ::node	0.0.1	"Brown"	0-2
# ::root	0	person
# ::edge	name	op1	"Mollie"	0.0	0.0.0	
# ::edge	name	op2	"Brown"	0.0	0.0.1	
# ::edge	person	name	name	0	0.0	
(p / person 
      :name (n / name 
            :op1 "Mollie" 
            :op2 "Brown"))

# ::snt the orc-slaying Mollie Brown
# ::tok the orc - slaying Mollie Brown
# ::alignments 4-6|0.1.0+0.1.1+0.1+0 2-4|0.0.0.0+0.0.0.1+0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.953
# ::node	0	person	4-6
# ::node	0.0	person	2-4
# ::node	0.0.0	name	2-4
# ::node	0.0.0.0	"Brown"	2-4
# ::node	0.0.0.1	"Mollie"	2-4
# ::node	0.1	name	4-6
# ::node	0.1.0	"Mollie"	4-6
# ::node	0.1.1	"Brown"	4-6
# ::root	0	person
# ::edge	name	op1	"Brown"	0.0.0	0.0.0.0	
# ::edge	name	op1	"Mollie"	0.1	0.1.0	
# ::edge	name	op2	"Brown"	0.1	0.1.1	
# ::edge	name	op2	"Mollie"	0.0.0	0.0.0.1	
# ::edge	person	domain	person	0	0.0	
# ::edge	person	name	name	0	0.1	
# ::edge	person	name	name	0.0	0.0.0	
(p / person 
      :domain (p2 / person 
            :name (n2 / name 
                  :op1 "Brown" 
                  :op2 "Mollie")) 
      :name (n / name 
            :op1 "Mollie" 
            :op2 "Brown"))

# ::snt Mollie Brown, who slays orcs
# ::tok Mollie Brown , who slays orcs
# ::alignments 0-2|0.0.0+0.0.1+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.963
# ::node	0	person	0-2
# ::node	0.0	name	0-2
# ::node	0.0.0	"Mollie"	0-2
# ::node	0.0.1	"Brown"	0-2
# ::root	0	person
# ::edge	name	op1	"Mollie"	0.0	0.0.0	
# ::edge	name	op2	"Brown"	0.0	0.0.1	
# ::edge	person	name	name	0	0.0	
(p / person 
      :name (n / name 
            :op1 "Mollie" 
            :op2 "Brown"))

# ::snt Titanic
# ::tok Titanic
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.966
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt the Titanic
# ::tok the Titanic
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.969
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt the ship named Titanic
# ::tok the ship named Titanic
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.976
# ::node	0	name-01	2-3
# ::node	0.0	ship	1-2
# ::root	0	name-01
# ::edge	name-01	ARG0	ship	0	0.0	
(n / name-01 
      :ARG0 (s / ship))

# ::snt Marina del Rey
# ::tok Marina del Rey
# ::alignments 0-3|0.0.0+0.0.1+0.0.2+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.985
# ::node	0	country	0-3
# ::node	0.0	name	0-3
# ::node	0.0.0	"Rey"	0-3
# ::node	0.0.1	"del"	0-3
# ::node	0.0.2	"Marina"	0-3
# ::root	0	country
# ::edge	country	name	name	0	0.0	
# ::edge	name	op1	"Rey"	0.0	0.0.0	
# ::edge	name	op2	"del"	0.0	0.0.1	
# ::edge	name	op3	"Marina"	0.0	0.0.2	
(c / country 
      :name (n / name 
            :op1 "Rey" 
            :op2 "del" 
            :op3 "Marina"))

# ::snt the city of Marina del Rey
# ::tok the city of Marina del Rey
# ::alignments 3-6|0.0.0.0+0.0.0.1+0.0.0.2+0.0.0+0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:51.998
# ::node	0	city	1-2
# ::node	0.0	country	3-6
# ::node	0.0.0	name	3-6
# ::node	0.0.0.0	"Rey"	3-6
# ::node	0.0.0.1	"del"	3-6
# ::node	0.0.0.2	"Marina"	3-6
# ::root	0	city
# ::edge	city	location	country	0	0.0	
# ::edge	country	name	name	0.0	0.0.0	
# ::edge	name	op1	"Rey"	0.0.0	0.0.0.0	
# ::edge	name	op2	"del"	0.0.0	0.0.0.1	
# ::edge	name	op3	"Marina"	0.0.0	0.0.0.2	
(c2 / city 
      :location (c / country 
            :name (n / name 
                  :op1 "Rey" 
                  :op2 "del" 
                  :op3 "Marina")))

# ::snt Calif.
# ::tok Calif.
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.001
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt advertising rates
# ::tok advertising rates
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.005
# ::node	0	rate	1-2
# ::root	0	rate
(r / rate)

# ::snt ad rates
# ::tok ad rates
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.008
# ::node	0	rate	1-2
# ::root	0	rate
(r / rate)

# ::snt the chip maker
# ::tok the chip maker
# ::alignments 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.014
# ::node	0	make-01	2-3
# ::node	0.0	chip	1-2
# ::root	0	make-01
# ::edge	make-01	ARG1	chip	0	0.0	
(m / make-01 
      :ARG1 (c / chip))

# ::snt the Nobel Prize
# ::tok the Nobel Prize
# ::alignments 1-3|0.0.0+0.0.1+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.021
# ::node	0	organization	1-3
# ::node	0.0	name	1-3
# ::node	0.0.0	"Prize"	1-3
# ::node	0.0.1	"Nobel"	1-3
# ::root	0	organization
# ::edge	name	op1	"Prize"	0.0	0.0.0	
# ::edge	name	op2	"Nobel"	0.0	0.0.1	
# ::edge	organization	name	name	0	0.0	
(o / organization 
      :name (n / name 
            :op1 "Prize" 
            :op2 "Nobel"))

# ::snt the American NSA
# ::tok the American NSA
# ::alignments 1-2|0.0.0+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.029
# ::node	0	country	1-2
# ::node	0.0	name	1-2
# ::node	0.0.0	"America"	1-2
# ::root	0	country
# ::edge	country	name	name	0	0.0	
# ::edge	name	op1	"America"	0.0	0.0.0	
(c / country 
      :name (n / name 
            :op1 "America"))

# ::snt the Lone Cypress
# ::tok the Lone Cypress
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.033
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt the poet William Shakespeare
# ::tok the poet William Shakespeare
# ::alignments 2-4|0.0.0.0+0.0.0.1+0.0.0+0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.043
# ::node	0	poet	1-2
# ::node	0.0	person	2-4
# ::node	0.0.0	name	2-4
# ::node	0.0.0.0	"Shakespeare"	2-4
# ::node	0.0.0.1	"William"	2-4
# ::root	0	poet
(p2 / poet 
      :mod-of (p / person 
            :name (n / name 
                  :op1 "Shakespeare" 
                  :op2 "William")))

# ::snt William Shakespeare, the poet
# ::tok William Shakespeare , the poet
# ::alignments 4-5|0.0 0-2|0.1.0+0.1.1+0.1+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.055
# ::node	0	person	0-2
# ::node	0.0	poet	4-5
# ::node	0.1	name	0-2
# ::node	0.1.0	"Shakespeare"	0-2
# ::node	0.1.1	"William"	0-2
# ::root	0	person
# ::edge	name	op1	"Shakespeare"	0.1	0.1.0	
# ::edge	name	op2	"William"	0.1	0.1.1	
# ::edge	person	name	name	0	0.1	
# ::edge	poet	mod	person	0.0	0	
(p2 / person 
      :mod-of (p / poet) 
      :name (n / name 
            :op1 "Shakespeare" 
            :op2 "William"))

# ::snt the village of Odinaboi
# ::tok the village of Odinaboi
# ::alignments 3-4|0.0.0+0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.063
# ::node	0	village	1-2
# ::node	0.0	name	3-4
# ::node	0.0.0	"Odinaboi"	3-4
# ::root	0	village
# ::edge	name	op1	"Odinaboi"	0.0	0.0.0	
# ::edge	village	name	name	0	0.0	
(v / village 
      :name (n / name 
            :op1 "Odinaboi"))

# ::snt Doctor Wu
# ::tok Doctor Wu
# ::alignments 1-2|0.1.0+0.1+0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.072
# ::node	0	person	1-2
# ::node	0.0	doctor	0-1
# ::node	0.1	name	1-2
# ::node	0.1.0	"Wu"	1-2
# ::root	0	person
# ::edge	name	op1	"Wu"	0.1	0.1.0	
# ::edge	person	mod	doctor	0	0.0	
# ::edge	person	name	name	0	0.1	
(p / person 
      :mod (d / doctor) 
      :name (n / name 
            :op1 "Wu"))

# ::snt Sudan's Darfur region
# ::tok Sudan 's Darfur region
# ::alignments 3-4|0 2-3|0.0.0.0.0+0.0.0.0+0.0.0 0-1|0.0.1.0+0.0.1+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.090
# ::node	0	region	3-4
# ::node	0.0	country	0-1
# ::node	0.0.0	country-region	2-3
# ::node	0.0.0.0	name	2-3
# ::node	0.0.0.0.0	"Darfur"	2-3
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	"Sudan"	0-1
# ::root	0	region
(r / region 
      :part-of (c2 / country 
            :location-of (c / country-region 
                  :name (n / name 
                        :op1 "Darfur")) 
            :name (n2 / name 
                  :op1 "Sudan")))

# ::snt Germany's conservative CDU party
# ::tok Germany 's conservative CDU party
# ::alignments 3-5|0.1.0+0.1.1+0.1+0 2-3|0.0 0-1|0.2.0.0+0.2.0+0.2 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.111
# ::node	0	organization	3-5
# ::node	0.0	conservative	2-3
# ::node	0.1	name	3-5
# ::node	0.1.0	"party"	3-5
# ::node	0.1.1	"CDU"	3-5
# ::node	0.2	country	0-1
# ::node	0.2.0	name	0-1
# ::node	0.2.0.0	"Germany"	0-1
# ::root	0	organization
# ::edge	country	name	name	0.2	0.2.0	
# ::edge	name	op1	"Germany"	0.2.0	0.2.0.0	
# ::edge	name	op1	"party"	0.1	0.1.0	
# ::edge	name	op2	"CDU"	0.1	0.1.1	
# ::edge	organization	mod	conservative	0	0.0	
# ::edge	organization	name	name	0	0.1	
# ::edge	organization	poss	country	0	0.2	
(o / organization 
      :mod (c / conservative) 
      :name (n / name 
            :op1 "party" 
            :op2 "CDU") 
      :poss (c2 / country 
            :name (n2 / name 
                  :op1 "Germany")))

# ::snt the spaceship Shenzhou
# ::tok the spaceship Shenzhou
# ::alignments 2-3|0.0.0+0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.118
# ::node	0	spaceship	1-2
# ::node	0.0	name	2-3
# ::node	0.0.0	"Shenzhou"	2-3
# ::root	0	spaceship
# ::edge	name	op1	"Shenzhou"	0.0	0.0.0	
# ::edge	spaceship	name	name	0	0.0	
(s / spaceship 
      :name (n / name 
            :op1 "Shenzhou"))

# ::snt the Shenzhou spacecraft
# ::tok the Shenzhou spacecraft
# ::alignments 2-3|0 1-2|0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.125
# ::node	0	spacecraft	2-3
# ::node	0.0	name	1-2
# ::node	0.0.0	"Shenzhou"	1-2
# ::root	0	spacecraft
# ::edge	name	op1	"Shenzhou"	0.0	0.0.0	
# ::edge	spacecraft	name	name	0	0.0	
(s / spacecraft 
      :name (n / name 
            :op1 "Shenzhou"))

# ::snt Mr. Wu
# ::tok Mr. Wu
# ::alignments 1-2|0.0.0+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.132
# ::node	0	person	1-2
# ::node	0.0	name	1-2
# ::node	0.0.0	"Wu"	1-2
# ::root	0	person
# ::edge	name	op1	"Wu"	0.0	0.0.0	
# ::edge	person	name	name	0	0.0	
(p / person 
      :name (n / name 
            :op1 "Wu"))

# ::snt Mister Wu
# ::tok Mister Wu
# ::alignments 0-2|0.0.0+0.0.1+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.139
# ::node	0	person	0-2
# ::node	0.0	name	0-2
# ::node	0.0.0	"Wu"	0-2
# ::node	0.0.1	"Mister"	0-2
# ::root	0	person
# ::edge	name	op1	"Wu"	0.0	0.0.0	
# ::edge	name	op2	"Mister"	0.0	0.0.1	
# ::edge	person	name	name	0	0.0	
(p / person 
      :name (n / name 
            :op1 "Wu" 
            :op2 "Mister"))

# ::snt Elsevier N.V. , the Dutch publishing group
# ::tok Elsevier N.V. , the Dutch publishing group
# ::alignments 6-7|0.0 5-6|0.0.0 0-2|0.1.0+0.1.1+0.1+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.155
# ::node	0	organization	0-2
# ::node	0.0	group	6-7
# ::node	0.0.0	publish-01	5-6
# ::node	0.1	name	0-2
# ::node	0.1.0	"N.V."	0-2
# ::node	0.1.1	"Elsevier"	0-2
# ::root	0	organization
# ::edge	name	op1	"N.V."	0.1	0.1.0	
# ::edge	name	op2	"Elsevier"	0.1	0.1.1	
# ::edge	organization	mod	group	0	0.0	
# ::edge	organization	name	name	0	0.1	
# ::edge	publish-01	ARG0	group	0.0.0	0.0	
(o / organization 
      :mod (g / group 
            :ARG0-of (p / publish-01)) 
      :name (n / name 
            :op1 "N.V." 
            :op2 "Elsevier"))

# ::snt the poet Dr. Seuss
# ::tok the poet Dr. Seuss
# ::alignments 2-4|0.0.0.0+0.0.0.1+0.0.0+0.0 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.166
# ::node	0	poet	1-2
# ::node	0.0	person	2-4
# ::node	0.0.0	name	2-4
# ::node	0.0.0.0	"Seuss"	2-4
# ::node	0.0.0.1	"Dr."	2-4
# ::root	0	poet
(p2 / poet 
      :mod-of (p / person 
            :name (n / name 
                  :op1 "Seuss" 
                  :op2 "Dr.")))

# ::snt US President Obama
# ::tok US President Obama
# ::alignments 2-3|0.1.0+0.1+0 1-2|0.0.1+0.0 0-1|0.0.0.0.0+0.0.0.0+0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.188
# ::node	0	person	2-3
# ::node	0.0	have-org-role-91	1-2
# ::node	0.0.0	country	0-1
# ::node	0.0.0.0	name	0-1
# ::node	0.0.0.0.0	"US"	0-1
# ::node	0.0.1	president	1-2
# ::node	0.1	name	2-3
# ::node	0.1.0	"Obama"	2-3
# ::root	0	person
# ::edge	country	name	name	0.0.0	0.0.0.0	
# ::edge	have-org-role-91	ARG0	person	0.0	0	
# ::edge	have-org-role-91	ARG1	country	0.0	0.0.0	
# ::edge	have-org-role-91	ARG2	president	0.0	0.0.1	
# ::edge	name	op1	"Obama"	0.1	0.1.0	
# ::edge	name	op1	"US"	0.0.0.0	0.0.0.0.0	
# ::edge	person	name	name	0	0.1	
(p / person 
      :ARG0-of (h / have-org-role-91 
            :ARG1 (c / country 
                  :name (n2 / name 
                        :op1 "US")) 
            :ARG2 (p2 / president)) 
      :name (n / name 
            :op1 "Obama"))

# ::snt He is my brother-in-law.
# ::tok He is my brother - in - law .
# ::alignments 7-8|0 3-4|0.0.0.0+0.0.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.202
# ::node	0	law	7-8
# ::node	0.0	he	0-1
# ::node	0.0.0	have-rel-role-91	3-4
# ::node	0.0.0.0	brother	3-4
# ::root	0	law
# ::edge	have-rel-role-91	ARG0	he	0.0.0	0.0	
# ::edge	have-rel-role-91	ARG2	brother	0.0.0	0.0.0.0	
# ::edge	law	ARG0	he	0	0.0	
(l / law 
      :ARG0 (h2 / he 
            :ARG0-of (h / have-rel-role-91 
                  :ARG2 (b / brother))))

# ::snt forty thousand boys
# ::tok forty thousand boys
# ::alignments 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.206
# ::node	0	boy	2-3
# ::root	0	boy
(b / boy)

# ::snt 40,000 boys
# ::tok 40,000 boys
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.210
# ::node	0	boy	1-2
# ::root	0	boy
(b / boy)

# ::snt one and half billion atoms
# ::tok one and half billion atoms
# ::alignments 4-5|0.0 2-3|0.0.0 1-2|0 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.222
# ::node	0	and	1-2
# ::node	0.0	atom	4-5
# ::node	0.0.0	half	2-3
# ::node	0.0.0.0	1	0-1
# ::root	0	and
# ::edge	1	mod	half	0.0.0.0	0.0.0	
# ::edge	and	op1	atom	0	0.0	
# ::edge	atom	mod	half	0.0	0.0.0	
(a2 / and 
      :op1 (a / atom 
            :mod (h / half 
                  :mod-of 1)))

# ::snt 1.5 billion atoms
# ::tok 1.5 billion atoms
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.228
# ::node	0	atom	2-3
# ::node	0.0	1.5	0-1
# ::root	0	atom
# ::edge	atom	quant	1.5	0	0.0	
(a / atom 
      :quant 1.5)

# ::snt a billion and half atoms
# ::tok a billion and half atoms
# ::alignments 4-5|0.1 3-4|0.0 2-3|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.237
# ::node	0	and	2-3
# ::node	0.0	half	3-4
# ::node	0.1	atom	4-5
# ::root	0	and
# ::edge	and	op1	half	0	0.0	
# ::edge	and	op2	atom	0	0.1	
(a2 / and 
      :op1 (h / half) 
      :op2 (a / atom))

# ::snt 1,500,000,000 atoms
# ::tok 1,500,000,000 atoms
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.241
# ::node	0	atom	1-2
# ::root	0	atom
(a / atom)

# ::snt several hundred boys
# ::tok several hundred boys
# ::alignments 2-3|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.246
# ::node	0	boy	2-3
# ::node	0.0	several	0-1
# ::root	0	boy
# ::edge	boy	quant	several	0	0.0	
(b / boy 
      :quant (s / several))

# ::snt more than four thousand boys
# ::tok more than four thousand boys
# ::alignments 4-5|0 2-3|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.255
# ::node	0	boy	4-5
# ::node	0.0	4	2-3
# ::node	0.1	more	0-1
# ::root	0	boy
# ::edge	boy	quant	4	0	0.0	
# ::edge	boy	quant	more	0	0.1	
(b / boy 
      :quant 4 
      :quant (m / more))

# ::snt more than 4000 boys
# ::tok more than 4000 boys
# ::alignments 3-4|0 2-3|0.1 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.268
# ::node	0	boy	3-4
# ::node	0.0	more	0-1
# ::node	0.1	4000	2-3
# ::root	0	boy
# ::edge	boy	quant	4000	0	0.1	
# ::edge	more	op1	boy	0.0	0	
(b / boy 
      :op-of (m / more) 
      :quant 4000)

# ::snt between 4000 and 5000 boys
# ::tok between 4000 and 5000 boys
# ::alignments 4-5|0.0.0 3-4|0.0 2-3|0 1-2|0.0.1 0-1|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.284
# ::node	0	and	2-3
# ::node	0.0	5000	3-4
# ::node	0.0.0	boy	4-5
# ::node	0.0.0.0	between	0-1
# ::node	0.0.1	4000	1-2
# ::root	0	and
# ::edge	4000	poss	5000	0.0.1	0.0	
# ::edge	and	op1	5000	0	0.0	
# ::edge	between	op1	boy	0.0.0.0	0.0.0	
# ::edge	boy	mod	5000	0.0.0	0.0	
(a / and 
      :op1 (5 / 5000 
            :mod-of (b / boy 
                  :op-of (b2 / between)) 
            :poss-of 4000))

# ::snt between four and five thousand boys
# ::tok between four and five thousand boys
# ::alignments 5-6|0.0 3-4|0.0.0 2-3|0 1-2|0.1 0-1|0.0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.301
# ::node	0	and	2-3
# ::node	0.0	boy	5-6
# ::node	0.0.0	5	3-4
# ::node	0.0.1	between	0-1
# ::node	0.1	4	1-2
# ::root	0	and
# ::edge	5	mod	boy	0.0.0	0.0	
# ::edge	and	consist	boy	0	0.0	
# ::edge	and	op1	4	0	0.1	
# ::edge	boy	quant	between	0.0	0.0.1	
(a / and 
      :consist (b / boy 
            :mod-of 5 
            :quant (b2 / between)) 
      :op1 4)

# ::snt ten miles
# ::tok ten miles
# ::alignments 1-2|0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.307
# ::node	0	distance-quantity	1-2
# ::node	0.0	mile	1-2
# ::root	0	distance-quantity
# ::edge	distance-quantity	unit	mile	0	0.0	
(d / distance-quantity 
      :unit (m / mile))

# ::snt 10 miles
# ::tok 10 miles
# ::alignments 1-2|0.1+0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.314
# ::node	0	distance-quantity	1-2
# ::node	0.0	10	0-1
# ::node	0.1	mile	1-2
# ::root	0	distance-quantity
# ::edge	distance-quantity	quant	10	0	0.0	
# ::edge	distance-quantity	unit	mile	0	0.1	
(d / distance-quantity 
      :quant 10 
      :unit (m / mile))

# ::snt 10-mile
# ::tok 10 - mile
# ::alignments 2-3|0.1+0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.322
# ::node	0	distance-quantity	2-3
# ::node	0.0	10	0-1
# ::node	0.1	mile	2-3
# ::root	0	distance-quantity
# ::edge	distance-quantity	quant	10	0	0.0	
# ::edge	distance-quantity	unit	mile	0	0.1	
(d / distance-quantity 
      :quant 10 
      :unit (m / mile))

# ::snt about 10 miles
# ::tok about 10 miles
# ::alignments 2-3|0.0.1+0.0 1-2|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.333
# ::node	0	about	0-1
# ::node	0.0	distance-quantity	2-3
# ::node	0.0.0	10	1-2
# ::node	0.0.1	mile	2-3
# ::root	0	about
# ::edge	about	op1	distance-quantity	0	0.0	
# ::edge	distance-quantity	quant	10	0.0	0.0.0	
# ::edge	distance-quantity	unit	mile	0.0	0.0.1	
(a / about 
      :op1 (d / distance-quantity 
            :quant 10 
            :unit (m / mile)))

# ::snt The woman bought two gallons of milk.
# ::tok The woman bought two gallons of milk .
# ::alignments 6-7|0.1 4-5|0.1.0.1+0.1.0 3-4|0.1.0.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.418
# ::node	0	buy-01	2-3
# ::node	0.0	woman	1-2
# ::node	0.1	milk	6-7
# ::node	0.1.0	volume-quantity	4-5
# ::node	0.1.0.0	2	3-4
# ::node	0.1.0.1	gallon	4-5
# ::root	0	buy-01
# ::edge	buy-01	ARG0	woman	0	0.0	
# ::edge	buy-01	ARG1	milk	0	0.1	
# ::edge	milk	quant	volume-quantity	0.1	0.1.0	
# ::edge	volume-quantity	quant	2	0.1.0	0.1.0.0	
# ::edge	volume-quantity	unit	gallon	0.1.0	0.1.0.1	
(b / buy-01 
      :ARG0 (w / woman) 
      :ARG1 (m / milk 
            :quant (v / volume-quantity 
                  :quant 2 
                  :unit (g / gallon))))

# ::snt 30 years
# ::tok 30 years
# ::alignments 1-2|0.1+0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.426
# ::node	0	temporal-quantity	1-2
# ::node	0.0	30	0-1
# ::node	0.1	year	1-2
# ::root	0	temporal-quantity
# ::edge	temporal-quantity	quant	30	0	0.0	
# ::edge	temporal-quantity	unit	year	0	0.1	
(t / temporal-quantity 
      :quant 30 
      :unit (y / year))

# ::snt during the past 30 years
# ::tok during the past 30 years
# ::alignments 4-5|0.0.2+0.0 3-4|0.0.1 2-3|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.442
# ::node	0	during	0-1
# ::node	0.0	temporal-quantity	4-5
# ::node	0.0.0	past	2-3
# ::node	0.0.1	30	3-4
# ::node	0.0.2	year	4-5
# ::root	0	during
# ::edge	during	op1	temporal-quantity	0	0.0	
# ::edge	past	op1	temporal-quantity	0.0.0	0.0	
# ::edge	temporal-quantity	quant	30	0.0	0.0.1	
# ::edge	temporal-quantity	unit	year	0.0	0.0.2	
(d / during 
      :op1 (t / temporal-quantity 
            :op-of (p / past) 
            :quant 30 
            :unit (y / year)))

# ::snt 30 years ago
# ::tok 30 years ago
# ::alignments 1-2|0.1+0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.450
# ::node	0	temporal-quantity	1-2
# ::node	0.0	30	0-1
# ::node	0.1	year	1-2
# ::root	0	temporal-quantity
# ::edge	temporal-quantity	quant	30	0	0.0	
# ::edge	temporal-quantity	unit	year	0	0.1	
(t / temporal-quantity 
      :quant 30 
      :unit (y / year))

# ::snt more than 30 years ago
# ::tok more than 30 years ago
# ::alignments 3-4|0.0.1+0.0 2-3|0.0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.462
# ::node	0	more	0-1
# ::node	0.0	temporal-quantity	3-4
# ::node	0.0.0	30	2-3
# ::node	0.0.1	year	3-4
# ::root	0	more
# ::edge	more	op1	temporal-quantity	0	0.0	
# ::edge	temporal-quantity	quant	30	0.0	0.0.0	
# ::edge	temporal-quantity	unit	year	0.0	0.0.1	
(m / more 
      :op1 (t / temporal-quantity 
            :quant 30 
            :unit (y / year)))

# ::snt three or four years
# ::tok three or four years
# ::alignments 3-4|0.1.1+0.1 2-3|0.1.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.477
# ::node	0	or	1-2
# ::node	0.0	3	0-1
# ::node	0.1	temporal-quantity	3-4
# ::node	0.1.0	4	2-3
# ::node	0.1.1	year	3-4
# ::root	0	or
# ::edge	or	mod	3	0	0.0	
# ::edge	or	op1	temporal-quantity	0	0.1	
# ::edge	temporal-quantity	quant	4	0.1	0.1.0	
# ::edge	temporal-quantity	unit	year	0.1	0.1.1	
(o / or 
      :mod 3 
      :op1 (t / temporal-quantity 
            :quant 4 
            :unit (y / year)))

# ::snt six months or a year
# ::tok six months or a year
# ::alignments 4-5|0.1 2-3|0 1-2|0.0.1+0.0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.493
# ::node	0	or	2-3
# ::node	0.0	temporal-quantity	1-2
# ::node	0.0.0	6	0-1
# ::node	0.0.1	month	1-2
# ::node	0.1	year	4-5
# ::root	0	or
# ::edge	or	op1	temporal-quantity	0	0.0	
# ::edge	or	op2	year	0	0.1	
# ::edge	temporal-quantity	quant	6	0.0	0.0.0	
# ::edge	temporal-quantity	unit	month	0.0	0.0.1	
(o / or 
      :op1 (t / temporal-quantity 
            :quant 6 
            :unit (m / month)) 
      :op2 (y / year))

# ::snt The plane crashed 50 miles east of Moscow.
# ::tok The plane crashed 50 miles east of Moscow .
# ::alignments 7-8|0.2.0.0+0.2.0+0.2 5-6|0.3 4-5|0.1.1+0.1 3-4|0.1.0 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.601
# ::node	0	crash-01	2-3
# ::node	0.0	plane	1-2
# ::node	0.1	distance-quantity	4-5
# ::node	0.1.0	50	3-4
# ::node	0.1.1	mile	4-5
# ::node	0.2	city	7-8
# ::node	0.2.0	name	7-8
# ::node	0.2.0.0	"Moscow"	7-8
# ::node	0.3	east	5-6
# ::root	0	crash-01
# ::edge	city	name	name	0.2	0.2.0	
# ::edge	crash-01	ARG1	plane	0	0.0	
# ::edge	crash-01	ARG2	distance-quantity	0	0.1	
# ::edge	crash-01	location	city	0	0.2	
# ::edge	crash-01	mod	east	0	0.3	
# ::edge	distance-quantity	quant	50	0.1	0.1.0	
# ::edge	distance-quantity	unit	mile	0.1	0.1.1	
# ::edge	name	op1	"Moscow"	0.2.0	0.2.0.0	
(c2 / crash-01 
      :ARG1 (p / plane) 
      :ARG2 (d / distance-quantity 
            :quant 50 
            :unit (m / mile)) 
      :location (c / city 
            :name (n / name 
                  :op1 "Moscow")) 
      :mod (e / east))

# ::snt The plane crash occurred 50 miles east of Moscow.
# ::tok The plane crash occurred 50 miles east of Moscow .
# ::alignments 8-9|0.0.1.0.0.0+0.0.1.0.0+0.0.1.0 6-7|0.0.0 5-6|0.0.1.2+0.0.1 4-5|0.0.1.1 2-3|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.638
# ::node	0	crash-01	2-3
# ::node	0.0	plane	1-2
# ::node	0.0.0	east	6-7
# ::node	0.0.1	distance-quantity	5-6
# ::node	0.0.1.0	city	8-9
# ::node	0.0.1.0.0	name	8-9
# ::node	0.0.1.0.0.0	"Moscow"	8-9
# ::node	0.0.1.1	50	4-5
# ::node	0.0.1.2	mile	5-6
# ::root	0	crash-01
# ::edge	city	name	name	0.0.1.0	0.0.1.0.0	
# ::edge	crash-01	ARG1	plane	0	0.0	
# ::edge	distance-quantity	manner	city	0.0.1	0.0.1.0	
# ::edge	distance-quantity	quant	50	0.0.1	0.0.1.1	
# ::edge	distance-quantity	unit	mile	0.0.1	0.0.1.2	
# ::edge	east	op1	plane	0.0.0	0.0	
# ::edge	name	op1	"Moscow"	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	plane	op1	distance-quantity	0.0	0.0.1	
(c2 / crash-01 
      :ARG1 (p / plane 
            :op-of (e / east) 
            :op1 (d / distance-quantity 
                  :manner (c / city 
                        :name (n / name 
                              :op1 "Moscow")) 
                  :quant 50 
                  :unit (m / mile))))

# ::snt A large number of people gathered.
# ::tok A large number of people gathered .
# ::alignments 5-6|0 2-3|0.0 1-2|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.649
# ::node	0	gather-03	5-6
# ::node	0.0	number	2-3
# ::node	0.0.0	large	1-2
# ::root	0	gather-03
# ::edge	gather-03	quant	number	0	0.0	
# ::edge	number	mod	large	0.0	0.0.0	
(g / gather-03 
      :quant (n / number 
            :mod (l / large)))

# ::snt The number of people increased.
# ::tok The number of people increased .
# ::alignments 4-5|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.657
# ::node	0	increase-01	4-5
# ::node	0.0	number	1-2
# ::root	0	increase-01
# ::edge	increase-01	ARG1	number	0	0.0	
(i / increase-01 
      :ARG1 (n / number))

# ::snt C$20
# ::tok C$ 20
# ::alignments 1-2|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.660
# ::node	0	20	1-2
# ::root	0	20
(2 / 20)

# ::snt 20 Canadian dollars
# ::tok 20 Canadian dollars
# ::alignments 2-3|0.1+0 1-2|0.1.0.0.0+0.1.0.0+0.1.0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.676
# ::node	0	monetary-quantity	2-3
# ::node	0.0	20	0-1
# ::node	0.1	dollar	2-3
# ::node	0.1.0	country	1-2
# ::node	0.1.0.0	name	1-2
# ::node	0.1.0.0.0	"Canada"	1-2
# ::root	0	monetary-quantity
# ::edge	country	name	name	0.1.0	0.1.0.0	
# ::edge	dollar	mod	country	0.1	0.1.0	
# ::edge	monetary-quantity	quant	20	0	0.0	
# ::edge	monetary-quantity	unit	dollar	0	0.1	
# ::edge	name	op1	"Canada"	0.1.0.0	0.1.0.0.0	
(m / monetary-quantity 
      :quant 20 
      :unit (d / dollar 
            :mod (c / country 
                  :name (n / name 
                        :op1 "Canada"))))

# ::snt 7.9 on the Richter scale
# ::tok 7.9 on the Richter scale
# ::alignments 4-5|0 3-4|0.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.685
# ::node	0	scale	4-5
# ::node	0.0	richter	3-4
# ::node	0.1	7.9	0-1
# ::root	0	scale
# ::edge	scale	mod	richter	0	0.0	
# ::edge	scale	quant	7.9	0	0.1	
(s / scale 
      :mod (r / richter) 
      :quant 7.9)

# ::snt The aircraft's velocity reached three times the speed of sound.
# ::tok The aircraft 's velocity reached three times the speed of sound .
# ::alignments 10-11|0.1.0 8-9|0.1 6-7|0 5-6|0.2 4-5|0.0 3-4|0.0.0 1-2|0.0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:52.719
# ::node	0	time	6-7
# ::node	0.0	reach-01	4-5
# ::node	0.0.0	velocity	3-4
# ::node	0.0.0.0	aircraft	1-2
# ::node	0.1	speed	8-9
# ::node	0.1.0	sound	10-11
# ::node	0.2	3	5-6
# ::root	0	time
# ::edge	reach-01	ARG0	velocity	0.0	0.0.0	
# ::edge	reach-01	ARG1	time	0.0	0	
# ::edge	speed	mod	time	0.1	0	
# ::edge	speed	poss	sound	0.1	0.1.0	
# ::edge	time	quant	3	0	0.2	
# ::edge	velocity	poss	aircraft	0.0.0	0.0.0.0	
(t / time 
      :ARG1-of (r / reach-01 
            :ARG0 (v / velocity 
                  :poss (a / aircraft))) 
      :mod-of (s2 / speed 
            :poss (s / sound)) 
      :quant 3)

# ::snt Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds.
# ::tok Patrick Makau finished the marathon in 2 hours , 3 minutes and 38 seconds .
# ::alignments 13-14|0.1.0.0.0+0.1.0.0 12-13|0.1.0 11-12|0.2 10-11|0.2.1+0.2.1.0 9-10|0.2.1.0.0 7-8|0.2.0+0.2.0.0 6-7|0.2.0.0.0 4-5|0.1 2-3|0 0-2|0.0.0.0+0.0.0.1+0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.142
# ::node	0	finish-01	2-3
# ::node	0.0	person	0-2
# ::node	0.0.0	name	0-2
# ::node	0.0.0.0	"Patrick"	0-2
# ::node	0.0.0.1	"Makau"	0-2
# ::node	0.1	marathon	4-5
# ::node	0.1.0	38	12-13
# ::node	0.1.0.0	temporal-quantity	13-14
# ::node	0.1.0.0.0	second	13-14
# ::node	0.2	and	11-12
# ::node	0.2.0	hour	7-8
# ::node	0.2.0.0	temporal-quantity	7-8
# ::node	0.2.0.0.0	2	6-7
# ::node	0.2.1	minute	10-11
# ::node	0.2.1.0	temporal-quantity	10-11
# ::node	0.2.1.0.0	3	9-10
# ::root	0	finish-01
# ::edge	and	op1	hour	0.2	0.2.0	
# ::edge	and	op2	minute	0.2	0.2.1	
# ::edge	finish-01	ARG0	person	0	0.0	
# ::edge	finish-01	ARG1	marathon	0	0.1	
# ::edge	finish-01	ARG3	and	0	0.2	
# ::edge	marathon	mod	38	0.1	0.1.0	
# ::edge	name	op1	"Patrick"	0.0.0	0.0.0.0	
# ::edge	name	op2	"Makau"	0.0.0	0.0.0.1	
# ::edge	person	name	name	0.0	0.0.0	
# ::edge	temporal-quantity	quant	2	0.2.0.0	0.2.0.0.0	
# ::edge	temporal-quantity	quant	3	0.2.1.0	0.2.1.0.0	
# ::edge	temporal-quantity	quant	38	0.1.0.0	0.1.0	
# ::edge	temporal-quantity	unit	hour	0.2.0.0	0.2.0	
# ::edge	temporal-quantity	unit	minute	0.2.1.0	0.2.1	
# ::edge	temporal-quantity	unit	second	0.1.0.0	0.1.0.0.0	
(f / finish-01 
      :ARG0 (p / person 
            :name (n / name 
                  :op1 "Patrick" 
                  :op2 "Makau")) 
      :ARG1 (m2 / marathon 
            :mod (3 / 38 
                  :quant-of (t / temporal-quantity 
                        :unit (s / second)))) 
      :ARG3 (a / and 
            :op1 (h / hour 
                  :unit-of (t3 / temporal-quantity 
                        :quant 2)) 
            :op2 (m / minute 
                  :unit-of (t2 / temporal-quantity 
                        :quant 3))))

# ::snt February 29, 2012
# ::tok February 29 , 2012
# ::alignments 0-4|0.2+0.1+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.156
# ::node	0	date-entity	0-4
# ::node	0.0	29	0-4
# ::node	0.1	2	0-4
# ::node	0.2	2012	0-4
# ::root	0	date-entity
# ::edge	date-entity	day	29	0	0.0	
# ::edge	date-entity	month	2	0	0.1	
# ::edge	date-entity	year	2012	0	0.2	
(d / date-entity 
      :day 29 
      :month 2 
      :year 2012)

# ::snt 29 February 2012
# ::tok 29 February 2012
# ::alignments 0-3|0.2+0.1+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.169
# ::node	0	date-entity	0-3
# ::node	0.0	29	0-3
# ::node	0.1	2	0-3
# ::node	0.2	2012	0-3
# ::root	0	date-entity
# ::edge	date-entity	day	29	0	0.0	
# ::edge	date-entity	month	2	0	0.1	
# ::edge	date-entity	year	2012	0	0.2	
(d / date-entity 
      :day 29 
      :month 2 
      :year 2012)

# ::snt 2/29/2012
# ::tok 2/29/2012
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.171
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt 2012
# ::tok 2012
# ::alignments 0-1|0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.176
# ::node	0	date-entity	0-1
# ::node	0.0	2012	0-1
# ::root	0	date-entity
# ::edge	date-entity	year	2012	0	0.0	
(d / date-entity 
      :year 2012)

# ::snt the year 2012
# ::tok the year 2012
# ::alignments 2-3|0.1+0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.184
# ::node	0	date-entity	2-3
# ::node	0.0	year	1-2
# ::node	0.1	2012	2-3
# ::root	0	date-entity
# ::edge	date-entity	year	2012	0	0.1	
# ::edge	year	time	date-entity	0.0	0	
(d / date-entity 
      :time-of (y / year) 
      :year 2012)

# ::snt April
# ::tok April
# ::alignments 0-1|0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.189
# ::node	0	date-entity	0-1
# ::node	0.0	4	0-1
# ::root	0	date-entity
# ::edge	date-entity	month	4	0	0.0	
(d / date-entity 
      :month 4)

# ::snt Friday
# ::tok Friday
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.192
# ::node	0	friday	0-1
# ::root	0	friday
(f / friday)

# ::snt February, 2012
# ::tok February , 2012
# ::alignments 2-3|0.1+0 0-1|0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.203
# ::node	0	date-entity	2-3
# ::node	0.0	date-entity	0-1
# ::node	0.0.0	2	0-1
# ::node	0.1	2012	2-3
# ::root	0	date-entity
# ::edge	date-entity	compared-to	date-entity	0	0.0	
# ::edge	date-entity	month	2	0.0	0.0.0	
# ::edge	date-entity	year	2012	0	0.1	
(d / date-entity 
      :compared-to (d2 / date-entity 
            :month 2) 
      :year 2012)

# ::snt Wednesday, February 29
# ::tok Wednesday , February 29
# ::alignments 3-4|0.0 2-3|0.1+0 0-1|0.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.215
# ::node	0	date-entity	2-3
# ::node	0.0	29	3-4
# ::node	0.0.0	wednesday	0-1
# ::node	0.1	2	2-3
# ::root	0	date-entity
# ::edge	date-entity	mod	29	0	0.0	
# ::edge	date-entity	month	2	0	0.1	
# ::edge	wednesday	poss	29	0.0.0	0.0	
(d / date-entity 
      :mod (2 / 29 
            :poss-of (w / wednesday)) 
      :month 2)

# ::snt the 29th
# ::tok the 29th
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.218
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt Wednesday, February 29, 16:30 PST
# ::tok Wednesday , February 29 , 16:30 PST
# ::alignments 6-7|0.1 3-4|0.1.0 2-3|0.0+0 0-1|0.1.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.236
# ::node	0	date-entity	2-3
# ::node	0.0	2	2-3
# ::node	0.1	"PST"	6-7
# ::node	0.1.0	29	3-4
# ::node	0.1.1	wednesday	0-1
# ::root	0	date-entity
# ::edge	"PST"	time	wednesday	0.1	0.1.1	
# ::edge	29	op1	"PST"	0.1.0	0.1	
# ::edge	date-entity	month	2	0	0.0	
# ::edge	date-entity	timezone	"PST"	0	0.1	
(d / date-entity 
      :month 2 
      :timezone (P / "PST" 
            :op-of 29 
            :time (w / wednesday)))

# ::snt 16:30
# ::tok 16:30
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.239
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt 4:30pm
# ::tok 4:30pm
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.241
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt 4:30 in the afternoon
# ::tok 4:30 in the afternoon
# ::alignments 3-4|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.245
# ::node	0	afternoon	3-4
# ::root	0	afternoon
(a / afternoon)

# ::snt half past four
# ::tok half past four
# ::alignments 2-3|0.0.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.253
# ::node	0	past	1-2
# ::node	0.0	half	0-1
# ::node	0.0.0	4	2-3
# ::root	0	past
# ::edge	4	mod	half	0.0.0	0.0	
# ::edge	past	mod	half	0	0.0	
(p / past 
      :mod (h / half 
            :mod-of 4))

# ::snt February 29, 24th year of Heisei era
# ::tok February 29 , 24th year of Heisei era
# ::alignments 7-8|0.1.0 6-7|0.1.0.0 4-5|0.1 1-2|0.1.1 0-1|0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.276
# ::node	0	date-entity	0-1
# ::node	0.0	2	0-1
# ::node	0.1	year	4-5
# ::node	0.1.0	era	7-8
# ::node	0.1.0.0	"Heisei"	6-7
# ::node	0.1.1	29	1-2
# ::root	0	date-entity
# ::edge	date-entity	month	2	0	0.0	
# ::edge	era	mod	"Heisei"	0.1.0	0.1.0.0	
# ::edge	year	beneficiary	era	0.1	0.1.0	
# ::edge	year	quant	29	0.1	0.1.1	
# ::edge	year	time	date-entity	0.1	0	
(d / date-entity 
      :month 2 
      :time-of (y / year 
            :beneficiary (e / era 
                  :mod "Heisei") 
            :quant 29))

# ::snt 4th quarter, 2011
# ::tok 4th quarter , 2011
# ::alignments 3-4|0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.282
# ::node	0	date-entity	3-4
# ::node	0.0	2011	3-4
# ::root	0	date-entity
# ::edge	date-entity	year	2011	0	0.0	
(d / date-entity 
      :year 2011)

# ::snt 2011Q4
# ::tok 2011Q4
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.285
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt Summer 2011
# ::tok Summer 2011
# ::alignments 1-2|0.1+0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.292
# ::node	0	date-entity	1-2
# ::node	0.0	summer	0-1
# ::node	0.1	2011	1-2
# ::root	0	date-entity
# ::edge	date-entity	season	summer	0	0.0	
# ::edge	date-entity	year	2011	0	0.1	
(d / date-entity 
      :season (s / summer) 
      :year 2011)

# ::snt Winter 2011-2012
# ::tok Winter 2011-2012
# ::alignments 1-2|0.0 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.298
# ::node	0	winter	0-1
# ::node	0.0	2011	1-2
# ::root	0	winter
(w / winter 
      :mod-of 2011)

# ::snt academic year 2011-2012
# ::tok academic year 2011-2012
# ::alignments 2-3|0.0.0 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.305
# ::node	0	year	1-2
# ::node	0.0	academia	0-1
# ::node	0.0.0	2011	2-3
# ::root	0	year
# ::edge	2011	mod	academia	0.0.0	0.0	
# ::edge	year	mod	academia	0	0.0	
(y / year 
      :mod (a / academia 
            :mod-of 2011))

# ::snt United States government fiscal year 2012
# ::tok United States government fiscal year 2012
# ::alignments 5-6|0.0.0.0+0.0.0 4-5|0.0 3-4|0 2-3|0.0.1.0+0.0.1 0-2|0.0.1.0.0.0.0+0.0.1.0.0.0.1+0.0.1.0.0.0+0.0.1.0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.340
# ::node	0	fiscal	3-4
# ::node	0.0	year	4-5
# ::node	0.0.0	date-entity	5-6
# ::node	0.0.0.0	2012	5-6
# ::node	0.0.1	government-organization	2-3
# ::node	0.0.1.0	govern-01	2-3
# ::node	0.0.1.0.0	country	0-2
# ::node	0.0.1.0.0.0	name	0-2
# ::node	0.0.1.0.0.0.0	"States"	0-2
# ::node	0.0.1.0.0.0.1	"United"	0-2
# ::root	0	fiscal
(f / fiscal 
      :mod-of (y / year 
            :calendar-of (d / date-entity 
                  :year 2012) 
            :mod (g / government-organization 
                  :ARG0-of (g2 / govern-01 
                        :ARG1 (c / country 
                              :name (n / name 
                                    :op1 "States" 
                                    :op2 "United"))))))

# ::snt March 8-9, 2012
# ::tok March 8-9 , 2012
# ::alignments 3-4|0.1+0 0-1|0.0.0+0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.352
# ::node	0	date-entity	3-4
# ::node	0.0	date-entity	0-1
# ::node	0.0.0	3	0-1
# ::node	0.1	2012	3-4
# ::root	0	date-entity
# ::edge	date-entity	era	date-entity	0	0.0	
# ::edge	date-entity	month	3	0.0	0.0.0	
# ::edge	date-entity	year	2012	0	0.1	
(d / date-entity 
      :era (d2 / date-entity 
            :month 3) 
      :year 2012)

# ::snt Sept. 1, 1939 - May 8, 1945
# ::tok Sept. 1 , 1939 - May 8 , 1945
# ::alignments 5-9|0.2.2+0.2.1+0.2.0+0.2 0-4|0.3+0.1+0.0+0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.388
# ::node	0	date-entity	0-4
# ::node	0.0	1	0-4
# ::node	0.1	9	0-4
# ::node	0.2	date-entity	5-9
# ::node	0.2.0	8	5-9
# ::node	0.2.1	5	5-9
# ::node	0.2.2	1945	5-9
# ::node	0.3	1939	0-4
# ::root	0	date-entity
# ::edge	date-entity	day	1	0	0.0	
# ::edge	date-entity	day	8	0.2	0.2.0	
# ::edge	date-entity	month	5	0.2	0.2.1	
# ::edge	date-entity	month	9	0	0.1	
# ::edge	date-entity	name	date-entity	0.2	0	
# ::edge	date-entity	year	1939	0	0.3	
# ::edge	date-entity	year	1945	0.2	0.2.2	
(d2 / date-entity 
      :day 1 
      :month 9 
      :name-of (d / date-entity 
            :day 8 
            :month 5 
            :year 1945) 
      :year 1939)

# ::snt 25%
# ::tok 25 %
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.392
# ::node	0	25	0-1
# ::root	0	25
(2 / 25)

# ::snt twenty-five percent
# ::tok twenty - five percent
# ::alignments 3-4|0 2-3|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.397
# ::node	0	percentage-entity	3-4
# ::node	0.0	5	2-3
# ::root	0	percentage-entity
# ::edge	percentage-entity	mod	5	0	0.0	
(p / percentage-entity 
      :mod 5)

# ::snt 25 percent
# ::tok 25 percent
# ::alignments 1-2|0 0-1|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.402
# ::node	0	percentage-entity	1-2
# ::node	0.0	25	0-1
# ::root	0	percentage-entity
# ::edge	percentage-entity	value	25	0	0.0	
(p / percentage-entity 
      :value 25)

# ::snt 1-800-555-1212
# ::tok 1-800-555-1212
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.404
# ::node	0	amr-empty	0-1
# ::root	0	amr-empty
(a / amr-empty)

# ::snt 1 (800) 555-1212
# ::tok 1 ( 800 ) 555-1212
# ::alignments 4-5|0.3+0.2+0.0+0 2-3|0.1.0 0-1|0.1 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.423
# ::node	0	date-entity	4-5
# ::node	0.0	12	4-5
# ::node	0.1	1	0-1
# ::node	0.1.0	800	2-3
# ::node	0.2	12	4-5
# ::node	0.3	555	4-5
# ::root	0	date-entity
# ::edge	800	quant	1	0.1.0	0.1	
# ::edge	date-entity	day	12	0	0.0	
# ::edge	date-entity	mod	1	0	0.1	
# ::edge	date-entity	month	12	0	0.2	
# ::edge	date-entity	year	555	0	0.3	
(d / date-entity 
      :day 12 
      :mod (13 / 1 
            :quant-of 800) 
      :month 12 
      :year 555)

# ::snt president@whitehouse.gov
# ::tok president@whitehouse.gov
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.426
# ::node	0	"president@whitehouse.gov"	0-1
# ::root	0	"president@whitehouse.gov"
(p / "president@whitehouse.gov")

# ::snt www.whitehouse.gov
# ::tok www.whitehouse.gov
# ::alignments 0-1|0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.429
# ::node	0	"www.whitehouse.gov"	0-1
# ::root	0	"www.whitehouse.gov"
(w / "www.whitehouse.gov")

# ::snt The woman who lost her scarf.
# ::tok The woman who lost her scarf .
# ::alignments 5-6|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.439
# ::node	0	lose-02	3-4
# ::node	0.0	woman	1-2
# ::node	0.1	scarf	5-6
# ::root	0	lose-02
# ::edge	lose-02	ARG0	woman	0	0.0	
# ::edge	lose-02	ARG1	scarf	0	0.1	
(l / lose-02 
      :ARG0 (w / woman) 
      :ARG1 (s / scarf))

# ::snt a procedure to ensure quality
# ::tok a procedure to ensure quality
# ::alignments 4-5|0.1 3-4|0 1-2|0.0 ::annotator JAMR dev v0.3 ::date 2016-06-04T10:15:53.447
# ::node	0	ensure-01	3-4
# ::node	0.0	procedure	1-2
# ::node	0.1	quality	4-5
# ::root	0	ensure-01
# ::edge	ensure-01	ARG0	procedure	0	0.0	
# ::edge	ensure-01	ARG1	quality	0	0.1	
(e / ensure-01 
      :ARG0 (p / procedure) 
      :ARG1 (q / quality))

